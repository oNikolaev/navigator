#Область Форма

&НаСервере
Перем Навигатор;

#Область События

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Не ТипЗнч(Параметры.ОбъектБазы) = Тип("ДанныеФормыСтруктура") Тогда
		
		Если Не ЗначениеЗаполнено(Параметры.ОбъектБазы) Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Попытка
		ДанныеОбъекта = Параметры.ОбъектБазы.ПолучитьОбъект();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	Если ДанныеОбъекта = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Попытка
		МетаданныеОбъекта = Параметры.ОбъектБазы.Метаданные();
	Исключение
		Отказ = Истина;
		Возврат;
	КонецПопытки;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	ОбъектБазы = Параметры.ОбъектБазы;
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	ЭтоДокумент   = Навигатор.ЭтоДокумент(ОбъектБазыМД);
	ЭтоСправочник = Навигатор.ЭтоСправочник(ОбъектБазыМД);
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
	УстановитьСвойстваЭлементовФормы();
	
	ВсеТабличныеЧастиРежимОтображения     = "Все";
	ВсеРегистрыНакопленияРежимОтображения = "Все";
	ВсеРегистрыСведенийРежимОтображения   = "Все";
	ВсеРегистрыБухгалтерииРежимОтображения = "Все";
	ВсеРегистрыРасчетаРежимОтображения     = "Все";
	
	РежимЗаписиДокументаБазы = "Запись";
	
	ЗаполнитьДеревоДоступныхСценариев();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Оповестить("ДобавитьВИсторию", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор" Тогда
		
		Если ИмяСобытия = "ЗакрытьВсеОкнаРедакторов" Тогда
			
			Попытка
				Закрыть();
			Исключение
				//
			КонецПопытки;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#Область Команды

&НаКлиенте
Процедура УдалитьОбъект(Команда)
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("УдалитьОбъектЗавершение", ЭтаФорма), 
		"Удалить " + ОбъектБазы + "?", 
		РежимДиалогаВопрос.ОКОтмена,
		120, 
		КодВозвратаДиалога.Отмена, 
		"Непосредственное удаление"
	);
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураПодчиненности(Команда)
	
	СтруктураПодчиненностиНаКлиенте();
	
	РазвернутьЭлементыДереваЗначений(ДеревоПодчиненныеОбъекты, "ДеревоПодчиненныеОбъекты");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИзмененияОбъекта(Команда)
	
	ЗаписатьИзмененияОбъектаНаКлиенте();
	
	УстановитьСвойстваЭлементовФормы();
	
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' записан.", БиблиотекаКартинок.Записать);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЗакрыть(Команда)
	
	ЗаписатьИзмененияОбъектаНаКлиенте();
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' записан.", БиблиотекаКартинок.Записать);
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеРеквизита(Команда)
	
	ИзменитьЗначениеРеквизитаНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	
	СсылкаНаОбъект = СсылкаНаОбъект();
	
	#Область Предусловия
	
	Если СсылкаНаОбъект = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьЗначение(, СсылкаНаОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ПровестиДокумент(Команда)
	
	ПровестиДокументНаСервере();
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
	УстановитьСвойстваЭлементовФормы();
	
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' проведен.", БиблиотекаКартинок.Провести);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтменитьПроведениеДокумента(Команда)
	
	ОтменитьПроведениеДокументаНаСервере();
	УстановитьСвойстваЭлементовФормы();
	
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
	ПоказатьОповещениеПользователя("Изменение:", , "'" + ОбъектБазы + "' проведение отменено.", БиблиотекаКартинок.ОтменаПроведения);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаПерейти(Команда)
	
	ПерейтиПоНавигационнойСсылкеНаЭлемент();
	
	Оповестить("ДобавитьВИсторию", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранное(Команда)
	
	ДобавитьВИзбранноеНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьДанныеОбъекта(Команда)
	
	ПеречитатьДанныеОбъектаНаСервере();
	
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
	ОтобразитьДанныеXMLОбъекта();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаПерейтиНазад(Команда)
	// TODO Навигация назад
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаПерейтиВперед(Команда)
	// TODO Навигация вперед
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкуУдаления(Команда)
	
	ПараметрыКоманды = Новый Структура("Выполнена, ЗнПометкиПосле, ОписаниеОшибки");
	УстановитьСнятьПометкуУдаленияНаСервере(ПараметрыКоманды);
	
	Элементы.КомандаУстановитьСнятьПометкуУдаления.Картинка = ?(ПараметрыКоманды.ЗнПометкиПосле, 
		Элементы.КартинкаСнятьПометкуУдаления.Картинка, 
		Элементы.КартинкаУстановитьПометкуУдаления.Картинка
	);
	
	Текст = "Изменение:";
	ДействиеПриНажатии = Новый ОписаниеОповещения("УстановитьСнятьПометкуУдаленияОповещениеПользователяПриНажатии", ЭтаФорма);
	
	Пояснение = Строка(ОбъектБазы);
	ТекстОписанияОшибки = "";
	
	Пометка = ПараметрыКоманды.ЗнПометкиПосле;
	
	Если ПараметрыКоманды.Выполнена Тогда
		
		Если Пометка Тогда
			Текст = "Пометка удаления установлена";
		ИначеЕсли Не Пометка Тогда
			Текст = "Пометка удаления снята";
		КонецЕсли;
		
		СтатусОповещения = СтатусОповещенияПользователя.Информация;
		
	ИначеЕсли Не ПараметрыКоманды.Выполнена Тогда
		
		Если Пометка Тогда
			Текст = "Пометка удаления не снята";
		ИначеЕсли Не Пометка Тогда
			Текст = "Пометка удаления не установлена";
		КонецЕсли;
		
		ТекстОписанияОшибки = "Описание ошибки: " + ПараметрыКоманды.ОписаниеОшибки;
		
		СтатусОповещения = СтатусОповещенияПользователя.Важное;
		
	КонецЕсли;
	
	КартинкаОповещения = ?(ПараметрыКоманды.ЗнПометкиПосле, 
		Элементы.КартинкаУстановитьПометкуУдаления.Картинка, 
		Элементы.КартинкаСнятьПометкуУдаления.Картинка
	);
	
	Если ЗначениеЗаполнено(ТекстОписанияОшибки) Тогда
		Сообщить(ТекстОписанияОшибки);
	КонецЕсли;
	
	ПоказатьОповещениеПользователя(Текст, ДействиеПриНажатии, Пояснение, КартинкаОповещения, СтатусОповещения);
	
	ПеречитатьДанныеОбъектаНаСервере();
	РазвернутьЭлементыДереваЗначений(ВсеРеквизиты, "ВсеРеквизиты");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокУзловПлановОбмена(Команда)
	
	ЗаполнитьИзмененияНаУзлахОбмена();
	
	РазвернутьЭлементыДереваЗначений(ДеревоУзловОбмена, "ДеревоУзловОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаблокироватьОбъект(Команда)
	
	КоличествоСекунд = 0;
	
	ПоказатьВводЗначения(
		Новый ОписаниеОповещения("ЗаблокироватьОбъектПродолжение", ЭтаФорма), 
		КоличествоСекунд, "На какое количество секунд заблокировать объект?", Тип("Число")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетПоДвижениямДокумента(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ОтчетДвиженияДокумента");
	ОткрытьФорму(ПолноеИмяФормы, Новый Структура("Документ", ОбъектБазы), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьЗагрузитьДанныеОбъектаXML(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ВыгрузкаЗагрузкаДанныхXML");
	ОткрытьФорму(ПолноеИмяФормы, Новый Структура("ОбъектБазы", ОбъектБазы), ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЖурналРегистрацииПоОбъекту(Команда)
	
	ЗаполнитьЖурналРегистрацииПоОбъектуНаКлиенте();
	
КонецПроцедуры

&НаКлиенте
Процедура РазобратьОписаниеСвязанныхДанных(Команда)
	
	РазобратьОписаниеСвязанныхДанныхНаКлиенте();
	
КонецПроцедуры

#КонецОбласти

#Область Таблицы

#Область ВсеРеквизиты

&НаКлиенте
Процедура ВсеРеквизитыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЗначениеРеквизита = ТекущиеДанные.Значение;
	
	Если Поле.Имя = "ВсеРеквизитыПредставлениеТипа" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ОпределительСписка = ТекущиеДанные.ПредставлениеТипа;
		Оповестить("ОткрытьСписокЭлементов", ОпределительСписка, "Навигатор_ФормаРедакторОбъекта");
		
	ИначеЕсли Поле.Имя = "ВсеРеквизитыЗначение" Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ИмяФормыРедактора = ИмяФормыРедактораЗначения(ЗначениеРеквизита);
		
		Если Не ЗначениеЗаполнено(ИмяФормыРедактора) Тогда
			Возврат;
		КонецЕсли;
		
		// TODO Для значений реквизитов типа ХранилищеЗначения необходимо в параметры формы передавать
		// сам объект и имя реквизита. Также надо продумать каким образом обрабатывать изменение значения
		// реквизита типа ХранилищеЗначения.
		
		Если ЭтоХранилищеЗначения(ЗначениеРеквизита) Тогда
			ПараметрыФормы = Новый Структура("ЗначениеХранилища", ЗначениеРеквизита);
		Иначе
			ПараметрыФормы = Новый Структура("ОбъектБазы", ЗначениеРеквизита);
		КонецЕсли;
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, ИмяФормыРедактора);
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРеквизитыРеквизитЗначениеПриИзменении(Элемент)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ВсеРеквизиты.ТекущиеДанные;
	
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ТекущиеДанные.Изменен = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти

#Область ВсеТабличныеЧасти

&НаКлиенте
Процедура ВсеТабличныеЧастиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекущиеДанные.ТипСтроки = "ТабличнаяЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеТабличныеЧасти(ТекущиеДанные.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеТабличныеЧастиРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеТабличныеЧасти();
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыНакопления

&НаКлиенте
Процедура ВсеРегистрыНакопленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыНакопления(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРегистрыНакопленияРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеРегистрыНакопления();
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыСведений

&НаКлиенте
Процедура ВсеРегистрыСведенийВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыСведений(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРегистрыСведенийРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеРегистрыСведений();
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыБухгалтерии

&НаКлиенте
Процедура ВсеРегистрыБухгалтерииВыбор(Элемент, ВыбраннаяСтрока, Поле,
	СтандартнаяОбработка)
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыБухгалтерии(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРегистрыБухгалтерииРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеРегистрыБухгалтерии();
	
КонецПроцедуры

#КонецОбласти

#Область ВсеРегистрыРасчета

&НаКлиенте
Процедура ВсеРегистрыРасчетаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриВыбореСтрокиВсеРегистрыРасчета(Элемент.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеРегистрыРасчетаРежимОтображенияПриИзменении(Элемент)
	
	ЗаполнитьВсеРегистрыРасчета();
	
КонецПроцедуры

#КонецОбласти

#Область ДеревоПодчиненныеОбъекты

&НаКлиенте
Процедура ДеревоПодчиненныеОбъектыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные.Ссылка);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ДеревоУзловОбмена

&НаКлиенте
Процедура ДеревоУзловОбменаПометкаПриИзменении(Элемент)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ДеревоУзловОбмена.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Уровень = 0 Тогда
		ТекущиеДанные.Пометка = ?(ТекущиеДанные.Пометка = 1, 0, 1);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИзмВыполнено = Ложь;
	
	ЗарегистрироватьУдалитьИзмененияНаУзле(ТекущиеДанные.Ссылка, ТекущиеДанные.Пометка, ИзмВыполнено);
	
	Если ИзмВыполнено Тогда
		Если ТекущиеДанные.Пометка = 1 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Регистрация изменений:'");
			ТекстПредупреждения = НСтр("ru = 'Зарегистрировано изменение %1
			|на узле ""%0""'");
		ИначеЕсли ТекущиеДанные.Пометка = 0 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Отмена регистрации:'");
			ТекстПредупреждения = НСтр("ru = 'Отменена регистрация изменения %1
			|на узле ""%0"".'");
		КонецЕсли; 
	Иначе
		Если ТекущиеДанные.Пометка = 1 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Регистрация изменений:'");
			ТекстПредупреждения = НСтр("ru = 'Регистрация изменения %1
			|на узле ""%0""' не выполнена.");
		ИначеЕсли ТекущиеДанные.Пометка = 0 Тогда
			ЗаголовокПредупреждения = НСтр("ru = 'Отмена регистрации:'");
			ТекстПредупреждения = НСтр("ru = 'Отмена регистрации изменения %1
			|на узле ""%0"" не выполнена.'");
		КонецЕсли; 
	КонецЕсли;
	
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%0", ТекущиеДанные.Ссылка);
	ТекстПредупреждения = СтрЗаменить(ТекстПредупреждения, "%1", ОбъектБазы);
	
	ПоказатьОповещениеПользователя(ЗаголовокПредупреждения,
			НавигационнаяСсылкаНаУзелПланаОбмена(ТекущиеДанные.Ссылка),
			ТекстПредупреждения,
			Элементы.КартинкаИнформация32.Картинка);
	
КонецПроцедуры

#КонецОбласти 

#Область СвязиОбъекта

&НаКлиенте
Процедура СвязиОбъектаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	// TODO Сформировать запрос и создать динамический список, отобразить количество записей.
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Методы

#Область ИнтерфейсНавигатора

&НаСервере
Функция ИмяФормыРедактораЗначения(ЗначениеДляРедактирования)
	Возврат ЭтаОбработка().ИмяФормыРедактораЗначения(ЗначениеДляРедактирования);
КонецФункции

&НаСервере
Функция ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды)
	Возврат ЭтаОбработка().ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
КонецФункции

&НаСервере
Функция ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды)
	Возврат ЭтаОбработка().ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
КонецФункции

&НаСервере
Функция НавигационнаяСсылкаНаУзелПланаОбмена(УзелПланаОбмена) Экспорт
	Возврат ЭтаОбработка().НавигационнаяСсылкаНаУзелПланаОбмена(УзелПланаОбмена);
КонецФункции

#КонецОбласти

#Область ПодключаемыеДействия

&НаКлиенте
Процедура КомандаОткрытьСтрокуВРедактореЗаписи(Элемент)
	
	ОткрытьСтрокуВРедактореЗаписиНаКлиенте(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьСтрокуТабличнойЧасти(Элемент)
	
	УдалитьСтрокуТабличнойЧасти(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьТабличнуюЧасть(Элемент)
	
	ОчиститьТабличнуюЧасть(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОчиститьДвиженияПоРегистру(Элемент)
	
	ОчиститьДвиженияПоРегистру(Элемент.Имя);
	
КонецПроцедуры

#КонецОбласти

#Область ПодключаемыеСобытия

&НаКлиенте
Процедура Подключаемый_Регистр_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ЗначениеРеквизита = Элемент.ТекущиеДанные[Поле.Имя];
	
	Если Поле.Имя = "НомерСтроки" Тогда
		// TODO Сформировать структру данных и передать в форму редактора.
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура("ОбъектБазы", ЗначениеРеквизита);
	КонецЕсли;
	
	ИмяФормыРедактора = ИмяФормыРедактораЗначения(ЗначениеРеквизита);
	
	Если Не ЗначениеЗаполнено(ИмяФормыРедактора) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, ИмяФормыРедактора);
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ТабличнаяЧасть_Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЗначениеРеквизита = ТекущиеДанные[Поле.Имя];
	ИмяФормыРедактора = ИмяФормыРедактораЗначения(ЗначениеРеквизита);
	
	Если Не ЗначениеЗаполнено(ИмяФормыРедактора) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("ОбъектБазы", ЗначениеРеквизита);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, ИмяФормыРедактора);
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиОповещений

&НаКлиенте
Процедура ЗаблокироватьОбъектПродолжение(КоличествоСекунд, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если (КоличествоСекунд = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если (КоличествоСекунд = 0) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Элементы.КомандаЗаблокироватьОбъект.Картинка = Элементы.КартинкаРазблокироватьОбъектБазы.Картинка;
	
	ЗаблокироватьОбъектНаСервере(КоличествоСекунд);
	
	Элементы.КомандаЗаблокироватьОбъект.Картинка = Элементы.КартинкаЗаблокироватьОбъектБазы.Картинка;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОбъектЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Перем УдалениеВыполнено, ПредставлениеОбъекта;
	
	#Область Предусловия
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	УдалитьОбъектБазы(УдалениеВыполнено, ПредставлениеОбъекта);
	
	Если УдалениеВыполнено Тогда
		ПоказатьОповещениеПользователя("Удаление:", , ПредставлениеОбъекта + " удален.", БиблиотекаКартинок.УдалитьНепосредственно);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаЗавершение(Значение, ПараметрыРедактирования) Экспорт
	
	//#Область Предусловия
	//
	//Если Значение = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Если (Значение = ПараметрыРедактирования.Значение) Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//#КонецОбласти
	//
	//Строки = ВсеРеквизиты.НайтиСтроки(Новый Структура("Имя", ПараметрыРедактирования.Имя));
	//
	//Если Строки.Количество() = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Строки[0].Значение = Значение;
	//Строки[0].Изменен = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДвиженияПоРегиструВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если Не (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОчиститьДвиженияПоРегиструОбъектаБазы(ДополнительныеПараметры.ИмяТаблицы, ДополнительныеПараметры.ТипТаблицы);
	
	// TODO Установить количество записей по движениям регистра.
	
	Элементы[ДополнительныеПараметры.ИмяСпискаЭлементов].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуТабличнойЧастиВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если Не (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ВыделенныеСтроки = Элементы[ДополнительныеПараметры.ИмяСпискаЭлементов].ВыделенныеСтроки;
	
	УдалитьСтрокиТабличнойЧастиОбъектаБазы(ДополнительныеПараметры.ИмяТаблицы, ВыделенныеСтроки);
	Элементы[ДополнительныеПараметры.ИмяСпискаЭлементов].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьВопросЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если Не (РезультатВопроса = КодВозвратаДиалога.Да) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОчиститьТабличнуюЧастьОбъектаБазы(ДополнительныеПараметры.ИмяТаблицы);
	ЗаполнитьВсеТабличныеЧасти(); // TODO Переделать. Нужно только обнулить отображения количества записей в данной ТЧ.
	Элементы[ДополнительныеПараметры.ИмяСпискаЭлементов].Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьПометкуУдаленияОповещениеПользователяПриНажатии(ДополнительныеПараметры) Экспорт
	
	ПоказатьЗначение(, ОбъектБазы);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЖурналРегистрацииПоОбъектуНаКлиентеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "НеИспользовать");
	
	#Область Предусловия
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	
КонецПроцедуры

#КонецОбласти

#Область СвязанныеДанные

&НаКлиенте
Процедура РазобратьОписаниеСвязанныхДанныхНаКлиенте()
	
	РазобратьОписаниеСвязанныхДанныхНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура РазобратьОписаниеСвязанныхДанныхНаСервере()
	
	СвязиОбъекта.ПолучитьЭлементы().Очистить();
	
	#Область Предусловия
	
	КоличествоСтрок = СвязанныеДанныеОбъекта.КоличествоСтрок();
	
	Если КоличествоСтрок = 0 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	Для НомерСтроки = 1 По КоличествоСтрок Цикл
		
		Строка = СокрЛП(СвязанныеДанныеОбъекта.ПолучитьСтроку(НомерСтроки));
		
		Если Не ОбрабатыватьСтрокуОписанияСвязанныхДанных(Строка) Тогда
			Продолжить;
		КонецЕсли;
		
		СоставОписания = Навигатор.РазложитьСтрокуВМассивПодстрок(Строка, ".");
		
		Если Не ОбрабатыватьОписаниеСвязанныхДанных(СоставОписания) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьЗаписьОписанияСвязанныхДанных(СоставОписания);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаписьОписанияСвязанныхДанных(СоставОписания)
	
	стр_СвязиОбъекта = СвязиОбъекта.ПолучитьЭлементы().Добавить();
	стр_СвязиОбъекта.ТипКоллекцииПриемника = "";
	стр_СвязиОбъекта.ТипПриемника = СоставОписания[0];
	стр_СвязиОбъекта.ИмяПриемника = СоставОписания[1];
	стр_СвязиОбъекта.ТипПоляПриемника = СоставОписания[2];
	стр_СвязиОбъекта.ИмяПоляПриемника = СоставОписания[3];
	
КонецПроцедуры

&НаСервере
Функция ОбрабатыватьОписаниеСвязанныхДанных(СоставОписания)
	
	#Область Предусловия
	
	Если СоставОписания.Количество() = 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Начало = СоставОписания[0];
	
	Если ВРег(Начало) = ВРег("Подсистема") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("КритерийОтбора") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ОбщийРеквизит") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ПланОбмена") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ПодпискаНаСобытие") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ФункциональнаяОпция") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ОпределяемыйТип") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ОбщаяКоманда") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("Отчет") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("Обработка") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ВРег(Начало) = ВРег("ПланВидовХарактеристик") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОбрабатыватьСтрокуОписанияСвязанныхДанных(Знач Строка)
	
	#Область Предусловия
	
	Строка = СокрЛП(Строка);
	
	Если Не ЗначениеЗаполнено(Строка) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрНайти(Строка, " ") > 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьДеревоДоступныхСценариев()
	
	дз_ДеревоДоступныхСценариев = РеквизитФормыВЗначение("ДеревоДоступныхСценариев");
	
	#Область Контекст
	
	Если Ложь Тогда
		дз_ДеревоДоступныхСценариев = Новый ДеревоЗначений;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ЭтоСправочник Тогда
		стр_ДеревоДоступныхСценариев1 = дз_ДеревоДоступныхСценариев.Строки.Добавить();
		стр_ДеревоДоступныхСценариев1.Имя = "СправочникСсылка";
		стр_ДеревоДоступныхСценариев1.Представление = "СправочникСсылка";
		
		стр_ДеревоДоступныхСценариев2 = стр_ДеревоДоступныхСценариев1.Строки.Добавить();
		стр_ДеревоДоступныхСценариев2.Имя = "Методы";
		стр_ДеревоДоступныхСценариев2.Представление = "Методы";
		
		стр_ДеревоДоступныхСценариев3 = стр_ДеревоДоступныхСценариев2.Строки.Добавить();
		стр_ДеревоДоступныхСценариев3.Имя = "Метаданные";
		стр_ДеревоДоступныхСценариев3.Представление = "Метаданные()";
		
		стр_ДеревоДоступныхСценариев3 = стр_ДеревоДоступныхСценариев2.Строки.Добавить();
		стр_ДеревоДоступныхСценариев3.Имя = "ПолноеНаименование";
		стр_ДеревоДоступныхСценариев3.Представление = "ПолноеНаименование()";
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(дз_ДеревоДоступныхСценариев, "ДеревоДоступныхСценариев");
	
КонецПроцедуры

// Управляет состоянием поля табличного документа.
//
// Параметры:
//	ПолеТабличногоДокумента - ПолеФормы - поле формы с видом ПолеТабличногоДокумента, для которого необходимо установить состояние.
//	Состояние               - Строка - задает вид состояния.
//
&НаКлиенте
Процедура УстановитьСостояниеПоляТабличногоДокумента(ПолеТабличногоДокумента, Состояние = "НеИспользовать") Экспорт
	
	Если ТипЗнч(ПолеТабличногоДокумента) = Тип("ПолеФормы") 
		И ПолеТабличногоДокумента.Вид = ВидПоляФормы.ПолеТабличногоДокумента Тогда
		ОтображениеСостояния = ПолеТабличногоДокумента.ОтображениеСостояния;
		Если ВРег(Состояние) = "НЕИСПОЛЬЗОВАТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = "";
		ИначеЕсли ВРег(Состояние) = "НЕАКТУАЛЬНОСТЬ" Тогда
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = Новый Картинка;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет не сформирован. Нажмите ""Сформировать"" для получения отчета.'");;
		ИначеЕсли ВРег(Состояние) = "ФОРМИРОВАНИЕОТЧЕТА" Тогда  
			ОтображениеСостояния.Видимость                      = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
			ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
			ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'");
		Иначе
			ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''2'')'"));
		КонецЕсли;
	Иначе
		ВызватьИсключение(НСтр("ru = 'Недопустимое значение параметра (параметр номер ''1'')'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеТабличныеЧасти(ИмяТабличнойЧасти)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеТабличнойЧасти(ИмяТабличнойЧасти);
	
	АктивизироватьСтраницуТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыНакопления(СвойстваРегистра)
	
	#Область Предусловия
	
	Если СвойстваРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрНакопления", СвойстваРегистра.Имя);
	
	АктивизироватьСтраницуТаблицыОбъекта("РегистрНакопления", СвойстваРегистра.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыСведений(СвойстваРегистра)
	
	#Область Предусловия
	
	Если СвойстваРегистра = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрСведений", СвойстваРегистра.Имя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрСведений", СвойстваРегистра.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыБухгалтерии(СвойстваРегистра)
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрБухгалтерии", СвойстваРегистра.Имя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрБухгалтерии", СвойстваРегистра.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриВыбореСтрокиВсеРегистрыРасчета(СвойстваРегистра)
	
	ОтобразитьДанныеДвиженийПоРегистру("РегистрРасчета", СвойстваРегистра.Имя);
	АктивизироватьСтраницуТаблицыОбъекта("РегистрРасчета", СвойстваРегистра.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗначениеРеквизитаНаКлиенте()
	
	ТекущиеДанные = Элементы.ВсеРеквизиты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеРеквизита = ТекущиеДанные.Значение;
	
	ПараметрыРедактирования = Новый Структура("Имя, Значение");
	ЗаполнитьЗначенияСвойств(ПараметрыРедактирования, ТекущиеДанные);
	
	Оповещение = Новый ОписаниеОповещения("ИзменитьЗначениеРеквизитаЗавершение", ЭтаФорма, ПараметрыРедактирования);
	ПоказатьВводЗначения(Оповещение, ЗначениеРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВИзбранноеНаКлиенте()
	
	Оповестить("ДобавитьВИзбранное", ОбъектБазы, "Навигатор_ФормаРедакторОбъекта");
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДвиженияПоРегистру(ИмяЭлементаКоманды)
	
	#Область Предусловия
	
	ИмяСпискаЭлементов = ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ПараметрыТаблицы.ТипТаблицы = "ТабличнаяЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОчиститьДвиженияПоРегиструВопросЗавершение", 
					ЭтаФорма, 
					Новый Структура("ИмяТаблицы, ТипТаблицы, ИмяСпискаЭлементов", ПараметрыТаблицы.ИмяТаблицы, ПараметрыТаблицы.ТипТаблицы, ИмяСпискаЭлементов)
				)
			, "Очистить движения по регистру?", 
			РежимДиалогаВопрос.ДаНет,
			120,
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьСтрокуТабличнойЧасти(ИмяЭлементаКоманды)
	
	#Область Предусловия
	
	ИмяСпискаЭлементов = ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыТаблицы.ТипТаблицы = "ТабличнаяЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("УдалитьСтрокуТабличнойЧастиВопросЗавершение", 
					ЭтаФорма, 
					Новый Структура("ИмяТаблицы, ИмяСпискаЭлементов", ПараметрыТаблицы.ИмяТаблицы, ИмяСпискаЭлементов)
				)
			, "Удалить выделенные строки?", 
			РежимДиалогаВопрос.ДаНет,
			120,
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяЭлементаКоманды)
	
	#Область Предусловия
	
	ИмяСпискаЭлементов = ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ПараметрыТаблицы.ТипТаблицы = "ТабличнаяЧасть") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьВопросЗавершение", 
					ЭтаФорма, 
					Новый Структура("ИмяТаблицы, ИмяСпискаЭлементов", ПараметрыТаблицы.ИмяТаблицы, ИмяСпискаЭлементов)
				)
			, "Очистить данные табличной части?", 
			РежимДиалогаВопрос.ДаНет,
			120,
			КодВозвратаДиалога.Нет
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСтрокуВРедактореЗаписиНаКлиенте(ИмяЭлементаКоманды)
	
	#Область Предусловия
	
	ИмяСпискаЭлементов = ИмяСпискаПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если Не ЗначениеЗаполнено(ИмяСпискаЭлементов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыТаблицы = ПараметрыТаблицыПоИмениКоманды(ИмяЭлементаКоманды);
	
	Если ПараметрыТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы[ИмяСпискаЭлементов].ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	НомерЗаписи = ТекущиеДанные[ИмяСпискаЭлементов + Объект.Система_РазделительЧастейИмен + "НомерСтроки"];
	
	ПараметрыЗаписи = Новый Структура;
	ПараметрыЗаписи.Вставить("ТипТаблицы",  ПараметрыТаблицы.ТипТаблицы);
	ПараметрыЗаписи.Вставить("ИмяТаблицы",  ПараметрыТаблицы.ИмяТаблицы);
	ПараметрыЗаписи.Вставить("НомерЗаписи", НомерЗаписи);
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы, ПараметрыЗаписи", ОбъектБазы, ПараметрыЗаписи);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторЗаписи");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭлементыДереваЗначений(ДеревоЗначений, ИмяЭлементаФормы)
	
	ЭлементыДерева = ДеревоЗначений.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы[ИмяЭлементаФормы].Развернуть(ИдЭлемента, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЖурналРегистрацииПоОбъектуНаКлиенте()
	
	Элементы.СтраницыЖурналРегистрацииПоОбъекту.ТекущаяСтраница = Элементы.СтраницаИндикаторДлительныхОпераций;
	УстановитьСостояниеПоляТабличногоДокумента(Элементы.ПолеИндикаторДлительныхОпераций, "ФормированиеОтчета");
	
	//РезультатВыполнения = ПрочитатьЖурнал();
	//
	//ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	//ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
	
	ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаполнитьЖурналРегистрацииПоОбъектуНаКлиентеЗавершение", ЭтотОбъект);
	
	//ДлительныеОперацииКлиент.ОжидатьЗавершение(РезультатВыполнения, ОповещениеОЗавершении, ПараметрыОжидания);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСтрокиТабличнойЧастиОбъектаБазы(ИмяТабличнойЧасти, ВыделенныеСтроки)
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	
	ТаблЧасть = ДанныеОбъекта[ИмяТабличнойЧасти];
	
	Граница = ТаблЧасть.Количество() - 1;
	
	Для Индекс = 0 По Граница Цикл
		
		СтрокаТаблЧасти = ТаблЧасть[Граница - Индекс];
		
		Если Не ВыделенныеСтроки.Найти(СтрокаТаблЧасти.НомерСтроки) = Неопределено Тогда
			ТаблЧасть.Удалить(СтрокаТаблЧасти);
		КонецЕсли;
		
	КонецЦикла;
	
	ДанныеОбъекта.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	Если ЭтоДокумент Тогда
		Режим = УстановленныйРежимЗаписиДокумента();
		ДанныеОбъекта.Записать(Режим);
	Иначе
		ДанныеОбъекта.Записать();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьТабличнуюЧастьОбъектаБазы(ИмяТабличнойЧасти)
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	ДанныеОбъекта[ИмяТабличнойЧасти].Очистить();
	
	ДанныеОбъекта.ОбменДанными.Загрузка = ОбменДаннымиЗагрузка;
	
	Если ЭтоДокумент Тогда
		Режим = УстановленныйРежимЗаписиДокумента();
		ДанныеОбъекта.Записать(Режим);
	Иначе
		ДанныеОбъекта.Записать();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДвиженияПоРегиструОбъектаБазы(ИмяРегистра, ТипРегистра)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТипРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		НаборЗаписей = РегистрыНакопления[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		НаборЗаписей = РегистрыСведений[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		НаборЗаписей = РегистрыБухгалтерии[ИмяРегистра].СоздатьНаборЗаписей();
	ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
		НаборЗаписей = РегистрыРасчета[ИмяРегистра].СоздатьНаборЗаписей();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБазы);
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаСервере
Процедура ЗаблокироватьОбъектНаСервере(КоличествоСекунд)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	НачатьТранзакцию();
	
	Попытка
		
		БлокировкаДанных = Новый БлокировкаДанных;
		
		Пространство = ЭтаОбработка().ПредставлениеТипаОбъектаКонфигурации(ОбъектБазы);
		
		ЭлБлокировки = БлокировкаДанных.Добавить(Пространство);
		ЭлБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлБлокировки.УстановитьЗначение("Ссылка", ОбъектБазы.Ссылка);
		
		БлокировкаДанных.Заблокировать();
		
		ДатаОкончания = ТекущаяДата() + КоличествоСекунд;
		
		Пока ТекущаяДата() < ДатаОкончания Цикл
		КонецЦикла;
		
		ОтменитьТранзакцию();
		
	Исключение
		
		ОтменитьТранзакцию();
		
		Подробно = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		Сообщить(Подробно);
		
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРеквизиты()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Если Метаданные.Перечисления.Содержит(МетаданныеОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	дз_ВсеРеквизиты = РеквизитФормыВЗначение("ВсеРеквизиты");
	дз_ВсеРеквизиты.Строки.Очистить();
	
	// Системные реквизиты
	
	ПорядокСортировки = 0;
	
	Системные = дз_ВсеРеквизиты.Строки.Добавить();
	Системные.Имя               = "СистемныеРеквизиты";
	Системные.Представление     = Навигатор.ПодставитьПараметрыВСтроку("СистемныеРеквизиты (%1)", 2);
	Системные.ПорядокСортировки = ПорядокСортировки;
	Системные.Системный         = Истина;
	Системные.ТипСтроки         = "СистемныеРеквизиты";
	Системные.НомерКартинки     = Навигатор.НомерКартинки("СистемныеРеквизиты");
	Системные.ТолькоПросмотр    = Истина;
	
	НомерКартинки = Навигатор.НомерКартинки("СистемныеРеквизиты");
	
	// ... IdRef
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	Системный = Системные.Строки.Добавить();
	Системный.Имя               = "IdRef";
	Системный.Представление     = "IdRef";
	Системный.ПорядокСортировки = ПорядокСортировки;
	Системный.Системный         = Истина;
	Системный.ТипСтроки         = "СистемныйРеквизит";
	Системный.Тип               = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(36), , );
	Системный.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(Системный.Тип);
	Системный.Синоним           = "IdRef";
	Системный.Значение          = ОбъектБазы.Ссылка.УникальныйИдентификатор();
	Системный.НомерКартинки     = НомерКартинки;
	Системный.ТолькоПросмотр   = Истина;
	
	// ... НавигационнаяСсылка
	
	НавигационнаяСсылка = Навигатор.НавигационнаяСсылкаНаЭлемент(ОбъектБазы.Ссылка);
	
	Если ЗначениеЗаполнено(НавигационнаяСсылка) Тогда
		
		ПорядокСортировки = ПорядокСортировки + 1;
		
		Системный = Системные.Строки.Добавить();
		Системный.Имя               = "НавигационнаяСсылка";
		Системный.Представление     = "НавигационнаяСсылка";
		Системный.ПорядокСортировки = ПорядокСортировки;
		Системный.Системный         = Истина;
		Системный.ТипСтроки         = "СистемныйРеквизит";
		Системный.Тип               = Новый ОписаниеТипов("Строка", , , , Новый КвалификаторыСтроки(0), , );
		Системный.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(Системный.Тип);
		Системный.Синоним           = "Навигационная ссылка";
		Системный.Значение          = НавигационнаяСсылка;
		Системный.НомерКартинки     = НомерКартинки;
		Системный.ТолькоПросмотр   = Истина;
		
	КонецЕсли;
	
	// ... ВерсияДанных
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	Системный = Системные.Строки.Добавить();
	Системный.Имя               = "ВерсияДанных";
	Системный.Представление     = "ВерсияДанных";
	Системный.ПорядокСортировки = ПорядокСортировки;
	Системный.Системный         = Истина;
	Системный.ТипСтроки         = "СистемныйРеквизит";
	Системный.Тип               = Новый ОписаниеТипов("Строка");
	Системный.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(Системный.Тип);
	Системный.Синоним           = "Версия данных";
	Системный.Значение          = ОбъектБазы.Ссылка.ВерсияДанных;
	Системный.НомерКартинки     = НомерКартинки;
	Системный.ТолькоПросмотр   = Истина;
	
	// ... Представление
	
	ПорядокСортировки = ПорядокСортировки + 1;
	
	Системный = Системные.Строки.Добавить();
	Системный.Имя               = "Представление";
	Системный.Представление     = "Представление";
	Системный.ПорядокСортировки = ПорядокСортировки;
	Системный.Системный         = Истина;
	Системный.ТипСтроки         = "СистемныйРеквизит";
	Системный.Тип               = Новый ОписаниеТипов("Строка");
	Системный.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(Системный.Тип);
	Системный.Синоним           = "Представление";
	Системный.Значение          = Строка(ОбъектБазы);
	Системный.НомерКартинки     = НомерКартинки;
	Системный.ТолькоПросмотр   = Истина;
	
	Системные.Представление = Навигатор.ПодставитьПараметрыВСтроку(
		"СистемныеРеквизиты (%1)", Системные.Строки.Количество());
	
	// Общие реквизиты
	
	Если Метаданные.ОбщиеРеквизиты.Количество() > 0 Тогда
		
		Общие = Неопределено;
		НомерКартинки = Навигатор.НомерКартинки("ОбщиеРеквизиты");
		
		ПорядокСортировки = ПорядокСортировки + 1;
		
		Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
			
			Попытка
				
				ЗначениеАтрибута = ОбъектБазы[ОбщийРеквизит.Имя];
				
				Если Общие = Неопределено Тогда
					Общие = дз_ВсеРеквизиты.Строки.Добавить();
					Общие.Имя               = "ОбщиеРеквизиты";
					Общие.ПорядокСортировки = ПорядокСортировки;
					Общие.Стандартный       = Истина;
					Общие.НомерКартинки     = НомерКартинки;
					Общие.ТипСтроки         = "ОбщиеРеквизиты";
					Общие.ПорядокСортировки = ПорядокСортировки;
				КонецЕсли;
				
				Общий = Общие.Строки.Добавить();
				Общий.Имя               = ОбщийРеквизит.Имя;
				Общий.Представление     = ОбщийРеквизит.Имя;
				Общий.ПорядокСортировки = ПорядокСортировки;
				Общий.Общий             = Истина;
				Общий.ТипСтроки         = "ОбщийРеквизит";
				Общий.Тип               = Новый ОписаниеТипов("Строка");
				Общий.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(ОбщийРеквизит.Тип);
				Общий.Синоним           = ОбщийРеквизит.Синоним;
				Общий.Значение          = ЗначениеАтрибута;
				Общий.НомерКартинки     = НомерКартинки;
				Общий.ТолькоПросмотр    = Ложь;
				Общие.ПорядокСортировки = ПорядокСортировки;
				
			Исключение
				
			КонецПопытки;
		КонецЦикла;
		
		Если Не (Общие = Неопределено) Тогда
			Общие.Представление = Навигатор.ПодставитьПараметрыВСтроку("ОбщиеРеквизиты (%1)", Общие.Строки.Количество());
		КонецЕсли;
		
	КонецЕсли;
	
	// Стандартные реквизиты
	
	Если МетаданныеОбъекта.СтандартныеРеквизиты.Количество() > 0 Тогда
		
		ПорядокСортировки = ПорядокСортировки + 1;
		
		Стандартные = дз_ВсеРеквизиты.Строки.Добавить();
		Стандартные.Имя               = "СтандартныеРеквизиты";
		Стандартные.Представление     = Навигатор.ПодставитьПараметрыВСтроку("СтандартныеРеквизиты (%1)", МетаданныеОбъекта.СтандартныеРеквизиты.Количество());
		Стандартные.ПорядокСортировки = ПорядокСортировки;
		Стандартные.Стандартный       = Истина;
		Стандартные.НомерКартинки     = 44;
		Стандартные.ТипСтроки         = "СтандартныеРеквизиты";
		
		Для каждого СтандартныйРеквизит Из МетаданныеОбъекта.СтандартныеРеквизиты Цикл
			
			ПорядокСортировки = ПорядокСортировки + 1;
			
			Стандартный = Стандартные.Строки.Добавить();
			Стандартный.Имя               = СтандартныйРеквизит.Имя;
			Стандартный.Представление     = СтандартныйРеквизит.Имя;
			Стандартный.Тип               = СтандартныйРеквизит.Тип;
			Стандартный.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(СтандартныйРеквизит.Тип);
			Стандартный.Синоним           = СтандартныйРеквизит.Синоним;
			Стандартный.Значение          = ОбъектБазы[СтандартныйРеквизит.Имя];
			Стандартный.ПорядокСортировки = ПорядокСортировки;
			Стандартный.Стандартный       = Истина;
			Стандартный.НомерКартинки     = 44;
			Стандартный.ТипСтроки         = "СтандартныйРеквизит";
			
			Если СтандартныйРеквизит.Имя = "Ссылка" Тогда
				Стандартный.ТолькоПросмотр = Истина;
			КонецЕсли;
			
		КонецЦикла;
		
		Стандартные.Строки.Сортировать("Имя");
		
	КонецЕсли;
	
	// Реквизиты
	
	Если МетаданныеОбъекта.Реквизиты.Количество() > 0 Тогда
		
		Основные = дз_ВсеРеквизиты.Строки.Добавить();
		Основные.Имя               = "Реквизиты";
		Основные.Представление     = Навигатор.ПодставитьПараметрыВСтроку("Реквизиты (%1)", МетаданныеОбъекта.Реквизиты.Количество());
		Основные.ПорядокСортировки = ПорядокСортировки;
		Основные.Стандартный       = Истина;
		Основные.НомерКартинки     = 45;
		Основные.ТипСтроки         = "Реквизиты";
		
		Для каждого Реквизит Из МетаданныеОбъекта.Реквизиты Цикл
			
			Основной = Основные.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(Основной, Реквизит);
			
			Основной.Представление       = Реквизит.Имя;
			Основной.ПредставлениеТипа   = Навигатор.СтрокаОписанияТипов(Реквизит.Тип);
			Основной.Значение            = ОбъектБазы[Реквизит.Имя];
			Основной.ПорядокСортировки   = МетаданныеОбъекта.Реквизиты.Количество();
			Основной.НомерКартинки       = 45;
			Основной.ВыводитьЗачеркнутым = Врег(Лев(Реквизит.Имя, СтрДлина("Удалить"))) = Врег("Удалить");
			
		КонецЦикла;
		
		Основные.Строки.Сортировать("Имя");
		
	КонецЕсли;
	
	дз_ВсеРеквизиты.Строки.Сортировать("ПорядокСортировки, Имя");
	
	ЗначениеВРеквизитФормы(дз_ВсеРеквизиты, "ВсеРеквизиты");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеТабличныеЧасти()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	дз_ВсеТабличныеЧасти = РеквизитФормыВЗначение("ВсеТабличныеЧасти");
	дз_ВсеТабличныеЧасти.Строки.Очистить();
	
	ЕстьТабличныеЧасти = Ложь;
	ОбъектМд = ОбъектБазы.Метаданные();
	
	Попытка
		ТЧ = ОбъектМд.ТабличныеЧасти;
		ЕстьТабличныеЧасти = Истина;
	Исключение
	КонецПопытки;
	
	Если (ЕстьТабличныеЧасти) Тогда
		
		Для каждого ТаблЧастьМд Из ОбъектМд.ТабличныеЧасти Цикл
			
			КоличествоСтрокТаблЧасти = ОбъектБазы[ТаблЧастьМд.Имя].Количество();
			
			Если Не (ВсеТабличныеЧастиРежимОтображения = "Все") Тогда
				
				Если ВсеТабличныеЧастиРежимОтображения = "ЕстьЗаписи" И КоличествоСтрокТаблЧасти = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВсеТабличныеЧастиРежимОтображения = "НетЗаписей" И КоличествоСтрокТаблЧасти > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			стр_ТабличнаяЧасть = дз_ВсеТабличныеЧасти.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(стр_ТабличнаяЧасть, ТаблЧастьМд);
			
			стр_ТабличнаяЧасть.КоличествоСтрок = КоличествоСтрокТаблЧасти;
			стр_ТабличнаяЧасть.НомерКартинки   = 46;
			стр_ТабличнаяЧасть.ТипСтроки       = "ТабличнаяЧасть";
			
			ПредставлениеТаблЧасти = 
				?(КоличествоСтрокТаблЧасти > 0, 
					Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", ТаблЧастьМд.Имя, КоличествоСтрокТаблЧасти), 
					ТаблЧастьМд.Имя
				);
			
			стр_ТабличнаяЧасть.Представление = ПредставлениеТаблЧасти;
			
			Если ВРег(Лев(ТаблЧастьМд.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_ТабличнаяЧасть.ВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			//
			
			Для каждого РеквизитТЧ Из ТаблЧастьМд.Реквизиты Цикл
				
				стр_Реквизит = стр_ТабличнаяЧасть.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр_Реквизит, РеквизитТЧ);
				
				стр_Реквизит.Представление     = РеквизитТЧ.Имя;
				стр_Реквизит.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(РеквизитТЧ.Тип);
				стр_Реквизит.НомерКартинки     = 45;
				стр_Реквизит.ТипСтроки         = "Реквизит";
				
				Если ВРег(Лев(РеквизитТЧ.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
					стр_Реквизит.ВыводитьЗачеркнутым = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
		дз_ВсеТабличныеЧасти.Строки.Сортировать("Имя");
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(дз_ВсеТабличныеЧасти, "ВсеТабличныеЧасти");
	
	Элементы.СтраницаТабличныеЧасти.Видимость = ЕстьТабличныеЧасти;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИзмененияНаУзлахОбмена()
	
	Навигатор = ЭтаОбработка();
	
	дз_ДеревоУзловОбмена = РеквизитФормыВЗначение("ДеревоУзловОбмена");
	
	Навигатор.ЗаполнитьИзмененияНаУзлахОбмена(ОбъектБазы, дз_ДеревоУзловОбмена);
	
	ЗначениеВРеквизитФормы(дз_ДеревоУзловОбмена, "ДеревоУзловОбмена");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСвязанныеОбъекты()
	
	#Область Предусловия
	
	Если Не ЭтоСправочник Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	ИменаПодчиненныхОбъектов = Навигатор.ИменаПодчиненныхОбъектов(ОбъектБазыМД.ПолноеИмя());
	
	Если ИменаПодчиненныхОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого ИмяПодчиненногоОбъекта Из ИменаПодчиненныхОбъектов Цикл
		ОтобразитьДанныеСвязанногоСправочника(ИмяПодчиненногоОбъекта);
	КонецЦикла;
	
	Элементы.СтраницаСвязанныеОбъекты.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеДвижения()
	
	ЗаполнитьВсеРегистрыНакопления();
	ЗаполнитьВсеРегистрыСведений();
	ЗаполнитьВсеРегистрыБухгалтерии();
	ЗаполнитьВсеРегистрыРасчета();
	
	Элементы.СтраницаДвижения.Видимость = ЭтоДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРегистрыНакопления()
	
	Навигатор = ЭтаОбработка();
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	дз_ВсеРегистрыНакопления = РеквизитФормыВЗначение("ВсеРегистрыНакопления");
	дз_ВсеРегистрыНакопления.Строки.Очистить();
	
	ПереченьКоллекций = Новый Массив;
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "СтандартныеРеквизиты", "СтандартныйРеквизит", 44));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Измерения",            "Измерение",           47));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Ресурсы",              "Ресурс",              48));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Реквизиты",            "Реквизит",            45));
	
	Если ЭтоДокумент Тогда
		
		Для каждого РегистрМД Из ОбъектБазыМД.Движения Цикл
			
			Если Не Метаданные.РегистрыНакопления.Содержит(РегистрМД) Тогда
				Продолжить;
			КонецЕсли;
			
			КолЗаписей = КоличествоЗаписейПоРегистру(РегистрМД);
			
			Если Не (ВсеРегистрыНакопленияРежимОтображения = "Все") Тогда
				
				Если ВсеРегистрыНакопленияРежимОтображения = "ЕстьЗаписи" И КолЗаписей = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВсеРегистрыНакопленияРежимОтображения = "НетЗаписей" И КолЗаписей > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			стр_Регистр = дз_ВсеРегистрыНакопления.Строки.Добавить();
			стр_Регистр.Имя               = РегистрМД.Имя;
			стр_Регистр.Синоним           = РегистрМД.Синоним;
			стр_Регистр.ВидРегистра       = РегистрМД.ВидРегистра;
			стр_Регистр.ТипСтроки         = "РегистрНакопления";
			стр_Регистр.НомерКартинки     = 14;
			стр_Регистр.КоличествоЗаписей = КолЗаписей;
			
			ПредставлениеРегистра = 
				?(КолЗаписей > 0, 
				Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", РегистрМД.Имя, КолЗаписей), 
				РегистрМД.Имя
			);
			
			стр_Регистр.Представление = ПредставлениеРегистра;
			
			Если ВРег(Лев(РегистрМД.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_Регистр.ВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			//
			
			Для каждого ОписаниеКоллекции Из ПереченьКоллекций Цикл
				
				стр_Кл = стр_Регистр.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр_Кл, ОписаниеКоллекции);
				
				стр_Кл.Представление = Навигатор.ПодставитьПараметрыВСтроку(
					"%1 (%2)", ОписаниеКоллекции.Имя, РегистрМД[ОписаниеКоллекции.Имя].Количество());
				
				Для каждого ЭлКоллекции Из РегистрМД[ОписаниеКоллекции.Имя] Цикл
					
					стр_ЭлКл = стр_Кл.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ОписаниеКоллекции);
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ЭлКоллекции);
					
					стр_ЭлКл.Представление     = ЭлКоллекции.Имя;
					стр_ЭлКл.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(ЭлКоллекции.Тип);
					
					Если ВРег(Лев(ЭлКоллекции.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
						стр_ЭлКл.ВыводитьЗачеркнутым = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	дз_ВсеРегистрыНакопления.Строки.Сортировать("Имя");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыНакопления, "ВсеРегистрыНакопления");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРегистрыСведений()
	
	Навигатор = ЭтаОбработка();
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	дз_ВсеРегистрыСведений = РеквизитФормыВЗначение("ВсеРегистрыСведений");
	дз_ВсеРегистрыСведений.Строки.Очистить();
	
	ПереченьКоллекций = Новый Массив;
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "СтандартныеРеквизиты", "СтандартныйРеквизит", 44));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Измерения",            "Измерение",           47));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Ресурсы",              "Ресурс",              48));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Реквизиты",            "Реквизит",            45));
	
	Если ЭтоДокумент Тогда
		
		Для каждого РегистрМД Из ОбъектБазыМД.Движения Цикл
			
			Если Не Метаданные.РегистрыСведений.Содержит(РегистрМД) Тогда
				Продолжить;
			КонецЕсли;
			
			КолЗаписей = КоличествоЗаписейПоРегистру(РегистрМД);
			
			Если Не (ВсеРегистрыСведенийРежимОтображения = "Все") Тогда
				
				Если ВсеРегистрыСведенийРежимОтображения = "ЕстьЗаписи" И КолЗаписей = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВсеРегистрыСведенийРежимОтображения = "НетЗаписей" И КолЗаписей > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			стр_Регистр = дз_ВсеРегистрыСведений.Строки.Добавить();
			стр_Регистр.Имя               = РегистрМД.Имя;
			стр_Регистр.Синоним           = РегистрМД.Синоним;
			стр_Регистр.ТипСтроки         = "РегистрСведений";
			стр_Регистр.НомерКартинки     = 13;
			стр_Регистр.КоличествоЗаписей = КолЗаписей;
			
			ПредставлениеРегистра = 
				?(КолЗаписей > 0, 
				Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", РегистрМД.Имя, КолЗаписей), 
				РегистрМД.Имя
			);
			
			стр_Регистр.Представление = ПредставлениеРегистра;
			
			Если ВРег(Лев(РегистрМД.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_Регистр.ВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			//
			
			Для каждого ОписаниеКоллекции Из ПереченьКоллекций Цикл
				
				стр_Кл = стр_Регистр.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр_Кл, ОписаниеКоллекции);
				
				стр_Кл.Представление = Навигатор.ПодставитьПараметрыВСтроку(
					"%1 (%2)", ОписаниеКоллекции.Имя, РегистрМД[ОписаниеКоллекции.Имя].Количество());
				
				Для каждого ЭлКоллекции Из РегистрМД[ОписаниеКоллекции.Имя] Цикл
					
					стр_ЭлКл = стр_Кл.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ОписаниеКоллекции);
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ЭлКоллекции);
					
					стр_ЭлКл.Представление     = ЭлКоллекции.Имя;
					стр_ЭлКл.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(ЭлКоллекции.Тип);
					
					Если ВРег(Лев(ЭлКоллекции.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
						стр_ЭлКл.ВыводитьЗачеркнутым = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	дз_ВсеРегистрыСведений.Строки.Сортировать("Имя");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыСведений, "ВсеРегистрыСведений");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРегистрыБухгалтерии()
	
	Навигатор = ЭтаОбработка();
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	дз_ВсеРегистрыБухгалтерии = РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии");
	дз_ВсеРегистрыБухгалтерии.Строки.Очистить();
	
	ПереченьКоллекций = Новый Массив;
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "СтандартныеРеквизиты", "СтандартныйРеквизит", 44));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Измерения",            "Измерение",           47));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Ресурсы",              "Ресурс",              48));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Реквизиты",            "Реквизит",            45));
	
	Если ЭтоДокумент Тогда
		
		Для каждого РегистрМД Из ОбъектБазыМД.Движения Цикл
			
			Если Не Метаданные.РегистрыБухгалтерии.Содержит(РегистрМД) Тогда
				Продолжить;
			КонецЕсли;
			
			КолЗаписей = КоличествоЗаписейПоРегистру(РегистрМД);
			
			Если Не (ВсеРегистрыБухгалтерииРежимОтображения = "Все") Тогда
				
				Если ВсеРегистрыБухгалтерииРежимОтображения = "ЕстьЗаписи" И КолЗаписей = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВсеРегистрыБухгалтерииРежимОтображения = "НетЗаписей" И КолЗаписей > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			стр_Регистр = дз_ВсеРегистрыБухгалтерии.Строки.Добавить();
			стр_Регистр.Имя               = РегистрМД.Имя;
			стр_Регистр.Синоним           = РегистрМД.Синоним;
			стр_Регистр.ТипСтроки         = "РегистрБухгалтерии";
			стр_Регистр.НомерКартинки     = 15;
			стр_Регистр.КоличествоЗаписей = КолЗаписей;
			
			ПредставлениеРегистра = 
				?(КолЗаписей > 0, 
				Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", РегистрМД.Имя, КолЗаписей), 
				РегистрМД.Имя
			);
			
			стр_Регистр.Представление = ПредставлениеРегистра;
			
			Если ВРег(Лев(РегистрМД.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_Регистр.ВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			//
			
			Для каждого ОписаниеКоллекции Из ПереченьКоллекций Цикл
				
				стр_Кл = стр_Регистр.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр_Кл, ОписаниеКоллекции);
				
				стр_Кл.Представление = Навигатор.ПодставитьПараметрыВСтроку(
				"%1 (%2)", ОписаниеКоллекции.Имя, РегистрМД[ОписаниеКоллекции.Имя].Количество());
				
				Для каждого ЭлКоллекции Из РегистрМД[ОписаниеКоллекции.Имя] Цикл
					
					стр_ЭлКл = стр_Кл.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ОписаниеКоллекции);
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ЭлКоллекции);
					
					стр_ЭлКл.Представление     = ЭлКоллекции.Имя;
					стр_ЭлКл.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(ЭлКоллекции.Тип);
					
					Если ВРег(Лев(ЭлКоллекции.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
						стр_ЭлКл.ВыводитьЗачеркнутым = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	дз_ВсеРегистрыБухгалтерии.Строки.Сортировать("Имя");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыБухгалтерии, "ВсеРегистрыБухгалтерии");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсеРегистрыРасчета()
	
	Навигатор = ЭтаОбработка();
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	дз_ВсеРегистрыРасчета = РеквизитФормыВЗначение("ВсеРегистрыРасчета");
	дз_ВсеРегистрыРасчета.Строки.Очистить();
	
	ПереченьКоллекций = Новый Массив;
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "СтандартныеРеквизиты", "СтандартныйРеквизит", 44));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Измерения",            "Измерение",           47));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Ресурсы",              "Ресурс",              48));
	ПереченьКоллекций.Добавить(Новый Структура("Имя, ТипСтроки, НомерКартинки", "Реквизиты",            "Реквизит",            45));
	
	Если ЭтоДокумент Тогда
		
		Для каждого РегистрМД Из ОбъектБазыМД.Движения Цикл
			
			Если Не Метаданные.РегистрыРасчета.Содержит(РегистрМД) Тогда
				Продолжить;
			КонецЕсли;
			
			КолЗаписей = КоличествоЗаписейПоРегистру(РегистрМД);
			
			Если Не (ВсеРегистрыРасчетаРежимОтображения = "Все") Тогда
				
				Если ВсеРегистрыРасчетаРежимОтображения = "ЕстьЗаписи" И КолЗаписей = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВсеРегистрыРасчетаРежимОтображения = "НетЗаписей" И КолЗаписей > 0 Тогда
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
			
			стр_Регистр = дз_ВсеРегистрыРасчета.Строки.Добавить();
			стр_Регистр.Имя               = РегистрМД.Имя;
			стр_Регистр.Синоним           = РегистрМД.Синоним;
			стр_Регистр.ТипСтроки         = "РегистрРасчета";
			стр_Регистр.НомерКартинки     = 16;
			стр_Регистр.КоличествоЗаписей = КолЗаписей;
			
			ПредставлениеРегистра = 
				?(КолЗаписей > 0, 
				Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", РегистрМД.Имя, КолЗаписей), 
				РегистрМД.Имя
			);
			
			стр_Регистр.Представление = ПредставлениеРегистра;
			
			Если ВРег(Лев(РегистрМД.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
				стр_Регистр.ВыводитьЗачеркнутым = Истина;
			КонецЕсли;
			
			//
			
			Для каждого ОписаниеКоллекции Из ПереченьКоллекций Цикл
				
				стр_Кл = стр_Регистр.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(стр_Кл, ОписаниеКоллекции);
				
				стр_Кл.Представление = Навигатор.ПодставитьПараметрыВСтроку(
				"%1 (%2)", ОписаниеКоллекции.Имя, РегистрМД[ОписаниеКоллекции.Имя].Количество());
				
				Для каждого ЭлКоллекции Из РегистрМД[ОписаниеКоллекции.Имя] Цикл
					
					стр_ЭлКл = стр_Кл.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ОписаниеКоллекции);
					ЗаполнитьЗначенияСвойств(стр_ЭлКл, ЭлКоллекции);
					
					стр_ЭлКл.Представление     = ЭлКоллекции.Имя;
					стр_ЭлКл.ПредставлениеТипа = Навигатор.СтрокаОписанияТипов(ЭлКоллекции.Тип);
					
					Если ВРег(Лев(ЭлКоллекции.Имя, СтрДлина("Удалить"))) = ВРег("Удалить") Тогда
						стр_ЭлКл.ВыводитьЗачеркнутым = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	дз_ВсеРегистрыРасчета.Строки.Сортировать("Имя");
	ЗначениеВРеквизитФормы(дз_ВсеРегистрыРасчета, "ВсеРегистрыРасчета");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыРеквизиты()
	
	ЗаголовокСтраницы = ЭтаОбработка().ПодставитьПараметрыВСтроку("Реквизиты (%1)", РеквизитФормыВЗначение("ВсеРеквизиты").Строки.Количество());
	Элементы.СтраницаРеквизиты.Заголовок = ЗаголовокСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыТабличныеЧасти()
	
	Навигатор = ЭтаОбработка();
	
	ЗаголовокСтраницы = Навигатор.ПодставитьПараметрыВСтроку("Табличные части (%1)", РеквизитФормыВЗначение("ВсеТабличныеЧасти").Строки.Количество());
	Элементы.СтраницаТабличныеЧасти.Заголовок = ЗаголовокСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыДвижения()
	
	Навигатор = ЭтаОбработка();
	
	КоличествоРН = РеквизитФормыВЗначение("ВсеРегистрыНакопления").Строки.Количество();
	ЗаголовокСтраницы = Навигатор.ПодставитьПараметрыВСтроку("Регистры накопления (%1)", КоличествоРН);
	Элементы.СтраницаРегистрыНакопления.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРС = РеквизитФормыВЗначение("ВсеРегистрыСведений").Строки.Количество();
	ЗаголовокСтраницы = Навигатор.ПодставитьПараметрыВСтроку("Регистры сведений (%1)", КоличествоРС);
	Элементы.СтраницаРегистрыСведений.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРБ = РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии").Строки.Количество();
	ЗаголовокСтраницы = Навигатор.ПодставитьПараметрыВСтроку("Регистры бухгалтерии (%1)", КоличествоРБ);
	Элементы.СтраницаРегистрыБухгалтерии.Заголовок = ЗаголовокСтраницы;
	
	КоличествоРР = РеквизитФормыВЗначение("ВсеРегистрыРасчета").Строки.Количество();
	ЗаголовокСтраницы = Навигатор.ПодставитьПараметрыВСтроку("Регистры расчета (%1)", КоличествоРР);
	Элементы.СтраницаРегистрыРасчета.Заголовок = ЗаголовокСтраницы;
	
	// Движения
	
	КоличествоРегистровВсего = 0;
	КоличествоРегистровВсего = КоличествоРН + КоличествоРС + КоличествоРБ + КоличествоРР;
	
	Если КоличествоРегистровВсего > 0 Тогда
		ЗаголовокСтраницыДвижения = Навигатор.ПодставитьПараметрыВСтроку("Движения (%1)", КоличествоРегистровВсего);
	Иначе
		ЗаголовокСтраницыДвижения = "Движения";
	КонецЕсли; 
	
	Элементы.СтраницаДвижения.Заголовок = ЗаголовокСтраницыДвижения;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыТабличныеЧасти()
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Попытка
		ТабличныеЧастиОбъекта = МетаданныеОбъекта.ТабличныеЧасти;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	ВидимостьСтраницы = Не (РеквизитФормыВЗначение("ВсеТабличныеЧасти").Строки.Количество() = 0);
	
	Элементы.СтраницаТабличныеЧасти.Видимость = ВидимостьСтраницы;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыСвязанныеОбъекты()
	
	//
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗаголовокСтраницыИзмененияНаУзлахПлановОбмена()
	
	КолЭлементов = ДеревоУзловОбмена.ПолучитьЭлементы().Количество();
	
	Элементы.СтраницаИзмененияНаУзлахПлановОбмена.Заголовок = ?(КолЭлементов > 0, ЭтаОбработка().ПодставитьПараметрыВСтроку("Планы обмена (%1)", КолЭлементов), "Планы обмена");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыИзмененияНаУзлахПлановОбмена()
	
	ДеревоУзловОбменаЭлементы = ДеревоУзловОбмена.ПолучитьЭлементы();
	
	ФлВидимость = (ДеревоУзловОбменаЭлементы.Количество() > 0);
	
	Элементы.СтраницаИзмененияНаУзлахПлановОбмена.Видимость = ФлВидимость;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыДвижения()
	
	ОбъектБазыМД = ОбъектБазы.Метаданные();
	
	Попытка
		ЕстьДвижения = ОбъектБазыМД.Движения;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	Элементы.СтраницаДвижения.Видимость = ВидимостьСтраницы;
	
	Если Не Элементы.СтраницаДвижения.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СтраницаРегистрыНакопления.Видимость  = Не (РеквизитФормыВЗначение("ВсеРегистрыНакопления").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыСведений.Видимость    = Не (РеквизитФормыВЗначение("ВсеРегистрыСведений").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыБухгалтерии.Видимость = Не (РеквизитФормыВЗначение("ВсеРегистрыБухгалтерии").Строки.Количество() = 0);
	Элементы.СтраницаРегистрыРасчета.Видимость     = Не (РеквизитФормыВЗначение("ВсеРегистрыРасчета").Строки.Количество() = 0);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьСтраницыРеквизиты()
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	Попытка
		ЕстьРеквизиты = МетаданныеОбъекта.Реквизиты;
		ВидимостьСтраницы = Истина;
	Исключение
		ВидимостьСтраницы = Ложь;
	КонецПопытки;
	
	Элементы.СтраницаРеквизиты.Видимость = ВидимостьСтраницы;
	
КонецПроцедуры

// Отображает выбранную табличную часть элемента базы на форме.
//
// Параметры:
//	ИмяТабличнойЧасти - Строка - имя табличной части элемента базы, например: "Товары"
//
&НаСервере
Процедура ОтобразитьДанныеТабличнойЧасти(ИмяТабличнойЧасти)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТабличнойЧасти) Тогда
		Возврат;
	КонецЕсли;
	
	УжеОтображена = ТаблицаОбъектаУжеОтображена("ТабличнаяЧасть", ИмяТабличнойЧасти);
	
	Если УжеОтображена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	// Добавить реквизиты формы относящиеся к табличной части.
	
	// ... добавить реквизит - динамический список самой табличной части.
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	РеквизитДанныеТабличнойЧасти = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеТабличнойЧасти);
	
	// ... добавить колонки динамического списка данных табличной части.
	
	ТипХранилищеЗначения = Навигатор.ТипХранилищеЗначения();
	
	ОбъектМд = ОбъектБазы.Метаданные();
	
	Для Каждого РеквизитТЧ Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТЧ.Имя);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаКолонка, РеквизитТЧ.Тип));
		
	КонецЦикла;
	
	Для Каждого РеквизитТЧ Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		
		Если РеквизитТЧ.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТЧ.Имя);
		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаКолонка, РеквизитТЧ.Тип));
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных табличной части.
	
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации("ТабличнаяЧасть", ИмяТабличнойЧасти);
	ЭтаФорма[ИмяРеквизита].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных табличной части - отбор по ссылке на элемент.
	
	ЭтаФорма[ИмяРеквизита].Параметры.Элементы[0].Значение = ОбъектБазы;
	ЭтаФорма[ИмяРеквизита].Параметры.Элементы[0].Использование = Истина;
	
	// Добавить элементы формы, относящиеся к табличной части.
	
	// ... добавить страницу.
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти);
	СтраницаДанныеТабличнойЧасти = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыДанныеТабличныхЧастей);
	
	Попытка
		КартинкаТаблЧасть = БиблиотекаКартинок.ТабличнаяЧасть;
	Исключение
		КартинкаТаблЧасть = Новый Картинка;
	КонецПопытки;
	
	СтраницаДанныеТабличнойЧасти.Картинка = КартинкаТаблЧасть;
	
	КолЗаписейТаблЧасти = ОбъектБазы[ИмяТабличнойЧасти].Количество();
	
	Если КолЗаписейТаблЧасти > 0 Тогда
		СтраницаДанныеТабличнойЧасти.Заголовок = Навигатор.ПодставитьПараметрыВСтроку("%1 (%2)", ИмяТабличнойЧасти, КолЗаписейТаблЧасти);
	Иначе
		СтраницаДанныеТабличнойЧасти.Заголовок = Навигатор.ПодставитьПараметрыВСтроку("%1", ИмяТабличнойЧасти);
	КонецЕсли;
	
	// ... добавить ТЧ на страницу.
	
	ЭлементТаблица = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), СтраницаДанныеТабличнойЧасти);
	ЭлементТаблица.ПутьКДанным        = ИмяРеквизита;
	ЭлементТаблица.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементТаблица.Заголовок          = ИмяТабличнойЧасти;
	ЭлементТаблица.Видимость          = Истина;
	
	// ... добавить колонки табличной части.
	
	Для Каждого РеквизитТЧ Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТЧ.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяРеквизита, ИмяРеквизитаКолонка);
		
		ЭлементКолонка = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Видимость   = Истина;
		ЭлементКолонка.ПутьКДанным = ПутьКДаннымДляКолонки;
		ЭлементКолонка.Заголовок   = РеквизитТЧ.Имя;
		
		Если РеквизитТЧ.Имя = "НомерСтроки" Тогда
			ЭлементКолонка.Заголовок = "№";
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого РеквизитТЧ Из ОбъектМд.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты Цикл
		
		Если РеквизитТЧ.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("ТабличнаяЧасть", ИмяТабличнойЧасти, РеквизитТЧ.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяРеквизита, ИмяРеквизитаКолонка);
		
		ЭлементКолонка = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементТаблица);
		ЭлементКолонка.Видимость   = Истина;
		ЭлементКолонка.ПутьКДанным = ПутьКДаннымДляКолонки;
		ЭлементКолонка.Заголовок   = РеквизитТЧ.Имя;
		
	КонецЦикла;
	
	//
	
	ЭлементТаблица.УстановитьДействие("Выбор", "Подключаемый_ТабличнаяЧасть_Выбор");
	
	//
	
	ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ЭлементТаблица.Имя, "ОткрытьСтрокуВРедактореЗаписиНаКлиенте");
	ДобавитьКомандуЗакрытьСтраницуДанныхТаблицы();
	ДобавитьКомандуУдалитьСтрокуТабличнойЧасти(ЭлементТаблица.Имя, "УдалитьСтрокуТабличнойЧасти");
	ДобавитьКомандуОчиститьТабличнуюЧасть(ЭлементТаблица.Имя, "ОчиститьТабличнуюЧасть");
	
КонецПроцедуры

&НаСервере
Процедура АктивизироватьСтраницуТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	ИмяКоллекции = "";
	
	Если ТипТаблицы = "ТабличнаяЧасть" Тогда
		ИмяКоллекции = "СтраницыДанныеТабличныхЧастей";
	ИначеЕсли ТипТаблицы = "РегистрНакопления" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыНакопления";
	ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыСведений";
	ИначеЕсли ТипТаблицы = "РегистрБухгалтерии" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыБухгалтерии";
	ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
		ИмяКоллекции = "СтраницыДанныеРегистрыРасчета";
	КонецЕсли;
	
	Элементы[ИмяКоллекции].ТекущаяСтраница = Элементы[ИмяСтраницы];
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеДвиженийПоРегистру(ТипРегистра, ИмяРегистра)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяРегистра) Тогда
		Возврат;
	КонецЕсли;
	
	УжеОтображена = ТаблицаДвиженийОбъектаУжеОтображена(ТипРегистра, ИмяРегистра);
	
	Если УжеОтображена Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// TODO Отображение регистра бухгалтерии вынести в отдельную
	// процедуру, уж больно там много нюансов. Вообще возможно имеет смысл просто
	// разнести отображение по типам регистров. Но для начала - все таки регистр бухгалтерии.
	
	Если ТипРегистра = "РегистрБухгалтерии" Тогда
		ОтобразитьДанныеДвиженийПоРегиструБухгалтерии(ИмяРегистра);
		Возврат;
	КонецЕсли;
	
	Навигатор = ЭтаОбработка();
	
	// Добавить реквизиты формы.
	
	// ... добавить динамический список.
	
	ИмяДинамическогоСписка = ИмяРеквизитаФормыТаблицыОбъекта(ТипРегистра, ИмяРегистра);
	РеквизитДанныеРегистра = Новый РеквизитФормы(ИмяДинамическогоСписка, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеРегистра);
	
	// ... добавить колонки динамического списка регистра.
	
	ТипХранилищеЗначения = Навигатор.ТипХранилищеЗначения();
	
	ИмяКоллекции = "";
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		ИмяКоллекции = "РегистрыНакопления";
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		ИмяКоллекции = "РегистрыСведений";
	ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
		ИмяКоллекции = "РегистрыРасчета";
	КонецЕсли;
	
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, СтандартныйРеквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, СтандартныйРеквизит.Тип, "");
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Измерение Из Метаданные[ИмяКоллекции][ИмяРегистра].Измерения Цикл
		
		Если Измерение.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Измерение.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Измерение.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].Реквизиты Цикл
		
		Если Реквизит.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Реквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Реквизит.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные[ИмяКоллекции][ИмяРегистра].Ресурсы Цикл
		
		Если Ресурс.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Ресурс.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Ресурс.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных регистра.
	
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипРегистра, ИмяРегистра);
	ЭтаФорма[ИмяДинамическогоСписка].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных регистра - отбор по ссылке на элемент.
	
	ИндексПараметраОтбораПоСсылке = 0;
	Если (ТипРегистра = "РегистрБухгалтерии") Тогда
		ИндексПараметраОтбораПоСсылке = 3;
	КонецЕсли;
	
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Значение = ОбъектБазы;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Использование = Истина;
	
	// Добавить элементы формы, относящиеся к регистру.
	
	// ... добавить страницу.
	
	ИмяКоллекцииСтраниц = "";
	
	Если ТипРегистра = "РегистрНакопления" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыНакопления";
	ИначеЕсли ТипРегистра = "РегистрСведений" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыСведений";
	ИначеЕсли ТипРегистра = "РегистрБухгалтерии" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыБухгалтерии";
	ИначеЕсли ТипРегистра = "РегистрРасчета" Тогда
		ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыРасчета";
	КонецЕсли;
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипРегистра, ИмяРегистра);
	СтраницаДанныеРегистра = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы[ИмяКоллекцииСтраниц]);
	СтраницаДанныеРегистра.Заголовок = ИмяРегистра;
	СтраницаДанныеРегистра.Картинка = БиблиотекаКартинок[ТипРегистра];
	
	// ... добавить таблицу с данными на страницу.
	
	ЭлементДвиженияПоРегиструСписок = Элементы.Добавить(ИмяДинамическогоСписка, Тип("ТаблицаФормы"), СтраницаДанныеРегистра);
	ЭлементДвиженияПоРегиструСписок.ПутьКДанным        = ИмяДинамическогоСписка;
	ЭлементДвиженияПоРегиструСписок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементДвиженияПоРегиструСписок.Заголовок          = ИмяРегистра;
	ЭлементДвиженияПоРегиструСписок.Видимость          = Истина;
	
	// ... добавить колонки.
	
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].СтандартныеРеквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, СтандартныйРеквизит.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементДвиженияПоРегиструСписок);
		Элемент.Видимость   = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок   = СтандартныйРеквизит.Имя;
		
		// Установить параметры отображения поля.
		
		Если СтандартныйРеквизит.Имя = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		ИначеЕсли СтандартныйРеквизит.Имя = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Измерение Из Метаданные[ИмяКоллекции][ИмяРегистра].Измерения Цикл
		
		Если Измерение.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Измерение.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементДвиженияПоРегиструСписок);
		Элемент.Видимость   = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок   = Измерение.Имя;
		
		Если Измерение.Имя = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		КонецЕсли;
		
		Если Измерение.Имя = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из Метаданные[ИмяКоллекции][ИмяРегистра].Реквизиты Цикл
		
		Если Реквизит.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Реквизит.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементДвиженияПоРегиструСписок);
		Элемент.Видимость   = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок   = Реквизит.Имя;
		
	КонецЦикла;
	
	Для Каждого Ресурс Из Метаданные[ИмяКоллекции][ИмяРегистра].Ресурсы Цикл
		
		Если Ресурс.Тип = ТипХранилищеЗначения Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистра, Ресурс.Имя);
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементДвиженияПоРегиструСписок);
		Элемент.Видимость   = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок   = Ресурс.Имя;
		
	КонецЦикла;
	
	ЭлементДвиженияПоРегиструСписок.УстановитьДействие("Выбор", "Подключаемый_Регистр_Выбор");
	
	ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ЭлементДвиженияПоРегиструСписок.Имя, "ОткрытьСтрокуВРедактореЗаписиНаКлиенте");
	ДобавитьКомандуОчиститьДвиженияПоРегистру(ЭлементДвиженияПоРегиструСписок.Имя, "ОчиститьДвиженияПоРегистру");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеДвиженийПоРегиструБухгалтерии(ИмяРегистраБухгалтерии)
	
	ТипРегистра = "РегистрБухгалтерии";
	ИмяКоллекцииРегистров = "РегистрыБухгалтерии";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии) Тогда
		Возврат;
	КонецЕсли;
	
	// Проверка: таблица уже отображена.
	УжеОтображена = ТаблицаДвиженийОбъектаУжеОтображена(ТипРегистра, ИмяРегистраБухгалтерии);
	
	Если УжеОтображена Тогда
		ОбновитьСвязаннуюТаблицуДанныхОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	// Добавить реквизиты формы.
	//==========================
	
	// Динамический список.
	ИмяДинамическогоСписка = ИмяРеквизитаФормыТаблицыОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
	РеквизитДанныеРегистра = Новый РеквизитФормы(ИмяДинамическогоСписка, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитДанныеРегистра);
	
	ПоляДтКтРегистра = Навигатор.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	// Добавить реквизиты динамического списка.
	//=========================================
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].СтандартныеРеквизиты Цикл
		
		Если ЭтоПолеСубконто(СтандартныйРеквизит.Имя)
			Или ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "СтандартныеРеквизиты", СтандартныйРеквизит.Имя, СтандартныйРеквизит.Тип);
		
	КонецЦикла;
	
	// Субконто.
	ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, , , Неопределено, "СубконтоДтКт", ПоляДтКтРегистра.МаксКоличествоСубконто);
	
	// Счета
	Для Каждого ПараметрыСчета Из ПоляДтКтРегистра.Счета Цикл
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, , ПараметрыСчета.ИмяРеквизитаСчета, ПараметрыСчета.ТипСчета);		
	КонецЦикла;
	
	// Измерения.
	Для Каждого Измерение Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Измерения Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "Измерения", Измерение.Имя, Измерение.Тип, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты.
	Для Каждого Реквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Реквизиты Цикл
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипРегистра, ИмяРегистраБухгалтерии, Реквизит.Имя);
		РеквизитКолонка = Новый РеквизитФормы(ИмяРеквизитаКолонка, Реквизит.Тип, "");
		
		ДобавляемыеРеквизиты.Добавить(РеквизитКолонка);
		
	КонецЦикла;
	
	// Ресурсы.
	Для Каждого Ресурс Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты, ИмяРегистраБухгалтерии, "Ресурсы", Ресурс.Имя, Ресурс.Тип, ТипОбработки);
		
	КонецЦикла;
	
	// ... изменить состав реквизитов формы.
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// ... установить текст запроса для отображения данных регистра.
	ТекстЗапроса = ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипРегистра, ИмяРегистраБухгалтерии);
	ЭтаФорма[ИмяДинамическогоСписка].ТекстЗапроса = ТекстЗапроса;
	
	// ... установить параметр динамического списка данных регистра - отбор по ссылке на элемент.
	ИндексПараметраОтбораПоСсылке = 3;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Значение = ОбъектБазы;
	ЭтаФорма[ИмяДинамическогоСписка].Параметры.Элементы[ИндексПараметраОтбораПоСсылке].Использование = Истина;
	
	// Добавить элементы формы.
	//=========================
	
	// ... добавить страницу.
	ИмяКоллекцииСтраниц = "СтраницыДанныеРегистрыБухгалтерии";
	
	ИмяСтраницы = ИмяСтраницыТаблицыОбъекта(ТипРегистра, ИмяРегистраБухгалтерии);
	СтраницаДанныеРегистра = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы[ИмяКоллекцииСтраниц]);
	СтраницаДанныеРегистра.Заголовок = ИмяРегистраБухгалтерии;
	СтраницаДанныеРегистра.Картинка = БиблиотекаКартинок[ТипРегистра];
	
	// ... добавить таблицу с данными на страницу.
	ЭлементРегистрБухгалтерииСписок = Элементы.Добавить(ИмяДинамическогоСписка, Тип("ТаблицаФормы"), СтраницаДанныеРегистра);
	ЭлементРегистрБухгалтерииСписок.ПутьКДанным = ИмяДинамическогоСписка;
	ЭлементРегистрБухгалтерииСписок.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
	ЭлементРегистрБухгалтерииСписок.Заголовок = ИмяРегистраБухгалтерии;
	ЭлементРегистрБухгалтерииСписок.Видимость = Истина;
	
	// Добавить элементы-колонки динамического списка.
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].СтандартныеРеквизиты Цикл
		
		Если (ЭтоПолеСубконто(СтандартныйРеквизит.Имя))
			Или (ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя)) Тогда
			
			Продолжить;
			
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, СтандартныйРеквизит.Имя, ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок);
		
	КонецЦикла;
	
	// Измерения
	Для Каждого Измерение Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Измерения Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Измерение.Имя, ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок, ТипОбработки);
		
	КонецЦикла;
	
	// Субконто.
	ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, , ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок, "СубконтоДтКт", ПоляДтКтРегистра.МаксКоличествоСубконто);
	
	// Счета
	Для Каждого ПараметрыСчета Из ПоляДтКтРегистра.Счета Цикл
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, ПараметрыСчета.ИмяРеквизитаСчета, ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок);
	КонецЦикла;
	
	// Ресурсы
	Для Каждого Ресурс Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (ПоляДтКтРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Ресурс.Имя, ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты
	Для Каждого Реквизит Из Метаданные[ИмяКоллекцииРегистров][ИмяРегистраБухгалтерии].Реквизиты Цикл
		
		ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии, Реквизит.Имя, ИмяДинамическогоСписка, ЭлементРегистрБухгалтерииСписок);
		
	КонецЦикла;
	
	УстановитьПараметрыОтображенияВидовСубконтоСпискаРегистраБухгалтерии(ЭлементРегистрБухгалтерииСписок, ИмяРегистраБухгалтерии);
	
	// Установить действие списка.
	
	ЭлементРегистрБухгалтерииСписок.УстановитьДействие("Выбор", "Подключаемый_Регистр_Выбор");
	
	// Добавить команды.
	
	ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ЭлементРегистрБухгалтерииСписок.Имя, "ОткрытьСтрокуВРедактореЗаписиНаКлиенте");
	ДобавитьКомандуОчиститьДвиженияПоРегистру(ЭлементРегистрБухгалтерииСписок.Имя, "ОчиститьДвиженияПоРегистру");
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеСвязанногоСправочника(ИмяПодчиненногоОбъекта)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяПодчиненногоОбъекта) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	ДобавляемыеРеквизиты = Новый Массив;
	
	ТипТаблицы = "СвязанныйОбъект";
	ИмяТаблицы = СтрЗаменить(ИмяПодчиненногоОбъекта, ".", "_");
	
	ЧастиИмени = Навигатор.РазложитьСтрокуВМассивПодстрок(ИмяПодчиненногоОбъекта, ".");
	ИмяСправочника = ЧастиИмени[1];
	
	ИмяРеквизитаСписка = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, Новый ОписаниеТипов("ДинамическийСписок"));
	
	ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
	
	////
	//
	//ТипХранилищеЗначения = Навигатор.ТипХранилищеЗначения();
	//
	//ПараметрыКолонок = Навигатор.ПараметрыКолонокСпискаЭлементовОбъектаМетаданных("Справочники", ИмяСправочника);
	//
	//Если ПараметрыКолонок = Неопределено Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//Для каждого ПараметрыКоллекцииКолонок Из ПараметрыКолонок Цикл
	//	
	//	Для каждого Реквизит Из ОбъектМд[ПараметрыКоллекцииКолонок.Ключ] Цикл
	//		
	//		Если Реквизит.Тип = ТипХранилищеЗначения Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		
	//		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("Справочник", ИмяСправочника, Реквизит.Имя);
	//		ДобавляемыеРеквизиты.Добавить(Новый РеквизитФормы(ИмяРеквизитаКолонка, Реквизит.Тип));
	//		
	//	КонецЦикла;
	//	
	//КонецЦикла;
	//
	////
	//
	//ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСвязаннуюТаблицуДанныхОбъекта(ТипТаблицы, ИмяТаблицы)
	
	ЭлементФормыТаблицы = ЭлементФормыСвязаннойТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Если (ЭлементФормыТаблицы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		ЭлементФормыТаблицы.Обновить();
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеДокументаНаСервере()
	
	ДокументОбъект = ОбъектБазы.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
КонецПроцедуры

&НаСервере
Процедура ПровестиДокументНаСервере()
	
	ДокументОбъект = ОбъектБазы.ПолучитьОбъект();
	ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
КонецПроцедуры

// Добавляет данные поля в схему запроса для формирования текста выборки по регистру бухгалтерии.
//
// Параметры:
//	ОператорВыбрать - ОператорВыбратьСхемыЗапроса, оператор схемы запроса.
//	ЗапросВыбораСхемыЗапроса - ЗапросВыбораСхемыЗапроса, запрос схемы.
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный").
//	ИмяПоля - Строка, имя поля. Это может быть имя измерения, ресурса, реквизита (например: "Количество"). 
//	ТипОбработки - Строка, тип обработки добавления (например: "ДтКт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.	 
// 		
&НаСервере
Процедура ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса,
	ОператорВыбрать, ИмяРегистраБухгалтерии, ИмяПоля = "", ТипОбработки = "",
	МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "СубконтоДтКт") И МаксКоличествоСубконто = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "") И (Не ЗначениеЗаполнено(ИмяПоля)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "ДтКт") И (Не ЗначениеЗаполнено(ИмяПоля)) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Навигатор = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ИмяПоляДляВключения = Навигатор.ПодставитьПараметрыВСтроку("%1%2", ИмяПоля, СуффиксПоля);
			
			СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
			+ ИмяПоляДляВключения;
			
			ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяПоляДляВключения);
			
			ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
			- 1].Псевдоним = СинонимПоля;
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ИмяВыбираемогоПоля = Навигатор.ПодставитьПараметрыВСтроку("%1%2%3", ИмяПоляСубконто, СуффиксПоля, НомерСубконто);
					
					СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
					+ ИмяВыбираемогоПоля;
					
					ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяВыбираемогоПоля);
					
					ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
					- 1].Псевдоним = СинонимПоля;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		СинонимПоля = "РегистрБухгалтерии" + РЧИ + ИмяРегистраБухгалтерии + РЧИ
		+ ИмяПоля;
		
		ОператорВыбрать.ВыбираемыеПоля.Добавить(ИмяПоля);
		
		ЗапросВыбораСхемыЗапроса.Колонки[ЗапросВыбораСхемыЗапроса.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет реквизит списка регистра бухгалтерии в добавляемые реквизиты.
//
// Параметры:
//	ДобавляемыеРеквизиты - Массив, массив добавляемых реквизитов. 
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный"). 
//	ИмяКоллекцииРеквизитов - Строка, имя коллекции реквизитов (например: "Измерения", "Ресурсы").
//	ИмяРеквизита - Строка, имя реквизита (например: "Период"). 
//	ТипРеквизита - ОписаниеТипов, тип реквизита.
//	ТипОбработки - Строка, тип обработки добавления (например: "Дт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.
//	
&НаСервере
Процедура ДобавитьРеквизитСпискаРегистраБухгалтерии(ДобавляемыеРеквизиты,
	ИмяРегистраБухгалтерии, ИмяКоллекцииРеквизитов = "", ИмяРеквизита = "",
	ТипРеквизита = Неопределено, ТипОбработки = "", МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "СубконтоДтКт") Тогда
		Если (МаксКоличествоСубконто = 0) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если (ТипОбработки = "") И (ТипРеквизита = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ТипОбработки = "ДтКт") И (ТипРеквизита = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	Навигатор = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ИмяРеквизитаДтКт = Навигатор.ПодставитьПараметрыВСтроку("%1%2", ИмяРеквизита, СуффиксПоля);
			
			ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизитаДтКт);
			ЗаголовокРеквизитаСписка = "";
			
			РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизита, ЗаголовокРеквизитаСписка);
			ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ИмяРеквизитаСубконто = Навигатор.ПодставитьПараметрыВСтроку("%1%2%3", ИмяПоляСубконто, СуффиксПоля, НомерСубконто);
					
					ТипРеквизитаСубконто = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СтандартныеРеквизиты[ИмяПоляСубконто
					+ НомерСубконто].Тип;
					
					ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизитаСубконто);
					ЗаголовокРеквизитаСписка = "";
					
					РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизитаСубконто, ЗаголовокРеквизитаСписка);
					ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ИмяРеквизитаСписка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизита);
		ЗаголовокРеквизитаСписка = "";
		
		РеквизитСписка = Новый РеквизитФормы(ИмяРеквизитаСписка, ТипРеквизита, ЗаголовокРеквизитаСписка);
		ДобавляемыеРеквизиты.Добавить(РеквизитСписка);
		
	КонецЕсли;
	
КонецПроцедуры

// Добавляет элемент-колонку для отображения поля регистра бухгалтерии.
//
// Параметры:
//	ИмяРегистраБухгалтерии - Строка, имя регистра бухгалтерии (например: "Хозрасчетный"). 
//	ИмяРеквизита - Строка, имя реквизита (например: "Количество"). 
//	ИмяДинамическогоСписка - Строка, имя динамического списка. 
//	ЭлементСписка - Элемент, элемент-владелец динамический список для отображения поля которого добавляется колонка. 
//	ТипОбработки - Строка, тип обработки (например: "ДтКт", "СубконтоДтКт").
//	МаксКоличествоСубконто - Число, макс.количество субконто.
//	
&НаСервере
Процедура ДобавитьЭлементСпискаРегистраБухгалтерии(ИмяРегистраБухгалтерии,
	ИмяРеквизита = "", ИмяДинамическогоСписка, ЭлементСписка, ТипОбработки = "", МаксКоличествоСубконто = 0)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяРегистраБухгалтерии)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяДинамическогоСписка)) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЭлементСписка = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	Навигатор = ЭтаОбработка();
	
	СуффиксыПоля = Новый Массив;
	СуффиксыПоля.Добавить("Дт");
	СуффиксыПоля.Добавить("Кт");
	
	Если (ТипОбработки = "ДтКт") Тогда
		
		Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
			
			ПолноеИмяРеквизитаДтКт = ИмяРеквизита + СуффиксПоля; 
			
			ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ПолноеИмяРеквизитаДтКт);
			ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
			
			Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
			Элемент.Видимость = Истина;
			Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
			Элемент.Заголовок = ПолноеИмяРеквизитаДтКт;
			
		КонецЦикла;
		
	ИначеЕсли (ТипОбработки = "СубконтоДтКт") Тогда
		
		ИменаПолейСубконто = Новый Массив;
		ИменаПолейСубконто.Добавить("ВидСубконто");
		ИменаПолейСубконто.Добавить("Субконто");
		
		Для Каждого ИмяПоляСубконто Из ИменаПолейСубконто Цикл
			
			Для НомерСубконто = 1 По МаксКоличествоСубконто Цикл
				
				Для Каждого СуффиксПоля Из СуффиксыПоля Цикл
					
					ПолноеИмяПоляСубконто = ИмяПоляСубконто + СуффиксПоля + НомерСубконто;
					
					ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ПолноеИмяПоляСубконто);
					ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
					
					Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
					Элемент.Видимость = Истина;
					Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
					Элемент.Заголовок = ПолноеИмяПоляСубконто;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	Иначе
		
		ИмяРеквизитаКолонка = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяРеквизита);
		
		ПутьКДаннымДляКолонки = Навигатор.ПодставитьПараметрыВСтроку("%1.%2", ИмяДинамическогоСписка, ИмяРеквизитаКолонка);
		
		Элемент = Элементы.Добавить(ИмяРеквизитаКолонка, Тип("ПолеФормы"), ЭлементСписка);
		Элемент.Видимость = Истина;
		Элемент.ПутьКДанным = ПутьКДаннымДляКолонки;
		Элемент.Заголовок = ИмяРеквизита;
		
		Если ИмяРеквизита = "НомерСтроки" Тогда
			Элемент.Заголовок = "№";
		ИначеЕсли ИмяРеквизита = "Активность" Тогда
			Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьИзмененияОбъектаНаКлиенте()
	
	дз_ВсеРеквизиты = РеквизитФормыВЗначение("ВсеРеквизиты");
	
	СтрокиИзмРеквизитов = дз_ВсеРеквизиты.Строки.НайтиСтроки(Новый Структура("Изменен", Истина), Истина);
	
	Если СтрокиИзмРеквизитов.Количество() = 0 Тогда
		// Ничего не поменяли, но может просто надо сгенерить событие записи.
		// Возврат;
	КонецЕсли;
	
	//
	
	ОбъектБазыДляЗаписи = ОбъектБазы.ПолучитьОбъект();
	
	Для каждого стр_ВсеРеквизиты Из СтрокиИзмРеквизитов Цикл
		ОбъектБазыДляЗаписи[стр_ВсеРеквизиты.Имя] = стр_ВсеРеквизиты.Значение;
	КонецЦикла;
	
	Если ОбменДаннымиЗагрузка Тогда
		ОбъектБазыДляЗаписи.ОбменДанными.Загрузка = Истина;
	КонецЕсли;
	
	//
	
	ПометкаУдаленияИсх = ОбъектБазыДляЗаписи.ПометкаУдаления;
	
	Если Не ОбъектБазыДляЗаписи.Модифицированность() Тогда
		ОбъектБазыДляЗаписи.ПометкаУдаления = Не ОбъектБазыДляЗаписи.ПометкаУдаления;
	КонецЕсли;
	
	ОбъектБазыДляЗаписи.ПометкаУдаления = ПометкаУдаленияИсх;
	
	//
	
	ОбъектБазыДляЗаписи.Записать();
	
	ЗаполнитьВсеРеквизиты();
	ЗаполнитьВсеТабличныеЧасти();
	ЗаполнитьВсеДвижения();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОбъектаИнформационнойБазы()
	
	Навигатор = ЭтаОбработка();
	
	Заголовок = ТекстЗаголовкаФормы();
	
	ЗаполнитьВсеРеквизиты();
	УстановитьВидимостьСтраницыРеквизиты();
	УстановитьЗаголовокСтраницыРеквизиты();
	
	ЗаполнитьВсеТабличныеЧасти();
	УстановитьВидимостьСтраницыТабличныеЧасти();
	УстановитьЗаголовокСтраницыТабличныеЧасти();
	
	ЗаполнитьВсеДвижения();
	УстановитьЗаголовокСтраницыДвижения();
	УстановитьВидимостьСтраницыДвижения();
	
	ЗаполнитьСвязанныеОбъекты();
	УстановитьВидимостьСтраницыСвязанныеОбъекты();
	
	ЗаполнитьИзмененияНаУзлахОбмена();
	УстановитьЗаголовокСтраницыИзмененияНаУзлахПлановОбмена();
	УстановитьВидимостьСтраницыИзмененияНаУзлахПлановОбмена();
	
	ОтобразитьДанныеXMLОбъекта();
	
	Элементы.СтраницаПодчиненныеДокументы.Видимость = ЭтоДокумент;
	Элементы.СтраницаСостав.Видимость = Ложь;
	Элементы.НадписьОбъектКонфигурацииИнфо.Заголовок = Навигатор.ПредставлениеТипаОбъектаКонфигурации(ОбъектБазы);
	
	// Отобразить необходимые элементы в зависимости от типа объекта.
	
	ОтображатьЭлементыДляДокумента = Метаданные.Документы.Содержит(ОбъектБазы.Метаданные());
	
	Элементы.КомандаПровестиДокумент.Видимость = ОтображатьЭлементыДляДокумента;
	Элементы.КомандаОтменитьПроведениеДокумента.Видимость = ОтображатьЭлементыДляДокумента;
	
	НавигационнаяСсылкаНаЭлемент = Навигатор.НавигационнаяСсылкаНаЭлемент(ОбъектБазы);
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиПоНавигационнойСсылкеНаЭлемент()
	
	Навигатор = ЭтаОбработка();
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(НавигационнаяСсылкаНаЭлемент)) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОпределительТипаЭлементов = Навигатор.ПредставлениеТипаОбъектаКонфигурации(ОбъектБазы);
	
	СсылкаНаЭлемент = Навигатор.ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылкаНаЭлемент, ОпределительТипаЭлементов);
	
	Если (Не ЗначениеЗаполнено(СсылкаНаЭлемент)) Тогда
		
		ТекстСообщения = Навигатор.ПодставитьПараметрыВСтроку("По ссылке '%1' не удалось найти элемент базы.", НавигационнаяСсылкаНаЭлемент);
		Сообщить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектПоСсылке = СсылкаНаЭлемент.ПолучитьОбъект();
	
	Если ОбъектПоСсылке = Неопределено Тогда
		
		ТекстСообщения = Навигатор.ПодставитьПараметрыВСтроку("По ссылке '%1' не удалось получить данные объекта.", НавигационнаяСсылкаНаЭлемент);
		Сообщить(ТекстСообщения);
		
		Возврат;
		
	КонецЕсли;
	
	ОбъектБазы = СсылкаНаЭлемент;
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.КомандаУстановитьСнятьПометкуУдаления.Картинка = ?(ОбъектБазы.ПометкаУдаления, 
		Элементы.КартинкаСнятьПометкуУдаления.Картинка, 
		Элементы.КартинкаУстановитьПометкуУдаления.Картинка
	);
	
	Элементы.РежимЗаписиДокументаБазы.Видимость      = ЭтоДокумент;
	Элементы.КомандаСтруктураПодчиненности.Видимость = ЭтоДокумент;
	Элементы.КомандаСформироватьОтчетПоДвижениям.Видимость = ЭтоДокумент;
	
КонецПроцедуры

&НаСервере
Процедура ПеречитатьДанныеОбъектаНаСервере()
	
	ЗаполнитьПоДаннымОбъектаИнформационнойБазы();
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеXMLОбъекта()
	
	ДанныеОбъектаXML = "";
	
	ЗаписьXML = Новый ЗаписьXML;
	ЗаписьXML.УстановитьСтроку();
	
	ОбъектБазыДляЧтения = ОбъектБазы.ПолучитьОбъект();
	
	Навигатор = ЭтаОбработка();
	
	Если Навигатор.ЭтоДокумент(ОбъектБазы.Метаданные()) Тогда
		
		Для каждого НаборЗаписей Из ОбъектБазыДляЧтения.Движения Цикл
			НаборЗаписей.Прочитать();
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаписатьXML(ЗаписьXML, ОбъектБазыДляЧтения);
	
	ДанныеОбъектаXML = ЗаписьXML.Закрыть();
	ДанныеОбъектаXMLТекст.УстановитьТекст(ДанныеОбъектаXML);
	
	дз_XML = ПолучитьДеревоЗначенийИзXMLСтроки(ДанныеОбъектаXML);
	ЗначениеВРеквизитФормы(дз_XML, "ДанныеОбъектаXMLДерево");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыОтображенияВидовСубконтоСпискаРегистраБухгалтерии(ЭлементСпискаРегистраБухгалтерии, ИмяРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если (ЭлементСпискаРегистраБухгалтерии = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Общие переменные.
	Навигатор = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	КолСубконто = Навигатор.МаксКоличествоСубконтоРегистраБухгалтерии(ИмяРегистраБухгалтерии);
	
	// Найти поля видов субконто и субконто.
	ОпределителиПолей = Новый Массив;
	ОпределителиПолей.Добавить("ВидСубконто");
	ОпределителиПолей.Добавить("Субконто");
	
	СуффиксыПолей = Новый Массив;
	СуффиксыПолей.Добавить("Дт");
	СуффиксыПолей.Добавить("Кт");
	
	ПоляСубконто = Навигатор.Тип_ПоляСубконтоСпискаРегистраБухгалтерии(); 
	
	Для Каждого ОпределительПоля Из ОпределителиПолей Цикл
		
		Для Каждого СуффиксПоля Из СуффиксыПолей Цикл
			
			Для НомерСубконто = 1 По КолСубконто Цикл
				
				ИмяПоля = Навигатор.ПодставитьПараметрыВСтроку("РегистрБухгалтерии%1%2%3%4%5%6", РЧИ, ИмяРегистраБухгалтерии, РЧИ, ОпределительПоля, СуффиксПоля, НомерСубконто); // "РегистрБухгалтерии_Хозрасчетный_ВидСубконтоДт1"
				
				Поле = ЭлементСпискаРегистраБухгалтерии.ПодчиненныеЭлементы.Найти(ИмяПоля);
				Если (Поле = Неопределено) Тогда
					Продолжить;
				КонецЕсли;
				
				ПоляСубконто[ОпределительПоля][СуффиксПоля].Добавить(Новый Структура("ИмяПоля, Поле", ИмяПоля, Поле));
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Добавить группы полей и переместить поля видов субконто и субконто в группы.
	ИмяЭлементаСписка = ЭлементСпискаРегистраБухгалтерии.Имя;
	
	Для Каждого КлючЗначение Из ПоляСубконто Цикл
		
		РазделПолей = КлючЗначение.Ключ;
		ОписаниеРазделаПолей = КлючЗначение.Значение;
		
		Для Каждого СуффиксПоля Из СуффиксыПолей Цикл
			
			ИмяПоляХраненияГруппы = "Группа" + СуффиксПоля; // "ГруппаДт" 
			
			Если (ОписаниеРазделаПолей[ИмяПоляХраненияГруппы]) = Неопределено Тогда
				
				ИмяГруппы = Навигатор.ПодставитьПараметрыВСтроку("%1%2Группа%3%4", ИмяЭлементаСписка, РЧИ, РазделПолей, СуффиксПоля); // "РегистрБухгалтерии_Хозрасчетный_ГруппаВидСубконтоДт"				
				Группа = Элементы.Найти(ИмяГруппы);
				
				Если (Группа = Неопределено) Тогда
					Группа = Элементы.Добавить(ИмяГруппы, Тип("ГруппаФормы"), ЭлементСпискаРегистраБухгалтерии);
				КонецЕсли;
				
			КонецЕсли;
			
			ОписаниеРазделаПолей[ИмяПоляХраненияГруппы] = Группа;
			
			Для Каждого СтруктураПоля Из ОписаниеРазделаПолей[СуффиксПоля] Цикл
				Элементы.Переместить(СтруктураПоля.Поле, ОписаниеРазделаПолей[ИмяПоляХраненияГруппы]);
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Теперь надо разместить добавленные группы в правильном порядке: 
	// ВидыСубконтоДт, СубконтоДт, ВидыСубконтоКт, СубконтоКт.
	// Размещаем перед первым ресурсом.
	
	// ... найдем элемент связанный с последним измерением.
	
	ИмяГраничногоЭлемента = "";
	
	МД = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	ПоляДтКт = Навигатор.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	Если Не (МД.Ресурсы.Количество() = 0) Тогда
		
		ПоследнийРесурс = МД.Ресурсы[МД.Ресурсы.Количество() - 1];
		
		Если Не (ПоляДтКт.Ресурсы.Найти(ПоследнийРесурс.Имя) = Неопределено) Тогда
			ИмяГраничногоЭлемента = ПоследнийРесурс.Имя + "Дт";
		Иначе
			ИмяГраничногоЭлемента = ПоследнийРесурс.Имя;
		КонецЕсли;
		
	КонецЕсли;
	
	Если (ИмяГраничногоЭлемента = "") Тогда
		ИмяГраничногоЭлемента = "Период";
	КонецЕсли;
	
	ИмяКолонкиЭлемента = ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта("РегистрБухгалтерии", ИмяРегистраБухгалтерии, ИмяГраничногоЭлемента);
	
	Элементы.Переместить(ПоляСубконто["ВидСубконто"]["ГруппаДт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["Субконто"]["ГруппаДт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["ВидСубконто"]["ГруппаКт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	Элементы.Переместить(ПоляСубконто["Субконто"]["ГруппаКт"], ЭлементСпискаРегистраБухгалтерии, Элементы[ИмяКолонкиЭлемента]);
	
КонецПроцедуры

&НаСервере
Процедура СтруктураПодчиненностиНаКлиенте()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	ДеревоПодчиненныеОбъекты.ПолучитьЭлементы().Очистить();
	
	ЗначенияРеквизитов = Навигатор.ЗначенияРеквизитовОбъекта(ОбъектБазы, "Ссылка, Проведен, ПометкаУдаления");
	ЗначенияРеквизитов.Вставить("Представление", Строка(ОбъектБазы));
	ЗначенияРеквизитов.Вставить("ИндексКартинки", ?(ОбъектБазы.Проведен, 14, ?(ОбъектБазы.ПометкаУдаления, 13, 12)));
	
	СтрокаОбъектаБазы = ДобавитьСтрокуВДерево(ДеревоПодчиненныеОбъекты.ПолучитьЭлементы(), ЗначенияРеквизитов);
	
	ВывестиПодчиненныеОбъекты(ОбъектБазы, СтрокаОбъектаБазы);
	дз_ДеревоПодчиненныеОбъекты = РеквизитФормыВЗначение("ДеревоПодчиненныеОбъекты");
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПодчиненныеОбъекты(ТекущийОбъект, ДеревоРодитель)
	
	Навигатор = ЭтаОбработка();
	
	СтрокиДерева = ДеревоРодитель.ПолучитьЭлементы();
	
	Таблица = ОбъектыПоКритериюОтбора(ТекущийОбъект);
	
	Если Таблица = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	КэшПоТипамОбъектов   = Новый Соответствие;
	КэшРеквизитовОбъекта = Новый Соответствие;
	
	Для Каждого СтрокаТаблицы Из Таблица Цикл
		
		МетаданныеОбъекта = СтрокаТаблицы.Ссылка.Метаданные();
		
		Если Не ПравоДоступа("Чтение", МетаданныеОбъекта) Тогда
			Продолжить;
		КонецЕсли;
		
		ПолноеИмяОбъекта = МетаданныеОбъекта.ПолноеИмя();
		ДополнитьКэшМетаданных(МетаданныеОбъекта, ПолноеИмяОбъекта, КэшРеквизитовОбъекта);
		
		МассивСсылок = КэшПоТипамОбъектов[ПолноеИмяОбъекта];
		
		Если МассивСсылок = Неопределено Тогда
			
			МассивСсылок = Новый Массив;
			КэшПоТипамОбъектов.Вставить(ПолноеИмяОбъекта, МассивСсылок);
			
		КонецЕсли;
		
		МассивСсылок.Добавить(СтрокаТаблицы.Ссылка);
		
	КонецЦикла;
	
	Если КэшПоТипамОбъектов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапросаНачало = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ (";
	ТекстЗапросаКонец = ") КАК ПодчиненныеОбъекты УПОРЯДОЧИТЬ ПО ПодчиненныеОбъекты.Дата";
	
	Запрос = Новый Запрос;
	ТекстЗапроса = "";
	
	Для Каждого КлючИЗначение Из КэшПоТипамОбъектов Цикл
		
		МассивИмениОбъекта = Навигатор.РазложитьСтрокуВМассивПодстрок(КлючИЗначение.Ключ, ".");
		
		Если МассивИмениОбъекта.Количество() = 2 Тогда
			ИмяОбъекта = МассивИмениОбъекта[1];
		Иначе
			Продолжить;
		КонецЕсли;
		
		ТекстПоТипуОбъекта = "
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Дата"] + "           КАК Дата,
		|	Ссылка,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Проведен"] + "       КАК Проведен,
		|	ПометкаУдаления,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["СуммаДокумента"] + " КАК СуммаДокумента,
		|" + КэшРеквизитовОбъекта[КлючИЗначение.Ключ]["Валюта"] + "         КАК Валюта,
		|ВЫБОР КОГДА Проведен ТОГДА 14 КОГДА ПометкаУдаления ТОГДА 13 ИНАЧЕ 12 КОНЕЦ КАК ИндексКартинки,
		|	#Представление
		|ИЗ
		|	" + КлючИЗначение.Ключ + "
		|ГДЕ
		|	Ссылка В (&" + ИмяОбъекта + ")";
		
		Запрос.УстановитьПараметр(ИмяОбъекта, КлючИЗначение.Значение);
		
		МассивДопРеквизитов = Новый Массив;
		ДополнитьТекстЗапросаПоРеквизитамОбъекта(ТекстПоТипуОбъекта, МассивДопРеквизитов);
		
		ТекстЗапроса = ТекстЗапроса + ?(ТекстЗапроса = "", " ВЫБРАТЬ ", " ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ") + ТекстПоТипуОбъекта;
		
	КонецЦикла;
	
	Запрос.Текст = ТекстЗапросаНачало + ТекстЗапроса + ТекстЗапросаКонец;
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		НоваяСтрока = ДобавитьСтрокуВДерево(СтрокиДерева, Выборка);
		
		Если Не ДобавляемыйОбъектИмеетсяСредиРодителей(ДеревоРодитель, Выборка.Ссылка) Тогда
			ВывестиПодчиненныеОбъекты(Выборка.Ссылка, НоваяСтрока);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьКэшМетаданных(МетаданныеОбъекта, ИмяОбъекта,КэшРеквизитовОбъекта)
	
	Навигатор = ЭтаОбработка();
	
	РеквизитыДокумента = КэшРеквизитовОбъекта[ИмяОбъекта];
	
	Если РеквизитыДокумента = Неопределено Тогда
		
		РеквизитыДокумента = Новый Соответствие;
		ЯвляетсяДокументом = ЭтоДокумент;
		
		ИмяРеквизитаСуммаДокумента = "СуммаДокумента";
		
		Если ЯвляетсяДокументом И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизитаСуммаДокумента) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("СуммаДокумента", ИмяРеквизитаСуммаДокумента);
		Иначе
			РеквизитыДокумента.Вставить("СуммаДокумента", "NULL");
		КонецЕсли;
		
		ИмяРеквизитаВалюта = "Валюта";
		
		Если ЯвляетсяДокументом И МетаданныеОбъекта.Реквизиты.Найти(ИмяРеквизитаВалюта) <> Неопределено Тогда
			РеквизитыДокумента.Вставить("Валюта", ИмяРеквизитаВалюта);
		Иначе
			РеквизитыДокумента.Вставить("Валюта", "NULL");
		КонецЕсли;
		
		Если ЯвляетсяДокументом Тогда
			РеквизитыДокумента.Вставить("Проведен", "Проведен");
		Иначе
			РеквизитыДокумента.Вставить("Проведен", "Ложь");
		КонецЕсли;
		
		Если ЯвляетсяДокументом Тогда
			РеквизитыДокумента.Вставить("Дата", "Дата");
		Иначе
			РеквизитыДокумента.Вставить("Дата", "NULL");
		КонецЕсли;
		
		КэшРеквизитовОбъекта.Вставить(ИмяОбъекта, РеквизитыДокумента);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДополнитьТекстЗапросаПоРеквизитамОбъекта(ТекстЗапроса, МассивРеквизитов)
	
	ТекстПредставление = "Представление КАК Представление";
	
	Для Инд = 1 По 3 Цикл
		
		ТекстПредставление = ТекстПредставление + ",
			|	" + ?(МассивРеквизитов.Количество() >= Инд,МассивРеквизитов[инд - 1],"NULL") + " Как ДополнительныйРеквизит" + Инд;
		
	КонецЦикла;
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "#Представление", ТекстПредставление);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуЗакрытьСтраницуДанныхТаблицы()
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуОткрытьСтрокуВРедактореЗаписи(ИмяСпискаЭлементов, ТипДопКоманды)
	
	ИмяКоманды = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаОткрытьСтрокуВРедактореЗаписи";
	Команда.Подсказка = "Редактировать строку";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяСпискаЭлементов].КоманднаяПанель);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Редактировать строку";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаРедактироватьСтроку.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуУдалитьСтрокуТабличнойЧасти(ИмяСпискаЭлементов, ТипДопКоманды)
	
	ИмяКоманды = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаУдалитьСтрокуТабличнойЧасти";
	Команда.Подсказка = "Удалить строку табличной части";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяСпискаЭлементов].КоманднаяПанель);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Удалить строку табличной части";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаУдалитьСтрокуТабличнойЧасти.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуОчиститьТабличнуюЧасть(ИмяСпискаЭлементов, ТипДопКоманды)
	
	ИмяКоманды = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаОчиститьТабличнуюЧасть";
	Команда.Подсказка = "Очистить табличную часть";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяСпискаЭлементов].КоманднаяПанель);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Очистить табличную часть";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаОчиститьТабличнуюЧасть.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуОчиститьДвиженияПоРегистру(ИмяСпискаЭлементов, ТипДопКоманды)
	
	ИмяКоманды = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаОчиститьДвиженияПоРегистру";
	Команда.Подсказка = "Очистить движения по регистру";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяСпискаЭлементов].КоманднаяПанель);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Очистить движения по регистру";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаОчиститьДвиженияПоРегистру.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСнятьПометкуУдаленияНаСервере(ПараметрыКоманды)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	
	Попытка
		ДанныеОбъекта.УстановитьПометкуУдаления(Не ДанныеОбъекта.ПометкаУдаления);
		ПараметрыКоманды.Выполнена = Истина;
	Исключение
		ПараметрыКоманды.ОписаниеОшибки = ОписаниеОшибки();
		ПараметрыКоманды.Выполнена = Ложь;
	КонецПопытки;
	
	//
	
	ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
	ПараметрыКоманды.ЗнПометкиПосле = ДанныеОбъекта.ПометкаУдаления;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьОбъектБазы(УдалениеВыполнено = Ложь, ПредставлениеОбъекта = "")
	
	УдалениеВыполнено = Ложь;
	ПредставлениеОбъекта = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПредставлениеОбъекта = Строка(ОбъектБазы);
	
	ОбъектБазыДляУдаления = ОбъектБазы.ПолучитьОбъект();
	ОбъектБазыДляУдаления.Удалить();
	
	УдалениеВыполнено = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗарегистрироватьУдалитьИзмененияНаУзле(Узел, ФлРегистрации, ИзмВыполнено)
	
	ИзмВыполнено = Ложь;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(Узел) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ФлРегистрации = 1 Тогда
		ПланыОбмена.ЗарегистрироватьИзменения(Узел, ОбъектБазы);
	Иначе
		ПланыОбмена.УдалитьРегистрациюИзменений(Узел, ОбъектБазы);
	КонецЕсли;
	
	ИзмВыполнено = Истина;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗаголовкаФормы()
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ОбъектБазы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1 %2", "(...)", ОбъектБазы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(
		"%1" + РЧИ
		+ "%2", 
		ТипТаблицы, 
		ИмяТаблицы
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаСпискаТаблицыОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если (ТипТаблицы = "ТабличнаяЧасть") Тогда
		Результат = ТекстЗапросаСпискаТаблицыДанныхОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы);
	ИначеЕсли (ТипТаблицы = "РегистрБухгалтерии") Тогда
		Результат = ТекстЗапросаТаблицыДвиженийРегистраБухгалтерииОбъектаКонфигурации(ИмяТаблицы);
	Иначе
		Результат = ТекстЗапросаТаблицыДвиженийОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Формирует текст запроса для отображения списка указанного объекта конфигурации.
//
// Параметры:
//	ТипТаблицы - Строка, тип таблицы (например: "РегистрБухгалтерии"). 
//	ИмяТаблицы - Строка, имя таблицы (например: "ХозрасчетныйОбычныйКорр3Субконто").
//
// Возвращаемое значение:
//	Строка. Текст запроса списка таблицы.
//	
&НаСервере
Функция ТекстЗапросаСпискаТаблицыДанныхОбъектаКонфигурации(ТипТаблицы,
	ИмяТаблицы)
	
	Результат = "";
	
	Навигатор = ЭтаОбработка();
	
	МетаданныеОбъекта = ОбъектБазы.Метаданные();
	
	ПолноеИмяТаблицы = Навигатор.ПолноеИмяТабличнойЧастиОбъектаМетаданных(МетаданныеОбъекта, ИмяТаблицы);
	МетаданныеТабличнойЧасти = МетаданныеОбъекта["ТабличныеЧасти"][ИмяТаблицы];
	
	// Общие переменные.
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	Оператор = ЗапросСхемы.Операторы[0];
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	// Добавить источник в запрос.
	Оператор.Источники.Добавить(ПолноеИмяТаблицы, "Т");
	
	// Добавить поля в запрос.
	Для Каждого СтандартныйРеквизит Из МетаданныеТабличнойЧасти.СтандартныеРеквизиты Цикл
		
		СинонимПоля = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + СтандартныйРеквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(СтандартныйРеквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеТабличнойЧасти.Реквизиты Цикл
		
		СинонимПоля = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + Реквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Реквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Оператор.Отбор.Добавить("Т.Ссылка = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТаблицыДвиженийРегистраБухгалтерииОбъектаКонфигурации(ИмяРегистраБухгалтерии)
	
	Результат = "";
	
	Навигатор = ЭтаОбработка();
	
	МетаданныеРегистра = Метаданные.РегистрыБухгалтерии[ИмяРегистраБухгалтерии];
	
	СхемаЗапроса = Новый СхемаЗапроса;
	ЗапросВыбораСхемыЗапроса = СхемаЗапроса.ПакетЗапросов[0];
	
	// Добавить источник в запрос.
	ПолноеИмяТаблицыРегистра = Навигатор.ПодставитьПараметрыВСтроку("РегистрБухгалтерии.%1.ДвиженияССубконто", ИмяРегистраБухгалтерии);
	ОператорВыбрать = ЗапросВыбораСхемыЗапроса.Операторы[0];
	ОператорВыбрать.Источники.Добавить(ПолноеИмяТаблицыРегистра, "Т");
	
	// Добавить поля в запрос.
	
	// Стандартные реквизиты.
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		Если ЭтоПолеСубконто(СтандартныйРеквизит.Имя)
			Или ЭтоПолеВидаСубконто(СтандартныйРеквизит.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, СтандартныйРеквизит.Имя);
		
	КонецЦикла;
	
	// ... получить корреспондирющие поля.
	КоррПоляРегистра = Навигатор.ПоляРегистраБухгалтерииДтКт(ИмяРегистраБухгалтерии);
	
	// Измерения.
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		ТипОбработки = "";
		Если Не (КоррПоляРегистра.Измерения.Найти(Измерение.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
			ЗапросВыбораСхемыЗапроса, 
			ОператорВыбрать, 
			ИмяРегистраБухгалтерии, 
			Измерение.Имя, 
			ТипОбработки
		);
		
	КонецЦикла;
	
	// Добавить счета.
	Для каждого ОписаниеСчета Из КоррПоляРегистра.Счета Цикл
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
			ЗапросВыбораСхемыЗапроса, 
			ОператорВыбрать, 
			ИмяРегистраБухгалтерии, 
			ОписаниеСчета.ИмяРеквизитаСчета
		);
		
	КонецЦикла;
	
	// Добавить виды субконто.
	ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(
		ЗапросВыбораСхемыЗапроса, 
		ОператорВыбрать, 
		ИмяРегистраБухгалтерии, 
		, 
		"СубконтоДтКт", 
		КоррПоляРегистра.МаксКоличествоСубконто
	);
	
	// Ресурсы.
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		ТипОбработки = "";
		Если Не (КоррПоляРегистра.Ресурсы.Найти(Ресурс.Имя) = Неопределено) Тогда
			ТипОбработки = "ДтКт";
		КонецЕсли;
		
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, Ресурс.Имя, ТипОбработки);
		
	КонецЦикла;
	
	// Реквизиты.
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		ДобавитьПолеРегистраБухгалтерииВСхемуЗапроса(ЗапросВыбораСхемыЗапроса, ОператорВыбрать, ИмяРегистраБухгалтерии, Реквизит.Имя);
	КонецЦикла;
	
	ОператорВыбрать.Отбор.Добавить("Т.Регистратор = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаТаблицыДвиженийОбъектаКонфигурации(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	
	Если ТипТаблицы = "РегистрНакопления" Тогда
		МетаданныеРегистра = Метаданные.РегистрыНакопления[ИмяТаблицы];
	ИначеЕсли ТипТаблицы = "РегистрСведений" Тогда
		МетаданныеРегистра = Метаданные.РегистрыСведений[ИмяТаблицы];
	ИначеЕсли ТипТаблицы = "РегистрРасчета" Тогда
		МетаданныеРегистра = Метаданные.РегистрыРасчета[ИмяТаблицы];
	КонецЕсли;
	
	СхемаЗапроса = Новый СхемаЗапроса;
	
	ЗапросСхемы = СхемаЗапроса.ПакетЗапросов[0];
	
	Оператор = ЗапросСхемы.Операторы[0];
	
	// Добавить источник в запрос.
	ПолноеИмяТаблицыРегистра = ТипТаблицы + "." + ИмяТаблицы;
	Оператор.Источники.Добавить(ПолноеИмяТаблицыРегистра, "Т");
	
	// Добавить поля в запрос.
	Для Каждого СтандартныйРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + СтандартныйРеквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(СтандартныйРеквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Измерение Из МетаданныеРегистра.Измерения Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Измерение.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Измерение.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Реквизит.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Реквизит.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Для Каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
		
		СинонимПоля = ТипТаблицы + Объект.Система_РазделительЧастейИмен + ИмяТаблицы
		+ Объект.Система_РазделительЧастейИмен + Ресурс.Имя;
		
		Оператор.ВыбираемыеПоля.Добавить(Ресурс.Имя);
		
		ЗапросСхемы.Колонки[ЗапросСхемы.Колонки.Количество()
		- 1].Псевдоним = СинонимПоля;
		
	КонецЦикла;
	
	Оператор.Отбор.Добавить("Т.Регистратор = &Ссылка");
	
	Результат = СхемаЗапроса.ПолучитьТекстЗапроса();
	
	Возврат Результат;
	
КонецФункции

// Имя реквизита формы колонки табличной части.
//
// Параметры:
//	ТипТаблицы - Строка, имя табличной части (например: "ТабличнаяЧасть"). 
//	ИмяТаблицы - Строка, имя таблицы (например: "Товары").
//	ИмяРеквизитаТаблицы - Строка, имя реквизита таблицы (например: "Номенклатура").
//
// Возвращаемое значение:
//	Строка. Имя реквизита формы колонки таблицы данных объекта (например: "Товары_Номенклатура").
//
&НаСервере
Функция ИмяРеквизитаФормыКолонкиТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы,
	ИмяРеквизитаТаблицы)
	
	Результат = "";
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ТипТаблицы + РЧИ + ИмяТаблицы + РЧИ + ИмяРеквизитаТаблицы;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяСтраницыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяТаблицы) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	Результат = Навигатор.ПодставитьПараметрыВСтроку("Страница" + РЧИ + "%1"
	+ РЧИ + "%2", ТипТаблицы, ИмяТаблицы);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТаблицаОбъектаУжеОтображена(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяРеквизита, Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
	
	Если (СтруктураПоиска[ИмяРеквизита] = Неопределено) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ТаблицаДвиженийОбъектаУжеОтображена(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	РеквизитФормы = РеквизитФормыТаблицыДвиженийОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Результат = Не (РеквизитФормы = Неопределено);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РеквизитФормыТаблицыДвиженийОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяРеквизита = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить(ИмяРеквизита, Неопределено);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ЭтаФорма);
	
	Результат = СтруктураПоиска[ИмяРеквизита];
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция ЭлементФормыСвязаннойТаблицыДанныхОбъекта(ТипТаблицы, ИмяТаблицы)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ТипТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если (Не ЗначениеЗаполнено(ИмяТаблицы)) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	#КонецОбласти
	
	// Пока считаем что имя элемента совпадает с именем связанного реквизита,
	// иначе запутаемся совсем.
	ИмяЭлемента = ИмяРеквизитаФормыТаблицыОбъекта(ТипТаблицы, ИмяТаблицы);
	
	Результат = Элементы.Найти(ИмяЭлемента);
	
	Возврат Результат; 
	
КонецФункции

&НаСервере
Функция КоличествоЗаписейПоРегистру(МетаданныеРегистра)
	
	Результат = 0;
	ПустойРезультат = 0;
	
	#Область Предусловия
	
	Если МетаданныеРегистра = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Метаданные.РегистрыНакопления.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрНакопления";
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрСведений";
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрБухгалтерии";
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(МетаданныеРегистра) Тогда
		ИмяТипаРегистра = "РегистрРасчета";
	Иначе
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ТекстЗапроса = ЭтаОбработка().ПодставитьПараметрыВСтроку("ВЫБРАТЬ
	|	КОЛИЧЕСТВО(*) КАК Количество
	|ИЗ
	|	%1.%2 КАК Т
	|ГДЕ
	|	Т.Регистратор = &Регистратор", ИмяТипаРегистра, МетаданныеРегистра.Имя);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Регистратор", ОбъектБазы);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Выборка.Количество;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки)
	
	Результат = ЭтаОбработка().ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СсылкаНаОбъект()
	
	Результат = Неопределено;
	ПустойРезультат = Неопределено;
	
	Попытка
		Результат = ОбъектБазы.Ссылка;
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоПолеСубконто(ИмяПоляРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если (Не ЗначениеЗаполнено(ИмяПоляРегистраБухгалтерии)) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не (Лев(ИмяПоляРегистраБухгалтерии, СтрДлина("Субконто")) = "Субконто") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ЭтоПолеВидаСубконто(ИмяПоляРегистраБухгалтерии)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяПоляРегистраБухгалтерии) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	#КонецОбласти
	
	Если Не (Лев(ИмяПоляРегистраБухгалтерии, СтрДлина("ВидСубконто")) = "ВидСубконто") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СтруктураПоляСубконто(Знач ИмяПоляСубконто)
	
	Результат = Новый Структура("ИмяПоля, НомерСубконто");
	Результат.ИмяПоля = "Субконто";
	Результат.НомерСубконто = СтрЗаменить(ИмяПоляСубконто, "Субконто", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция СтруктураПоляВидаСубконто(Знач ИмяПоляВидаСубконто)
	
	Результат = Новый Структура("ИмяПоля, НомерСубконто");
	Результат.ИмяПоля = "ВидСубконто";
	Результат.НомерСубконто = СтрЗаменить(ИмяПоляВидаСубконто, "ВидСубконто", "");
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ДобавитьСтрокуВДерево(СтрокиДерева, Выборка)
	
	НоваяСтрока = СтрокиДерева.Добавить();
	
	ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка, "Ссылка, Представление, Проведен, ПометкаУдаления, ИндексКартинки");
	
	НоваяСтрока.Представление = ПредставлениеОбъектаДляВыводаВОтчет(Выборка);
	НоваяСтрока.КоличествоЗаписей = 1;
	
	Возврат НоваяСтрока;
	
КонецФункции

// Формирует представление документа для вывода в табличный документ.
//
// Параметры:
//	Выборка  - ВыборкаИзРезультатаЗапроса или ДанныеФормыЭлементДерева - набор данных
//             на основании которого формируется представление.
//
// Возвращаемое значение:
//	Строка   - сформированное представление.
//
&НаСервере
Функция ПредставлениеОбъектаДляВыводаВОтчет(Выборка)
	
	ПредставлениеОбъекта = Выборка.Представление;
	
	// TODO Сформировать представление объекта
	
	Возврат ПредставлениеОбъекта;
	
КонецФункции

// Определяет наличие документа среди родителей строки дерева, которая возможно будет добавлена.
//
// Параметры:
//	СтрокаРодитель  - ДанныеФормыДерево,ДанныеФормыЭлементДерева - родитель, для 
//                 которого предполагается добавить строку дерева.
//	ИскомыйОбъект  - Ссылка - ссылка на объект метаданных, на наличие которого выполняется проверка.
//
// Возвращаемое значение:
//	Булево   - Истина если найден, Ложь в обратном случае.
//
&НаСервере
Функция ДобавляемыйОбъектИмеетсяСредиРодителей(СтрокаРодитель,ИскомыйОбъект)
	
	#Область Предусловия
	
	Если ИскомыйОбъект = ОбъектБазы Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаРодитель) = Тип("ДанныеФормыДерево") Тогда
		Возврат Ложь; 
	КонецЕсли;
	
	#КонецОбласти
	
	ТекущийРодитель = СтрокаРодитель;
	
	Пока ТекущийРодитель <> Неопределено Цикл
		
		Если ТекущийРодитель.Ссылка = ИскомыйОбъект Тогда
			Возврат Истина;
		КонецЕсли;
		
		ТекущийРодитель = ТекущийРодитель.ПолучитьРодителя();
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ПолучитьДеревоЗначенийИзXMLСтроки(XMLСтрока)
	
	ЧтениеXML = Новый ЧтениеXML;
	
	ЧтениеXML.УстановитьСтроку(XMLСтрока);
	ЧтениеXML.Прочитать();
	
	РезультатДерево = Новый ДеревоЗначений;
	РезультатДерево.Колонки.Добавить("Узел");
	РезультатДерево.Колонки.Добавить("Значение");
	
	МассивОткрытыхСтрок = Новый Массив;
	
	ПоследняяОткрытаяСтрока = Неопределено;
	
	Пока ЧтениеXML.Прочитать() Цикл
		
		Если ЧтениеXML.ТипУзла=ТипУзлаXML.НачалоЭлемента Тогда
			
			Если МассивОткрытыхСтрок.Количество() Тогда
				_Родитель = МассивОткрытыхСтрок[МассивОткрытыхСтрок.Количество()-1];
			Иначе
				_Родитель = РезультатДерево;
			КонецЕсли;
			
			ПоследняяОткрытаяСтрока = _Родитель.Строки.Добавить();
			ПоследняяОткрытаяСтрока.Узел = ЧтениеXML.Имя;
			МассивОткрытыхСтрок.Добавить(ПоследняяОткрытаяСтрока);
			
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.Текст Тогда
			
			ПоследняяОткрытаяСтрока.Значение = ЧтениеXML.Значение;
			
		ИначеЕсли ЧтениеXML.ТипУзла=ТипУзлаXML.КонецЭлемента Тогда
			
			Если МассивОткрытыхСтрок.Количество() Тогда
				МассивОткрытыхСтрок.Удалить(МассивОткрытыхСтрок.Количество()-1);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатДерево;
	
КонецФункции 

&НаСервере
Функция УстановленныйРежимЗаписиДокумента()
	
	Если РежимЗаписиДокументаБазы = "Запись" Тогда
		Возврат РежимЗаписиДокумента.Запись;
	ИначеЕсли РежимЗаписиДокументаБазы = "Проведение" Тогда
		Возврат РежимЗаписиДокумента.Проведение;
	ИначеЕсли РежимЗаписиДокументаБазы = "ОтменаПроведения" Тогда
		Возврат РежимЗаписиДокумента.ОтменаПроведения;
	КонецЕсли;
	
	Возврат РежимЗаписиДокумента.Запись;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОбъектыПоКритериюОтбора(ЗначениеКритерияОтбора)
	
	Попытка
		
		Если Метаданные.КритерииОтбора.СвязанныеДокументы.Тип.СодержитТип(ТипЗнч(ЗначениеКритерияОтбора))  Тогда
			
			УстановитьПривилегированныйРежим(Истина);
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СвязанныеДокументы.Ссылка
			|ИЗ
			|	КритерийОтбора.СвязанныеДокументы(&ЗначениеКритерияОтбора) КАК СвязанныеДокументы";
			
			Запрос.УстановитьПараметр("ЗначениеКритерияОтбора", ЗначениеКритерияОтбора);
			
			Возврат Запрос.Выполнить().Выгрузить();
			
		Иначе
			Возврат Неопределено;
		КонецЕсли;
		
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции

&НаСервере
Функция ЭтаОбработка()
	
	Если Навигатор = Неопределено Тогда
		Результат = РеквизитФормыВЗначение("Объект");
	Иначе
		Результат = Навигатор;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтоХранилищеЗначения(ЗначениеРеквизита)
	
	Возврат ТипЗнч(ЗначениеРеквизита) = Тип("ХранилищеЗначения");
	
КонецФункции

#КонецОбласти