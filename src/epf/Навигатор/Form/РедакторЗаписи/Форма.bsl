#Область Форма

#Область События

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Навигатор = ЭтаОбработка();
	
	ОбъектБазы = Параметры.ОбъектБазы;
	
	ПараметрыЗаписиТаблицы = ДанныеФормыВСтруктуру(Параметры);
	ПараметрыЗаписи = ПараметрыЗаписиТаблицы.ПараметрыЗаписи;
	
	Если ПараметрыЗаписи.ТипТаблицы = "ТабличнаяЧасть" Тогда
		
		ДанныеЗаписиОбъекта = ОбъектБазы[ПараметрыЗаписи.ИмяТаблицы][ПараметрыЗаписиТаблицы.ПараметрыЗаписи.НомерЗаписи - 1];
		
		МетаданныеОбъекта = ОбъектБазы.Метаданные();
		
		дз_ДанныеЗаписи = РеквизитФормыВЗначение("ДанныеЗаписи");
		дз_ДанныеЗаписи.Строки.Очистить();
		
		стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
		стр_ДанныеЗаписи.ИмяРеквизита       = "НомерСтроки";
		стр_ДанныеЗаписи.ЗначениеРеквизита  = ПараметрыЗаписиТаблицы.ПараметрыЗаписи.НомерЗаписи;
		стр_ДанныеЗаписи.СинонимРеквизита   = "№";
		стр_ДанныеЗаписи.ТипРеквизита       = "Число";
		стр_ДанныеЗаписи.ПредставлениеТипа  = "Число";
		стр_ДанныеЗаписи.ИндексКартинки     = 44;
		стр_ДанныеЗаписи.ТолькоПросмотр     = Истина;
		
		стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
		стр_ДанныеЗаписи.ИмяРеквизита       = "Регистратор";
		стр_ДанныеЗаписи.ЗначениеРеквизита  = ОбъектБазы;
		стр_ДанныеЗаписи.СинонимРеквизита   = "Регистратор";
		стр_ДанныеЗаписи.ТипРеквизита       = ТипЗнч(ОбъектБазы);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ОбъектБазы));
		
		стр_ДанныеЗаписи.ПредставлениеТипа  = Навигатор.СтрокаОписанияТипов(Новый ОписаниеТипов(МассивТипов));
		стр_ДанныеЗаписи.ИндексКартинки     = 44;
		стр_ДанныеЗаписи.ТолькоПросмотр     = Истина;
		
		Для каждого РеквизитТЧ Из МетаданныеОбъекта.ТабличныеЧасти[ПараметрыЗаписи.ИмяТаблицы].Реквизиты Цикл
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			стр_ДанныеЗаписи.ИмяРеквизита         = РеквизитТЧ.Имя;
			стр_ДанныеЗаписи.ЗначениеРеквизита    = ДанныеЗаписиОбъекта[РеквизитТЧ.Имя];
			стр_ДанныеЗаписи.ТипРеквизита         = РеквизитТЧ.Тип;
			стр_ДанныеЗаписи.СинонимРеквизита     = РеквизитТЧ.Синоним;
			стр_ДанныеЗаписи.КомментарийРеквизита = РеквизитТЧ.Комментарий;
			стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(РеквизитТЧ.Тип);
			стр_ДанныеЗаписи.ИндексКартинки       = 45;
			
		КонецЦикла;
		
	ИначеЕсли ПараметрыЗаписи.ТипТаблицы = "РегистрНакопления" 
		Или ПараметрыЗаписи.ТипТаблицы = "РегистрСведений" 
		Или ПараметрыЗаписи.ТипТаблицы = "РегистрРасчета" Тогда
		
		МетаданныеРегистра = МетаданныеРегистраПоОписанию(ПараметрыЗаписиТаблицы.ПараметрыЗаписи);
		
		ПредставлениеЗаписи = "(.) [" + ПараметрыЗаписи.ТипТаблицы + "][" + ПараметрыЗаписи.ИмяТаблицы + "]";
		
		Если ПараметрыЗаписи.ТипТаблицы = "РегистрНакопления" Или ПараметрыЗаписи.ТипТаблицы = "РегистрРасчета" Тогда
			
			НаборЗаписей = РегистрыНакопления[ПараметрыЗаписи.ИмяТаблицы].СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБазы);
			НаборЗаписей.Прочитать();
			
			НомерЗаписи = Неопределено;
			
			Если Навигатор.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыЗаписиТаблицы, "НомерЗаписи") Тогда
				НомерЗаписи = ПараметрыЗаписиТаблицы.НомерЗаписи - 1;
			ИначеЕсли Навигатор.ЕстьРеквизитИлиСвойствоОбъекта(ПараметрыЗаписиТаблицы, "ПараметрыЗаписи") Тогда
				НомерЗаписи = ПараметрыЗаписиТаблицы.ПараметрыЗаписи.НомерЗаписи - 1;
			КонецЕсли;
			
			ЗаписьРегистра = НаборЗаписей.Получить(НомерЗаписи);
			
		ИначеЕсли ПараметрыЗаписи.ТипТаблицы = "РегистрСведений" Тогда
			
			НаборЗаписей = РегистрыСведений[ПараметрыЗаписи.ИмяТаблицы].СоздатьНаборЗаписей();
			
			Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.ПодчинениеРегистратору Тогда
				
				НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБазы);
				НаборЗаписей.Прочитать();
				
				ЗаписьРегистра = НаборЗаписей.Получить(ПараметрыЗаписиТаблицы.ПараметрыЗаписи.НомерЗаписи - 1);
				ПредставлениеЗаписи = ПредставлениеЗаписи + "[" + ОбъектБазы + "]" + "[" + ПараметрыЗаписиТаблицы.ПараметрыЗаписи.НомерЗаписи - 1 + "]";
				
			Иначе
				
				Если Не (МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический) Тогда
					НаборЗаписей.Отбор.Период.Установить(ПараметрыЗаписиТаблицы.Период);
					ПредставлениеЗаписи = ПредставлениеЗаписи + "[" + ПараметрыЗаписиТаблицы.Период + "]";
				КонецЕсли;
				
				Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
					НаборЗаписей.Отбор[Измерение.Имя].Установить(ПараметрыЗаписиТаблицы.Измерения[Измерение.Имя]);
					ПредставлениеЗаписи = ПредставлениеЗаписи + "[" + ПараметрыЗаписиТаблицы.Измерения[Измерение.Имя] + "]";
				КонецЦикла;
				
				НаборЗаписей.Прочитать();
				
				Попытка
					ЗаписьРегистра = НаборЗаписей.Получить(0);
				Исключение
					
					ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
					
					ТекстСообщения = СтрШаблон(
						"При чтении записи регистра сведений произошла ошибка:
						|%1", ПредставлениеОшибки);
					
					Сообщить(ТекстСообщения);
					
					СтандартнаяОбработка = Ложь;
					Отказ = Истина;
					
					Возврат;
					
				КонецПопытки;
				
			КонецЕсли;
			
			// TODO Сделать общую функцию для отображения конкретной записи в виде XML
			
			// Отобразить данные в виде XML
			
			ДанныеОбъектаXML = "";
			
			ЗаписьXML = Новый ЗаписьXML;
			ЗаписьXML.УстановитьСтроку();
			
			ЗаписатьXML(ЗаписьXML, НаборЗаписей);
			ДанныеОбъектаXML = ЗаписьXML.Закрыть();
			ДанныеОбъектаXMLТекст.УстановитьТекст(ДанныеОбъектаXML);
			
			// Отобразить данные регистрации на узлах обмена
			
			ЗаполнитьИзмененияНаУзлахОбмена(НаборЗаписей);
			
		КонецЕсли;
		
		дз_ДанныеЗаписи = РеквизитФормыВЗначение("ДанныеЗаписи");
		дз_ДанныеЗаписи.Строки.Очистить();
		
		Если ПараметрыЗаписиТаблицы.Свойство("НомерЗаписи") Тогда
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			стр_ДанныеЗаписи.ИмяРеквизита      = "НомерСтроки";
			стр_ДанныеЗаписи.ЗначениеРеквизита = ПараметрыЗаписиТаблицы.НомерЗаписи;
			стр_ДанныеЗаписи.СинонимРеквизита  = "№";
			стр_ДанныеЗаписи.ТипРеквизита      = "Число";
			стр_ДанныеЗаписи.ПредставлениеТипа = "Число";
			стр_ДанныеЗаписи.ИндексКартинки    = 44;
			стр_ДанныеЗаписи.ТолькоПросмотр     = Истина;
			
		КонецЕсли;
		
		Если ПараметрыЗаписиТаблицы.Свойство("Регистратор") Тогда
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			стр_ДанныеЗаписи.ИмяРеквизита       = "Регистратор";
			стр_ДанныеЗаписи.ЗначениеРеквизита  = ОбъектБазы;
			стр_ДанныеЗаписи.СинонимРеквизита   = "Регистратор";
			стр_ДанныеЗаписи.ТипРеквизита       = ТипЗнч(ОбъектБазы);
			стр_ДанныеЗаписи.ТолькоПросмотр     = Истина;
			
			Типы = Новый Массив;
			Типы.Добавить(ТипЗнч(ОбъектБазы));
			
			стр_ДанныеЗаписи.ПредставлениеТипа  = Навигатор.СтрокаОписанияТипов(Новый ОписаниеТипов(Типы));
			стр_ДанныеЗаписи.ИндексКартинки = 44;
			
		КонецЕсли;
		
		Для каждого СтРеквизит Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
			
			Если СтРеквизит.Имя = "НомерСтроки" Тогда
				Продолжить;
			КонецЕсли;
			
			Если СтРеквизит.Имя = "Регистратор" Тогда
				Продолжить;
			КонецЕсли;
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			
			стр_ДанныеЗаписи.ИмяРеквизита         = СтРеквизит.Имя;
			стр_ДанныеЗаписи.ЗначениеРеквизита    = ЗаписьРегистра[СтРеквизит.Имя];
			стр_ДанныеЗаписи.ТипРеквизита         = СтРеквизит.Тип;
			стр_ДанныеЗаписи.СинонимРеквизита     = СтРеквизит.Синоним;
			стр_ДанныеЗаписи.КомментарийРеквизита = СтРеквизит.Комментарий;
			стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(СтРеквизит.Тип);
			стр_ДанныеЗаписи.ИндексКартинки       = 44;
			
		КонецЦикла;
		
		Для каждого Измерение Из МетаданныеРегистра.Измерения Цикл
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			
			стр_ДанныеЗаписи.ИмяРеквизита         = Измерение.Имя;
			стр_ДанныеЗаписи.ЗначениеРеквизита    = ЗаписьРегистра[Измерение.Имя];
			стр_ДанныеЗаписи.ТипРеквизита         = Измерение.Тип;
			стр_ДанныеЗаписи.СинонимРеквизита     = Измерение.Синоним;
			стр_ДанныеЗаписи.КомментарийРеквизита = Измерение.Комментарий;
			стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(Измерение.Тип);
			стр_ДанныеЗаписи.ИндексКартинки       = 47;
			
		КонецЦикла;
		
		Для каждого Ресурс Из МетаданныеРегистра.Ресурсы Цикл
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			
			стр_ДанныеЗаписи.ИмяРеквизита         = Ресурс.Имя;
			стр_ДанныеЗаписи.ЗначениеРеквизита    = ЗаписьРегистра[Ресурс.Имя];
			стр_ДанныеЗаписи.ТипРеквизита         = Ресурс.Тип;
			стр_ДанныеЗаписи.СинонимРеквизита     = Ресурс.Синоним;
			стр_ДанныеЗаписи.КомментарийРеквизита = Ресурс.Комментарий;
			стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(Ресурс.Тип);
			стр_ДанныеЗаписи.ИндексКартинки       = 48;
			
		КонецЦикла;
		
		Для каждого Реквизит Из МетаданныеРегистра.Реквизиты Цикл
			
			стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
			
			стр_ДанныеЗаписи.ИмяРеквизита         = Реквизит.Имя;
			стр_ДанныеЗаписи.ЗначениеРеквизита    = ЗаписьРегистра[Реквизит.Имя];
			стр_ДанныеЗаписи.ТипРеквизита         = Реквизит.Тип;
			стр_ДанныеЗаписи.СинонимРеквизита     = Реквизит.Синоним;
			стр_ДанныеЗаписи.КомментарийРеквизита = Реквизит.Комментарий;
			стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(Реквизит.Тип);
			стр_ДанныеЗаписи.ИндексКартинки       = 45;
			
		КонецЦикла;
		
		Если ПараметрыЗаписи.ТипТаблицы = "РегистрРасчета" Тогда
			
			Для каждого Перерасчет Из МетаданныеРегистра.Перерасчеты Цикл
				
				стр_ДанныеЗаписи = дз_ДанныеЗаписи.Строки.Добавить();
				
				стр_ДанныеЗаписи.ИмяРеквизита         = Перерасчет.Имя;
				стр_ДанныеЗаписи.ЗначениеРеквизита    = ЗаписьРегистра[Перерасчет.Имя];
				стр_ДанныеЗаписи.ТипРеквизита         = Перерасчет.Тип;
				стр_ДанныеЗаписи.СинонимРеквизита     = Перерасчет.Синоним;
				стр_ДанныеЗаписи.КомментарийРеквизита = Перерасчет.Комментарий;
				стр_ДанныеЗаписи.ПредставлениеТипа    = Навигатор.СтрокаОписанияТипов(Перерасчет.Тип);
				стр_ДанныеЗаписи.ИндексКартинки       = 45; // Надо картинку перерасчета
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	дз_ДанныеЗаписиДоИзменения = РеквизитФормыВЗначение("ДанныеЗаписиДоИзменения");
	дз_ДанныеЗаписиДоИзменения.Строки.Очистить();
	
	Для каждого стр_ДанныеЗаписи Из дз_ДанныеЗаписи.Строки Цикл
		стр_ДанныеЗаписиДоИзменения = дз_ДанныеЗаписиДоИзменения.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(стр_ДанныеЗаписиДоИзменения, стр_ДанныеЗаписи);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_ДанныеЗаписи, "ДанныеЗаписи");
	ЗначениеВРеквизитФормы(дз_ДанныеЗаписиДоИзменения, "ДанныеЗаписиДоИзменения");
	
	ПредставлениеЗаписи = "";
	Заголовок = ПараметрыЗаписи.ТипТаблицы + "." + ПараметрыЗаписи.ИмяТаблицы;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор" Тогда
		
		Если ИмяСобытия = "ЗакрытьВсеОкнаРедакторов" Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	РазвернутьЭлементыДереваЗначений(ДеревоУзловОбмена, "ДеревоУзловОбмена");
	
КонецПроцедуры

#КонецОбласти

#Область Команда

&НаКлиенте
Процедура КомандаЗаписатьИзменения(Команда)
	
	ЗаписьИзменена = Ложь;
	ПредставлениеОшибки = "";
	
	ЗаписатьИзменения(ЗаписьИзменена, ПредставлениеОшибки);
	
	Если ЗаписьИзменена Тогда
		ПоказатьОповещениеПользователя("Изменение", , "Запись регистра сведений успешно изменена.", Элементы.КартинкаУспешно32.Картинка);
	Иначе
		
		Если ЗначениеЗаполнено(ПредставлениеОшибки) Тогда
			Пояснение = СтрШаблон(
				"При изменении записи регистра произошла ошибка:
				|%1", ПредставлениеОшибки);
		Иначе
			Пояснение = "При изменении записи регистра произошла ошибка.";
		КонецЕсли;
		
		ПоказатьОповещениеПользователя("Изменение", , Пояснение, Элементы.КартинкаОшибка32.Картинка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьЗапись(Команда)
	
	ТекстВопроса = "";
	ТекстЗаголовка = "";
	
	Если ПараметрыЗаписи.ТипТаблицы = "ТабличнаяЧасть" Тогда
		ТекстВопроса = "Удалить строку табличной части?";
		ТекстЗаголовка = "Удаление строки";
	Иначе
		ТекстВопроса = "Удалить запись регистра?";
		ТекстЗаголовка = "Удаление записи";
	КонецЕсли; 
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("КомандаУдалитьЗаписьЗавершение", ЭтаФорма),
		ТекстВопроса, 
		РежимДиалогаВопрос.ДаНет, 
		120, 
		КодВозвратаДиалога.Нет, 
		ТекстЗаголовка
	);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаУдалитьЗаписьЗавершение(РезультатВопроса, ДпПараметры) Экспорт
	
	#Область Предусловия
	
	Если РезультатВопроса = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	УдалитьЗапись();
	
	Закрыть();
	
КонецПроцедуры

#КонецОбласти 

#Область Таблицы

#Область ДанныеЗаписи

&НаКлиенте
Процедура ДанныеЗаписиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ДанныеЗаписи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле.Имя = "ДанныеЗаписиПредставлениеТипа" Тогда
		
		ОпределительСписка = ТекущиеДанные.ПредставлениеТипа;
		Оповестить("ОткрытьСписокЭлементов", ОпределительСписка, "Навигатор_ФормаРедакторЗаписи");
		
	Иначе
		
		ИмяРеквизитаДЗ = Сред(Поле.Имя, СтрДлина("ДанныеЗаписи") + 1);
		
		ЗначениеРеквизита = ТекущиеДанные[ИмяРеквизитаДЗ];
		ПараметрыОткрытия = Новый Структура("ОбъектБазы", ЗначениеРеквизита);
		
		ИмяФормыРедактора = ИмяФормыРедактораЗначения(ЗначениеРеквизита);
		
		Если Не ЗначениеЗаполнено(ИмяФормыРедактора) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("ОбъектБазы", ЗначениеРеквизита);
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, ИмяФормыРедактора);
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеЗаписиЗначениеРеквизитаПриИзменении(Элемент)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ДанныеЗаписи.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ТекущиеДанные.Изменен = Истина;
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#КонецОбласти

#Область Методы

#Область ИнтерфейсНавигатора

&НаСервере
Функция ИмяФормыРедактораЗначения(ЗначениеДляРедактирования)
	Возврат ЭтаОбработка().ИмяФормыРедактораЗначения(ЗначениеДляРедактирования);
КонецФункции

#КонецОбласти

&НаСервере
Процедура ЗаполнитьИзмененияНаУзлахОбмена(ЗаписьРегистра)
	
	Навигатор = ЭтаОбработка();
	
	дз_ДеревоУзловОбмена = РеквизитФормыВЗначение("ДеревоУзловОбмена");
	
	Навигатор.ЗаполнитьИзмененияНаУзлахОбмена(ЗаписьРегистра, дз_ДеревоУзловОбмена);
	
	ЗначениеВРеквизитФормы(дз_ДеревоУзловОбмена, "ДеревоУзловОбмена");
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьЭлементыДереваЗначений(ДеревоЗначений, ИмяЭлементаФормы)
	
	ЭлементыДерева = ДеревоЗначений.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы[ИмяЭлементаФормы].Развернуть(ИдЭлемента, Истина);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ДанныеФормыВСтруктуру(ДанныеФормы) Экспорт
	
	Массив = Новый Массив;
	Массив.Добавить(ДанныеФормы);
	
	Запись = Новый ЗаписьFastInfoset;
	Запись.УстановитьДвоичныеДанные();
	
	СериализаторXDTO.ЗаписатьXML(Запись, Массив);
	
	Чтение = Новый ЧтениеFastInfoset;
	Чтение.УстановитьДвоичныеДанные(Запись.Закрыть());
	Результат = Новый Структура;
	
	Пока Чтение.Прочитать() Цикл
		
		Если Чтение.Имя = "field" И Чтение.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
			
			ИмяПоля = Чтение.ЗначениеАтрибута("nameRu");
			
			Если ИмяПоля = Неопределено Тогда
				ИмяПоля = Чтение.ЗначениеАтрибута("name");
			КонецЕсли;
			
			Если ИмяПоля <> Неопределено Тогда
				Результат.Вставить(ИмяПоля);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЗаполнитьЗначенияСвойств(Результат, ДанныеФормы);
	Возврат Результат
	
КонецФункции

&НаСервере
Процедура ЗаписатьИзменения(ЗаписьИзменена, ПредставлениеОшибки = "")
	
	дз_ДанныеЗаписи = РеквизитФормыВЗначение("ДанныеЗаписи");
	
	Если (ПараметрыЗаписи.ТипТаблицы = "ТабличнаяЧасть") Тогда
		
		ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
		СтрокаТаблЧасти = ДанныеОбъекта[ПараметрыЗаписи.ИмяТаблицы][ПараметрыЗаписи.НомерЗаписи - 1];
		
		ОбъектБазыМд = ОбъектБазы.Метаданные();
		
		Для каждого РеквизитТЧ Из ОбъектБазыМд.ТабличныеЧасти[ПараметрыЗаписи.ИмяТаблицы].Реквизиты Цикл
			
			стр_ДанныеЗаписиИзм = дз_ДанныеЗаписи.Строки.Найти(РеквизитТЧ.Имя, "ИмяРеквизита");
			
			Если стр_ДанныеЗаписиИзм.Изменен = Ложь Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаТаблЧасти[РеквизитТЧ.Имя] = стр_ДанныеЗаписиИзм.ЗначениеРеквизита;
			
		КонецЦикла;
		
		Если ДанныеОбъекта.Модифицированность() Тогда
			ДанныеОбъекта.Записать();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыЗаписи.ТипТаблицы = "РегистрНакопления" Тогда
			
			Регистр = РегистрыНакопления[ПараметрыЗаписи.ИмяТаблицы];
			МетаданныеРегистра = Метаданные.РегистрыНакопления[ПараметрыЗаписи.ИмяТаблицы];
			
			НаборЗаписей = Регистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБазы);
			НаборЗаписей.Прочитать();
			
			ЗаписьРегистра = НаборЗаписей.Получить(ПараметрыЗаписи.НомерЗаписи - 1);
			
			Для каждого СтРеквизитРг Из МетаданныеРегистра.СтандартныеРеквизиты Цикл
				
				стр_ДанныеЗаписиИзм = дз_ДанныеЗаписи.Строки.Найти(СтРеквизитРг.Имя, "ИмяРеквизита");
				
				Если стр_ДанныеЗаписиИзм.Изменен = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьРегистра[СтРеквизитРг.Имя] = стр_ДанныеЗаписиИзм.ЗначениеРеквизита;
				
			КонецЦикла;
			
			Для каждого ИзмерениеРг Из МетаданныеРегистра.Измерения Цикл
				
				стр_ДанныеЗаписиИзм = дз_ДанныеЗаписи.Строки.Найти(ИзмерениеРг.Имя, "ИмяРеквизита");
				
				Если стр_ДанныеЗаписиИзм.Изменен = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьРегистра[ИзмерениеРг.Имя] = стр_ДанныеЗаписиИзм.ЗначениеРеквизита;
				
			КонецЦикла;
			
			Для каждого РеквизитРг Из МетаданныеРегистра.Реквизиты Цикл
				
				стр_ДанныеЗаписиИзм = дз_ДанныеЗаписи.Строки.Найти(РеквизитРг.Имя, "ИмяРеквизита");
				
				Если стр_ДанныеЗаписиИзм.Изменен = Ложь Тогда
					Продолжить;
				КонецЕсли;
				
				ЗаписьРегистра[РеквизитРг.Имя] = стр_ДанныеЗаписиИзм.ЗначениеРеквизита;
				
			КонецЦикла;
			
			Если НаборЗаписей.Модифицированность() Тогда
				
				НаборЗаписей.Записать(Истина);
				Модифицированность = Ложь;
				
			КонецЕсли;
			
		ИначеЕсли ПараметрыЗаписи.ТипТаблицы = "РегистрСведений" Тогда
			
			Регистр = РегистрыСведений[ПараметрыЗаписи.ИмяТаблицы];
			МетаданныеРегистра = Метаданные.РегистрыСведений[ПараметрыЗаписи.ИмяТаблицы];
			
			дз_ДанныеЗаписи = РеквизитФормыВЗначение("ДанныеЗаписи");
			дз_ДанныеЗаписиДоИзменения = РеквизитФормыВЗначение("ДанныеЗаписиДоИзменения");
			
			МенеджерЗаписиДоИзменения = Регистр.СоздатьМенеджерЗаписи();
			МенеджерЗаписиПослеИзменения = Регистр.СоздатьМенеджерЗаписи();
			
			ЭтоПериодическийРегистр = 
				Не (МетаданныеРегистра.ПериодичностьРегистраСведений = Метаданные.СвойстваОбъектов.ПериодичностьРегистраСведений.Непериодический);
			
			Если МетаданныеРегистра.РежимЗаписи = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый Тогда
				
				Для каждого стр_ДанныеЗаписиДоИзменения Из дз_ДанныеЗаписиДоИзменения.Строки Цикл
					
					Если стр_ДанныеЗаписиДоИзменения.ИмяРеквизита = "Период" И ЭтоПериодическийРегистр Тогда
						МенеджерЗаписиДоИзменения["Период"] = стр_ДанныеЗаписиДоИзменения["ЗначениеРеквизита"];
						Продолжить;
					КонецЕсли;
					
					ИзмерениеРС = МетаданныеРегистра.Измерения.Найти(стр_ДанныеЗаписиДоИзменения.ИмяРеквизита);
					
					Если (ИзмерениеРС = Неопределено) Тогда
						Продолжить;
					КонецЕсли;
					
					МенеджерЗаписиДоИзменения[ИзмерениеРС.Имя] = стр_ДанныеЗаписиДоИзменения["ЗначениеРеквизита"];
					
				КонецЦикла;
				
				Для каждого стр_ДанныеЗаписи Из дз_ДанныеЗаписи.Строки Цикл
					
					Если стр_ДанныеЗаписи.ИмяРеквизита = "Период" И ЭтоПериодическийРегистр Тогда
						МенеджерЗаписиПослеИзменения["Период"] = стр_ДанныеЗаписи["ЗначениеРеквизита"];
						Продолжить;
					КонецЕсли;
					
					ИзмерениеРС = МетаданныеРегистра.Измерения.Найти(стр_ДанныеЗаписи.ИмяРеквизита);
					
					Если Не (ИзмерениеРС = Неопределено) Тогда
						МенеджерЗаписиПослеИзменения[ИзмерениеРС.Имя] = стр_ДанныеЗаписи["ЗначениеРеквизита"];
						Продолжить;
					КонецЕсли;
					
					РесурсРС = МетаданныеРегистра.Ресурсы.Найти(стр_ДанныеЗаписи.ИмяРеквизита);
					
					Если Не (РесурсРС = Неопределено) Тогда
						МенеджерЗаписиПослеИзменения[РесурсРС.Имя] = стр_ДанныеЗаписи["ЗначениеРеквизита"];
						Продолжить;
					КонецЕсли;
					
					РеквизитРС = МетаданныеРегистра.Реквизиты.Найти(стр_ДанныеЗаписи.ИмяРеквизита);
					
					Если Не (РеквизитРС = Неопределено) Тогда
						МенеджерЗаписиПослеИзменения[РеквизитРС.Имя] = стр_ДанныеЗаписи["ЗначениеРеквизита"];
						Продолжить;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЕсли;
			
			МенеджерЗаписиДоИзменения.Прочитать();
			
			Если Не МенеджерЗаписиДоИзменения.Выбран() Тогда
				ВызватьИсключение("Не удалось инициализировать менеджер исходной записи регистра.");
			КонецЕсли;
			
			ЗаписьИзменена = Ложь;
			
			НачатьТранзакцию();
			
			МенеджерЗаписиДоИзменения.Удалить();
			МенеджерЗаписиПослеИзменения.Записать();
			
			Попытка
				ЗафиксироватьТранзакцию();
				ЗаписьИзменена = Истина;
			Исключение
				ОтменитьТранзакцию();
				ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
			КонецПопытки;
			
			Если ЗаписьИзменена Тогда
				Модифицированность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтрДанныеЗаписи = дз_ДанныеЗаписи.Строки.НайтиСтроки(Новый Структура("Изменен", Истина));
	
	Для каждого стр_ДанныеЗаписи Из СтрДанныеЗаписи Цикл
		стр_ДанныеЗаписи.Изменен = Ложь;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_ДанныеЗаписи, "ДанныеЗаписи");
	
КонецПроцедуры

&НаСервере
Функция МетаданныеРегистраПоОписанию(ПараметрыТаблицы)
	
	Навигатор = ЭтаОбработка();
	Возврат Навигатор.МетаданныеРегистраПоОписанию(ПараметрыТаблицы);
	
КонецФункции

&НаСервере
Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки)
	
	Результат = ЭтаОбработка().ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки);
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УдалитьЗапись()
	
	Если (ПараметрыЗаписи.ТипТаблицы = "ТабличнаяЧасть") Тогда
		
		ДанныеОбъекта = ОбъектБазы.ПолучитьОбъект();
		СтрокаТаблЧасти = ДанныеОбъекта[ПараметрыЗаписи.ИмяТаблицы][ПараметрыЗаписи.НомерЗаписи - 1];
		
		Попытка
			ДанныеОбъекта[ПараметрыЗаписи.ИмяТаблицы].Удалить(СтрокаТаблЧасти);
		Исключение
			//
		КонецПопытки;
		
		Если ДанныеОбъекта.Модифицированность() Тогда
			ДанныеОбъекта.Записать();
			Модифицированность = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если ПараметрыЗаписи.ТипТаблицы = "РегистрНакопления" Или ПараметрыЗаписи.ТипТаблицы = "РегистрСведений" Тогда
			
			Если ПараметрыЗаписи.ТипТаблицы = "РегистрНакопления" Тогда
				Регистр = РегистрыНакопления[ПараметрыЗаписи.ИмяТаблицы];
				МетаданныеРегистра = Метаданные.РегистрыНакопления[ПараметрыЗаписи.ИмяТаблицы];
			ИначеЕсли ПараметрыЗаписи.ТипТаблицы = "РегистрСведений" Тогда
				Регистр = РегистрыСведений[ПараметрыЗаписи.ИмяТаблицы];
				МетаданныеРегистра = Метаданные.РегистрыСведений[ПараметрыЗаписи.ИмяТаблицы];
			КонецЕсли;
			
			НаборЗаписей = Регистр.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(ОбъектБазы);
			НаборЗаписей.Прочитать();
			
			ЗаписьРегистра = НаборЗаписей.Получить(ПараметрыЗаписи.НомерЗаписи - 1);
			
			НаборЗаписей.Удалить(ЗаписьРегистра);
			
			Если НаборЗаписей.Модифицированность() Тогда
				НаборЗаписей.Записать(Истина);
				Модифицированность = Ложь;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтаОбработка()
	
	Результат = РеквизитФормыВЗначение("Объект");
	Возврат Результат;
	
КонецФункции

#КонецОбласти
