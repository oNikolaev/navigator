#Область Форма

#Область События

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СчетчикФайловКода = 0;
	
	НовыйРедакторКода();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор" Тогда
		
		Если ИмяСобытия = "ЗакрытьВсеОкнаРедакторов" Тогда
			Закрыть();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	ЕстьМодифицированные = ЕстьМодифицированныеРедакторы();
	
	Если ЕстьМодифицированные И Не ЗакрытиеПодтверждено Тогда
		
		Если Не ЗавершениеРаботы Тогда
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			
			Оповещение = Новый ОписаниеОповещения("ВопросНесохраненныеРедакторыПослеЗакрытияОкнаВвода", ЭтаФорма);
			ПоказатьВопрос(Оповещение, "Есть несохраненные редакторы. Хотите сохранить изменения?", РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область Элементы

&НаКлиенте
Процедура СтраницыИсполняемыйКодПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущийТипВыполнения = ТипВыполненияТекущегоРедактора();
	УстановитьЗаголовокКомандыВыполнения(ТекущийТипВыполнения);
	
	УстановитьТекущийТипВыполнения(ТекущийТипВыполнения);
	УстановитьТекущийФайлАктивногоРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодПриИзменении(Элемент) Экспорт
	
	ПриИзмененииТекстаИсполняемогоКода(Элемент.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура ИмяФайлаАктивногоРедактораНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла", ИмяФайлаАктивногоРедактора);
	Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыВнешнегоРедактораКода", ЭтотОбъект, ДополнительныеПараметры);
	
	НачатьЗапускПриложения(Оповещение, ИмяФайлаАктивногоРедактора, , Истина);
	
КонецПроцедуры

#КонецОбласти

#Область Таблицы

#Область ИмяТаблицы
#КонецОбласти

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура КомандаВыполнитьКод(Команда)
	
	ИсполняемыйКодВыполнить(ТекущийТипВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодВыполнитьНаКлиенте(Команда)
	
	ИсполняемыйКодВыполнить("НаКлиенте");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодВыполнитьНаСервере(Команда)
	
	ИсполняемыйКодВыполнить("НаСервере");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаФрагментОткрытьФорму(Команда)
	
	//Если ЗначениеЗаполнено(ИсполняемыйКод1) Тогда
	//	ИсполняемыйКод1 = ИсполняемыйКод1 + "
	//	|ОткрытьФорму(<ИмяФормы>, <Параметры>, <Владелец>, <Уникальность>, <Окно>, <НавигационнаяСсылка>, <ОписаниеОповещенияОЗакрытии>, <РежимОткрытияОкна>);";
	//Иначе
	//	ИсполняемыйКод1 = "ОткрытьФорму(<ИмяФормы>, <Параметры>, <Владелец>, <Уникальность>, <Окно>, <НавигационнаяСсылка>, <ОписаниеОповещенияОЗакрытии>, <РежимОткрытияОкна>);";
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодСохранить(Команда)
	
	СохранитьИсполняемыйКод();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодСохранитьКак(Команда)
	
	ИсполняемыйКодСохранитьКак();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодОткрыть(Команда)
	
	ИсполняемыйКодОткрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНовыйРедакторКода(Команда)
	
	НовыйРедакторКода();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодСохранитьВсе(Команда)
	
	ИсполняемыйКодСохранитьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсполняемыйКодЗакрыть(Команда)
	
	ИсполняемыйКодЗакрыть();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область Процедуры

&НаКлиенте
Процедура ВопросНесохраненныеРедакторыПослеЗакрытияОкнаВвода(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ЗакрытиеПодтверждено = Истина;
		Закрыть();
	Иначе
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТекстаИсполняемогоКода(ИмяЭлемента)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлемента) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	УстановитьПометкуМодифицированностиАктивногоРедактора(Истина);
	УстановитьЗаголовокСтраницыАктивногоРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийТипВыполнения(ТипВыполнения)
	
	ТекущийТипВыполнения = ТипВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущийФайлАктивногоРедактора()
	
	ИмяФайлаАктивногоРедактора = "";
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	ИмяФайлаАктивногоРедактора = стр_МенеджерРедактора.ИмяФайла;
	
	УстановитьВидимостьИмениФайлаАктивногоРедактораКода(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокКомандыВыполнения(ТипВыполнения)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Элементы.КомандаВыполнитьКод.Заголовок = ТипВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодВыполнить(ТипВыполнения)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ТипВыполнения) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	РеквизитАктивногоРедактора = ИмяРеквизитаАктивногоРедактора();
	
	Если ТипВыполнения = "НаКлиенте" Тогда
		ИсполняемыйКодВыполнитьНаКлиенте(РеквизитАктивногоРедактора);
	ИначеЕсли ТипВыполнения = "НаСервере" Тогда
		ИсполняемыйКодВыполнитьНаСервере(РеквизитАктивногоРедактора);
	КонецЕсли;
	
	УстановитьЗаголовокКомандыВыполнения(ТипВыполнения);
	УстановитьТекущийТипВыполнения(ТипВыполнения);
	УстановитьРежимВыполненияАктивногоРедактора(ТипВыполнения);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодВыполнитьНаКлиенте(РеквизитАктивногоРедактора)
	
	#Область Предусловия
	
	Код = ЭтаФорма[РеквизитАктивногоРедактора];
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		Выполнить(Код);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьКак()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Расширение = "bsl";
	ДиалогВыбораФайла.Фильтр = "Код 1С:Предприятие (*.bsl)|*.bsl";
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИсполняемыйКодСохранитьКакПослеЗакрытияДиалога", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьКакПослеЗакрытияДиалога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если (ВыбранныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ВыбранныеФайлы.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяРеквизита = ИмяРеквизитаАктивногоРедактора();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ЭтаФорма[ИмяРеквизита]);
	ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения("ИсполняемыйКодСохранитьКакПослеЗакрытияДиалогаПродолжение", ЭтаФорма, Новый Структура("ПолноеИмяФайла", ПолноеИмяФайла)), ПолноеИмяФайла, "utf-8");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьКакПослеЗакрытияДиалогаПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	ИмяФайлаАктивногоРедактора = ДополнительныеПараметры.ПолноеИмяФайла;
	
	УстановитьИмяФайлаАктивногоРедактора(ДополнительныеПараметры.ПолноеИмяФайла);
	УстановитьПометкуМодифицированностиАктивногоРедактора(Ложь);
	УстановитьЗаголовокСтраницыАктивногоРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранить()
	
	ИмяРеквизита = ИмяРеквизитаАктивногоРедактора();
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ЭтаФорма[ИмяРеквизита]);
	ТекстовыйДокумент.НачатьЗапись(Новый ОписаниеОповещения("ИсполняемыйКодСохранитьПродолжение", ЭтаФорма, Новый Структура("ПолноеИмяФайла", ИмяФайлаАктивногоРедактора)), ИмяФайлаАктивногоРедактора, "utf-8");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьПометкуМодифицированностиАктивногоРедактора(Ложь);
	УстановитьЗаголовокСтраницыАктивногоРедактора();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьВсе()
	
	Для каждого стр_МенеджерРедактора Из МенеджерРедактора Цикл
		
		Если Не (стр_МенеджерРедактора.Модифицированность) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(стр_МенеджерРедактора.ИмяФайла) Тогда
			ИсполняемыйКодСохранитьНеИнтерактивно(стр_МенеджерРедактора.ИмяРеквизита, стр_МенеджерРедактора.ИмяФайла);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьНеИнтерактивно(ИмяРеквизита, ИмяФайла)
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	ТекстовыйДокумент.УстановитьТекст(ЭтаФорма[ИмяРеквизита]);
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ПолноеИмяФайла", ИмяФайла);
	ДополнительныеПараметры.Вставить("ИмяРеквизита", ИмяРеквизита);
	
	Оповещение = Новый ОписаниеОповещения("ИсполняемыйКодСохранитьНеИнтерактивноПродолжение", ЭтаФорма, ДополнительныеПараметры);
	
	ТекстовыйДокумент.НачатьЗапись(Оповещение, ИмяФайла, "utf-8");
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодСохранитьНеИнтерактивноПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьПометкуМодифицированностиРедактора(ДополнительныеПараметры.ИмяРеквизита, Ложь);
	УстановитьЗаголовокСтраницыРедактора(ДополнительныеПараметры.ИмяРеквизита);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодОткрыть()
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Расширение = "bsl";
	ДиалогВыбораФайла.Фильтр = "Код 1С:Предприятие (*.bsl)|*.bsl";
	ДиалогВыбораФайла.МножественныйВыбор = Истина;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ИсполняемыйКодОткрытьПослеЗакрытияДиалога", ЭтаФорма));
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодОткрытьПослеЗакрытияДиалога(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	#Область Предусловия
	
	Если (ВыбранныеФайлы = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если (ВыбранныеФайлы.Количество() = 0) Тогда
		Возврат;
	КонецЕсли;
	
	ПолноеИмяФайла = ВыбранныеФайлы[0];
	
	Если Не ЗначениеЗаполнено(ПолноеИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Для каждого ПолноеИмяФайла Из ВыбранныеФайлы Цикл
		
		ТекстовыйДокумент = Новый ТекстовыйДокумент;
		
		ПараметрыПродолжение = Новый Структура();
		ПараметрыПродолжение.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
		ПараметрыПродолжение.Вставить("ПолноеИмяФайла", ПолноеИмяФайла);
		
		Оповещение = Новый ОписаниеОповещения("ИсполняемыйКодОткрытьПослеЗакрытияДиалогаПродолжение", ЭтаФорма, ПараметрыПродолжение);
		ТекстовыйДокумент.НачатьЧтение(Оповещение, ПолноеИмяФайла, "utf-8");
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодПослеЗавершенияРаботыВнешнегоРедактораПродолжениеБезСохранения(ДополнительныеПараметры) Экспорт
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ДополнительныеПараметры.ИдентификаторРедактора);
	ИмяРеквизита = стр_МенеджерРедактора.ИмяРеквизита;
	
	ЭтаФорма[ИмяРеквизита] = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
	УстановитьПометкуМодифицированностиРедактора(ИмяРеквизита, Ложь);
	
	НачатьУдалениеФайлов(, ДополнительныеПараметры.ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодОткрытьПослеЗакрытияДиалогаПродолжение(ДополнительныеПараметры) Экспорт
	
	// Надо искать по файлу в менеджере.
	// Если такой файл уже открыт - переключаться на закладку.
	// Если нет - создавать новый файл и открывать в нем.
	
	ИндексСтроки = ИндексСтрокиРедактораПоИмениФайла(ДополнительныеПараметры.ПолноеИмяФайла); // "C:\Develop\Mango\scripts\Заполнение движений по поступлениям.bsl"
	
	Если ИндексСтроки = -1 Тогда // Создать новый редактор кода
		
		ИмяРеквизита = "";
		
		НовыйРедакторКода(ИмяРеквизита);
		
		ЭтаФорма[ИмяРеквизита] = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
		
		УстановитьИмяФайлаРедактора(ИмяРеквизита, ДополнительныеПараметры.ПолноеИмяФайла);
		УстановитьЗаголовокСтраницыРедактора(ИмяРеквизита);
		
	Иначе
		
		стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
		ИмяРеквизита = стр_МенеджерРедактора.ИмяРеквизита;
		
		ЭтаФорма[ИмяРеквизита] = ДополнительныеПараметры.ТекстовыйДокумент.ПолучитьТекст();
		ИмяФайлаАктивногоРедактора = ДополнительныеПараметры.ПолноеИмяФайла;
		
		УстановитьИмяФайлаРедактора(ИмяРеквизита, ДополнительныеПараметры.ПолноеИмяФайла);
		УстановитьПометкуМодифицированностиРедактора(ИмяРеквизита, Ложь);
		УстановитьЗаголовокСтраницыРедактора(ИмяРеквизита);
		УстановитьВидимостьИмениФайлаАктивногоРедактораКода(ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРежимВыполненияАктивногоРедактора(ТипВыполнения)
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	стр_МенеджерРедактора.ТипВыполнения = ТипВыполнения;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуМодифицированностиРедактора(ИмяРеквизита, Пометка)
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиРедактора(ИмяРеквизита);
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	стр_МенеджерРедактора.Модифицированность = Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуМодифицированностиАктивногоРедактора(Пометка)
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	стр_МенеджерРедактора.Модифицированность = Пометка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокСтраницыРедактора(ИмяРеквизита)
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиРедактора(ИмяРеквизита);
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	
	Страница = Элементы[стр_МенеджерРедактора.ИмяСтраницы];
	
	//
	
	Если ЗначениеЗаполнено(стр_МенеджерРедактора.ИмяФайла) Тогда
		ЧастиИмени = РазложитьСтрокуВМассивПодстрок(стр_МенеджерРедактора.ИмяФайла, "\");
		ТекстЗаголовка = ЧастиИмени[ЧастиИмени.Количество() - 1];
	Иначе
		ТекстЗаголовка = Страница.Заголовок;
	КонецЕсли;
	
	//
	
	ЕстьПометка = стр_МенеджерРедактора.Модифицированность;
	
	ЕстьПометкаВЗаголовке = (Лев(СокрЛП(ТекстЗаголовка), 1) = "*");
	
	Если ЕстьПометка И Не ЕстьПометкаВЗаголовке Тогда
		ТекстЗаголовка = "* " + ТекстЗаголовка;
	ИначеЕсли Не ЕстьПометка И ЕстьПометкаВЗаголовке Тогда
		ТекстЗаголовка = Сред(ТекстЗаголовка, 2);
	КонецЕсли;
	
	Страница.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовокСтраницыАктивногоРедактора()
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	
	ТекущаяСтраница = Элементы.СтраницыИсполняемыйКод.ТекущаяСтраница;
	
	//
	
	Если ЗначениеЗаполнено(ИмяФайлаАктивногоРедактора) Тогда
		ЧастиИмени = РазложитьСтрокуВМассивПодстрок(ИмяФайлаАктивногоРедактора, "\");
		ТекстЗаголовка = ЧастиИмени[ЧастиИмени.Количество() - 1];
	Иначе
		ТекстЗаголовка = ТекущаяСтраница.Заголовок;
	КонецЕсли;
	
	//
	
	ЕстьПометка = стр_МенеджерРедактора.Модифицированность;
	
	ЕстьПометкаВЗаголовке = (Лев(СокрЛП(ТекстЗаголовка), 1) = "*");
	
	Если ЕстьПометка И Не ЕстьПометкаВЗаголовке Тогда
		ТекстЗаголовка = "* " + ТекстЗаголовка;
	ИначеЕсли Не ЕстьПометка И ЕстьПометкаВЗаголовке Тогда
		ТекстЗаголовка = Сред(ТекстЗаголовка, 2);
	КонецЕсли;
	
	ТекущаяСтраница.Заголовок = ТекстЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИмяФайлаРедактора(ИмяРеквизита, ИмяФайла)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ИндексСтрокиРедактора(ИмяРеквизита);
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	стр_МенеджерРедактора.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИмяФайлаАктивногоРедактора(ИмяФайла)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяФайла) Тогда
		Возврат;
	КонецЕсли;
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	стр_МенеджерРедактора.ИмяФайла = ИмяФайла;
	
КонецПроцедуры

&НаСервере
Процедура ИсполняемыйКодВыполнитьНаСервере(РеквизитАктивногоРедактора)
	
	#Область Предусловия
	
	Код = ЭтаФорма[РеквизитАктивногоРедактора];
	
	Если Не ЗначениеЗаполнено(Код) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		Выполнить(Код);
	Исключение
		Сообщить(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область Классы

#Область Редактор

#Область События

&НаКлиенте
Процедура ПослеЗавершенияРаботыВнешнегоРедактораКода(КодВозврата, ДополнительныеПараметры) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ПараметрыПродолжение = Новый Структура();
	ПараметрыПродолжение.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ПараметрыПродолжение.Вставить("ПолноеИмяФайла", ДополнительныеПараметры.ПолноеИмяФайла);
	
	Оповещение = Новый ОписаниеОповещения("ИсполняемыйКодОткрытьПослеЗакрытияДиалогаПродолжение", ЭтаФорма, ПараметрыПродолжение);
	
	ТекстовыйДокумент.НачатьЧтение(Оповещение, ДополнительныеПараметры.ПолноеИмяФайла, "utf-8");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоВнешнемРедактореБезСохраненияПослеЗаписиВремФайла(Результат, ДополнительныеПараметры) Экспорт
	
	Если (Результат = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Результат Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыВнешнегоРедактораКодаБезСохранения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьЗапускПриложения(Оповещение, ДополнительныеПараметры.ПолноеИмяФайла, , Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗавершенияРаботыВнешнегоРедактораКодаБезСохранения(КодВозврата, ДополнительныеПараметры) Экспорт
	
	ТекстовыйДокумент = Новый ТекстовыйДокумент;
	
	ПараметрыПродолжение = Новый Структура();
	ПараметрыПродолжение.Вставить("ТекстовыйДокумент", ТекстовыйДокумент);
	ПараметрыПродолжение.Вставить("ПолноеИмяФайла", ДополнительныеПараметры.ПолноеИмяФайла);
	ПараметрыПродолжение.Вставить("ИдентификаторРедактора", ДополнительныеПараметры.ИдентификаторРедактора);
	
	Оповещение = Новый ОписаниеОповещения("ИсполняемыйКодПослеЗавершенияРаботыВнешнегоРедактораПродолжениеБезСохранения", ЭтаФорма, ПараметрыПродолжение);
	
	ТекстовыйДокумент.НачатьЧтение(Оповещение, ДополнительныеПараметры.ПолноеИмяФайла, "utf-8");
	
КонецПроцедуры

#КонецОбласти 

#Область Методы

&НаКлиенте
Процедура СохранитьИсполняемыйКод()
	
	Если Не ЗначениеЗаполнено(ИмяФайлаАктивногоРедактора) Тогда
		ИсполняемыйКодСохранитьКак();
	Иначе
		ИсполняемыйКодСохранить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторКодаЗакрыть(Элемент)
	
	ИсполняемыйКодЗакрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторКодаОткрытьВоВнешнемРедакторе(Элемент)
	
	ОткрытьВоВнешнемРедакторе();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсполняемыйКодЗакрыть()
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	#Область Предусловия
	
	Если ИндексСтроки = -1 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	
	УдалитьРедактор(стр_МенеджерРедактора.ИмяРеквизита, стр_МенеджерРедактора.ИмяСтраницы);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВоВнешнемРедакторе()
	
	Если ЗначениеЗаполнено(ИмяФайлаАктивногоРедактора) Тогда
		ИсполняемыйКодСохранить();
		
		ДополнительныеПараметры = Новый Структура("ПолноеИмяФайла", ИмяФайлаАктивногоРедактора);
		Оповещение = Новый ОписаниеОповещения("ПослеЗавершенияРаботыВнешнегоРедактораКода", ЭтотОбъект, ДополнительныеПараметры);
		
		НачатьЗапускПриложения(Оповещение, ИмяФайлаАктивногоРедактора, , Истина);
		
	Иначе
		
		ИдентификаторРедактора = ИндексСтрокиАктивногоРедактора();
		Если ИдентификаторРедактора = -1 Тогда
			Возврат;
		КонецЕсли;
		
		стр_МенеджерРедактора = МенеджерРедактора.Получить(ИдентификаторРедактора);
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("bsl");
		
		Текст = Новый ТекстовыйДокумент;
		Текст.ДобавитьСтроку(ЭтаФорма[стр_МенеджерРедактора.ИмяПоляВвода]);
		Текст.НачатьЗапись(Новый ОписаниеОповещения("ОткрытьВоВнешнемРедактореБезСохраненияПослеЗаписиВремФайла", ЭтотОбъект, Новый Структура("ПолноеИмяФайла, ИдентификаторРедактора", ИмяВременногоФайла, ИдентификаторРедактора)), ИмяВременногоФайла);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НовыйРедакторКода(ИмяРеквизита = "")
	
	// TODO: Продумать вариант хранения привязки идентификатора редактора
	// и всех элементов связанных с конкретным редактором, ибо, при удалении
	// редактора, их тоже надо удалять.
	
	СчетчикФайловКода = СчетчикФайловКода + 1;
	
	ИмяРеквизита = "ИсполняемыйКод" + СчетчикФайловКода;
	РеквизитФормы = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Строка"));
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	
	// Страница редактора кода.
	
	ИмяСтраницы = "Страница" + ИмяРеквизита;
	
	эл_Страница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СтраницыИсполняемыйКод);
	эл_Страница.Вид = ВидГруппыФормы.Страница;
	эл_Страница.Заголовок = "Новый " + СчетчикФайловКода;
	
	// Командная панель редактора кода.
	
	ИмяКоманднойПанели = "РедакторКодаКоманднаяПанель" + СчетчикФайловКода;
	эл_ПанельКоманд = Элементы.Добавить(ИмяКоманднойПанели, Тип("ГруппаФормы"), эл_Страница);
	эл_ПанельКоманд.Вид = ВидГруппыФормы.КоманднаяПанель;
	
	// Команда закрытия редактора кода.
	
	ИмяКоманды = "РедакторКодаЗакрыть" + СчетчикФайловКода;
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "РедакторКодаЗакрыть";
	Команда.Подсказка = "Закрыть редактор";
	
	эл_Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), эл_ПанельКоманд);
	эл_Кнопка.ИмяКоманды            = ИмяКоманды;
	эл_Кнопка.ТолькоВоВсехДействиях = Ложь;
	эл_Кнопка.Заголовок             = "Закрыть";
	эл_Кнопка.Отображение           = ОтображениеКнопки.Картинка;
	эл_Кнопка.Картинка              = Элементы.КартинкаЗакрыть.Картинка;
	эл_Кнопка.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
	// Команда повторного чтения из файла.
	
	ИмяКоманды = "РедакторКодаПеречитатьФайл" + СчетчикФайловКода;
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "РедакторКодаПеречитатьФайл";
	Команда.Подсказка = "Перечитать файл";
	
	эл_Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), эл_ПанельКоманд);
	эл_Кнопка.ИмяКоманды            = ИмяКоманды;
	эл_Кнопка.ТолькоВоВсехДействиях = Ложь;
	эл_Кнопка.Заголовок             = "Перечитать";
	эл_Кнопка.Отображение           = ОтображениеКнопки.Картинка;
	эл_Кнопка.Картинка              = Элементы.КартинкаПеречитатьФайл.Картинка;
	эл_Кнопка.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
	// Команда открытия текста во внешнем редакторе.
	
	ИмяКоманды = "РедакторКодаОткрытьВоВнешнемРедакторе" + СчетчикФайловКода;
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "РедакторКодаОткрытьВоВнешнемРедакторе";
	Команда.Подсказка = "Открыть во внешнем редакторе";
	
	эл_Кнопка = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), эл_ПанельКоманд);
	эл_Кнопка.ИмяКоманды            = ИмяКоманды;
	эл_Кнопка.ТолькоВоВсехДействиях = Ложь;
	эл_Кнопка.Заголовок             = "Открыть во внешнем редакторе";
	эл_Кнопка.Отображение           = ОтображениеКнопки.Картинка;
	эл_Кнопка.Картинка              = Элементы.КартинкаОткрытьВоВнешнемРедакторе.Картинка;
	эл_Кнопка.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
	// Поле текстового редактора кода.
	
	эл_ИсполняемыйКод = Элементы.Добавить(ИмяРеквизита, Тип("ПолеФормы"), эл_Страница);
	эл_ИсполняемыйКод.Вид                       = ВидПоляФормы.ПолеТекстовогоДокумента;
	эл_ИсполняемыйКод.ПутьКДанным               = ИмяРеквизита;
	эл_ИсполняемыйКод.ПоложениеЗаголовка        = ПоложениеЗаголовкаЭлементаФормы.Нет;
	эл_ИсполняемыйКод.АвтоМаксимальнаяШирина    = Ложь;
	эл_ИсполняемыйКод.АвтоМаксимальнаяВысота    = Ложь;
	//эл_ИсполняемыйКод.МногострочныйРежим        = Истина;
	//эл_ИсполняемыйКод.АвтоПереносСтрок          = Истина;
	//эл_ИсполняемыйКод.РасширенноеРедактирование = Истина;
	эл_ИсполняемыйКод.Шрифт                     = Новый Шрифт("Consolas", 11);
	эл_ИсполняемыйКод.ЦветФона                  = Новый Цвет(47, 79, 79);
	эл_ИсполняемыйКод.ЦветТекста                = Новый Цвет(220, 220, 170);
	эл_ИсполняемыйКод.РастягиватьПоВертикали    = Истина;
	эл_ИсполняемыйКод.РастягиватьПоГоризонтали  = Истина;
	
	эл_ИсполняемыйКод.УстановитьДействие("ПриИзменении", "ИсполняемыйКодПриИзменении");
	
	Элементы.СтраницыИсполняемыйКод.ТекущаяСтраница = эл_Страница;
	
	// TODO: Переделать в работу с классом "МенеджерРедактора".
	
	тз_МенеджерРедактора = РеквизитФормыВЗначение("МенеджерРедактора");
	
	стр_МенеджерРедактора = тз_МенеджерРедактора.Добавить();
	стр_МенеджерРедактора.ИмяСтраницы  = эл_Страница.Имя;
	стр_МенеджерРедактора.ИмяПоляВвода = эл_ИсполняемыйКод.Имя;
	стр_МенеджерРедактора.ИмяРеквизита = ИмяРеквизита;
	
	ЗначениеВРеквизитФормы(тз_МенеджерРедактора, "МенеджерРедактора");
	
	УстановитьВидимостьИмениФайлаАктивногоРедактораКода(ЭтаФорма);
	
КонецПроцедуры

&НаСервере
Процедура УдалитьРедактор(ИмяРеквизита, ИмяСтраницы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяРеквизита) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	#Область Контекст
	
	Если Ложь Тогда
		тз_МенеджерРедактора = Новый ТаблицаЗначений;
	КонецЕсли;
	
	#КонецОбласти
	
	Элементы.Удалить(Элементы[ИмяРеквизита]);
	Элементы.Удалить(Элементы[ИмяСтраницы]);
	
	//
	
	УдаляемыеРеквизиты = Новый Массив;
	УдаляемыеРеквизиты.Добавить(ИмяРеквизита);
	
	ИзменитьРеквизиты(, УдаляемыеРеквизиты);
	
	УдалитьЗаписьМенеджераРедактора(ЭтаФорма, ИмяРеквизита);
	
	Если Не ЕстьИспользуемыеФайлыРедактора(ЭтаФорма) Тогда
		НовыйРедакторКода();
	КонецЕсли;
	
	УстановитьВидимостьИмениФайлаАктивногоРедактораКода(ЭтаФорма);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьИмениФайлаАктивногоРедактораКода(Форма)
	
	Если Не ЕстьИспользуемыеФайлыРедактора(Форма) Тогда
		Если Форма.Элементы.ИмяФайлаАктивногоРедактора.Видимость Тогда
			Форма.Элементы.ИмяФайлаАктивногоРедактора.Видимость = Ложь;
		КонецЕсли;
	Иначе
		Если Не Форма.Элементы.ИмяФайлаАктивногоРедактора.Видимость Тогда
			Форма.Элементы.ИмяФайлаАктивногоРедактора.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти 

#КонецОбласти 

#Область МенеджерРедактора

&НаКлиентеНаСервереБезКонтекста
Процедура УдалитьЗаписьМенеджераРедактора(Форма, ИмяРеквизита)
	
	Строки = Форма.МенеджерРедактора.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если Не (Строки.Количество() = 0) Тогда
		Форма.МенеджерРедактора.Удалить(Строки[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ЕстьИспользуемыеФайлыРедактора(Форма)
	
	Возврат Не (Форма.МенеджерРедактора.Количество() = 0);
	
КонецФункции

&НаКлиенте
Функция ЕстьМодифицированныеРедакторы()
	
	стк_МенеджерРедактора = МенеджерРедактора.НайтиСтроки(Новый Структура("Модифицированность", Истина));
	
	ЕстьМодифицированные = (стк_МенеджерРедактора.Количество() > 0);
	
	Возврат ЕстьМодифицированные;
	
КонецФункции

&НаКлиенте
Функция ИндексСтрокиРедактора(ИмяРеквизита)
	
	Результат       = 0;
	ПустойРезультат = -1;
	
	стк_МенеджерРедактора = МенеджерРедактора.НайтиСтроки(Новый Структура("ИмяРеквизита", ИмяРеквизита));
	
	Если стк_МенеджерРедактора.Количество() = 0 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	ИндексСтроки = МенеджерРедактора.Индекс(стк_МенеджерРедактора[0]);
	
	//
	
	Результат = ИндексСтроки;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИндексСтрокиРедактораПоИмениФайла(ИмяФайлаРедактора)
	
	Результат       = 0;
	ПустойРезультат = -1;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяФайлаРедактора) Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИндексСтроки = -1;
	
	Строки = МенеджерРедактора.НайтиСтроки(Новый Структура("ИмяФайла", ИмяФайлаРедактора));
	
	Если Строки.Количество() = 0 Тогда
		
		// Тут может быть такая ситуация, что собственно только открыли консоль, в ней открыт
		// редактор по-умолчанию и открывают какой-то файл сценария.
		
		Если МенеджерРедактора.Количество() = 1 Тогда
			стр_МенеджерРедактора = МенеджерРедактора[0];
			Если Не ЗначениеЗаполнено(стр_МенеджерРедактора.ИмяФайла) Тогда
				ИндексСтроки = МенеджерРедактора.Индекс(стр_МенеджерРедактора);
			КонецЕсли;
		Иначе
			Возврат ПустойРезультат;
		КонецЕсли;
		
	Иначе
		ИндексСтроки = МенеджерРедактора.Индекс(Строки[0]);
	КонецЕсли;
	
	Результат = ИндексСтроки;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ИндексСтрокиАктивногоРедактора()
	
	Результат       = 0;
	ПустойРезультат = -1;
	
	#Область Предусловия
	
	Если (Элементы.СтраницыИсполняемыйКод.ТекущаяСтраница = Неопределено) Тогда
		Если (Элементы.СтраницыИсполняемыйКод.ПодчиненныеЭлементы.Количество() = 0) Тогда
			Возврат ПустойРезультат;
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	Если (Элементы.СтраницыИсполняемыйКод.ТекущаяСтраница = Неопределено) Тогда
		ИмяТекущейСтраницы = Элементы.СтраницыИсполняемыйКод.ПодчиненныеЭлементы[0].Имя;
	Иначе
		ИмяТекущейСтраницы = Элементы.СтраницыИсполняемыйКод.ТекущаяСтраница.Имя;
	КонецЕсли;
	
	стк_МенеджерРедактора = МенеджерРедактора.НайтиСтроки(Новый Структура("ИмяСтраницы", ИмяТекущейСтраницы));
	
	Если стк_МенеджерРедактора.Количество() = 0 Тогда
		Возврат ПустойРезультат;
	КонецЕсли; 
	
	ИндексСтроки = МенеджерРедактора.Индекс(стк_МенеджерРедактора[0]);
	
	//
	
	Результат = ИндексСтроки;
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ТипВыполненияТекущегоРедактора()
	
	Результат       = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	
	ТипВыполнения = стр_МенеджерРедактора.ТипВыполнения;
	
	Результат = ТипВыполнения;
	Возврат ТипВыполнения;
	
КонецФункции

&НаКлиенте
Функция ИмяРеквизитаАктивногоРедактора()
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	ИндексСтроки = ИндексСтрокиАктивногоРедактора();
	
	Если ИндексСтроки = -1 Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	стр_МенеджерРедактора = МенеджерРедактора.Получить(ИндексСтроки);
	
	ИмяРеквизита = стр_МенеджерРедактора.ИмяРеквизита;
	
	//
	
	Результат = ИмяРеквизита;
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#КонецОбласти 

#Область Библиотеки

// Разбивает строку на несколько строк по указанному разделителю. Разделитель может иметь любую длину.
// В случаях, когда разделителем является строка из одного символа, и не используется параметр СокращатьНепечатаемыеСимволы,
// рекомендуется использовать функцию платформы СтрРазделить.
//
// Параметры:
//  Значение               - Строка - текст с разделителями;
//  Разделитель            - Строка - разделитель строк текста, минимум 1 символ;
//  ПропускатьПустыеСтроки - Булево - признак необходимости включения в результат пустых строк.
//    Если параметр не задан, то функция работает в режиме совместимости со своей предыдущей версией:
//     - для разделителя-пробела пустые строки не включаются в результат, для остальных разделителей пустые строки
//       включаются в результат.
//     - если параметр Строка не содержит значащих символов или не содержит ни одного символа (пустая строка), то в
//       случае разделителя-пробела результатом функции будет массив, содержащий одно значение "" (пустая строка), а
//       при других разделителях результатом функции будет пустой массив.
//  СокращатьНепечатаемыеСимволы - Булево - сокращать непечатаемые символы по краям каждой из найденных подстрок.
//
// Возвращаемое значение:
//  Массив - массив строк.
//
// Пример:
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",")
//  - возвратит массив из 5 элементов, три из которых  - пустые: "", "один", "", "два", "";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(",один,,два,", ",", Истина)
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(" один   два  ", " ")
//  - возвратит массив из двух элементов: "один", "два";
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("")
//  - возвратит пустой массив;
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("",,Ложь)
//  - возвратит массив с одним элементом: ""(пустая строка);
//  СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок("", " ")
//  - возвратит массив с одним элементом: "" (пустая строка).
//
&НаКлиентеНаСервереБезКонтекста
Функция РазложитьСтрокуВМассивПодстрок(Знач Значение, Знач Разделитель = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь) Экспорт
	
	Результат = Новый Массив;
	
	// Для обеспечения обратной совместимости.
	Если ПропускатьПустыеСтроки = Неопределено Тогда
		ПропускатьПустыеСтроки = ?(Разделитель = " ", Истина, Ложь);
		Если ПустаяСтрока(Значение) Тогда
			Если Разделитель = " " Тогда
				Результат.Добавить("");
			КонецЕсли;
			Возврат Результат;
		КонецЕсли;
	КонецЕсли;
	
	Позиция = Найти(Значение, Разделитель);
	Пока Позиция > 0 Цикл
		Подстрока = Лев(Значение, Позиция - 1);
		Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Подстрока) Тогда
			Если СокращатьНепечатаемыеСимволы Тогда
				Результат.Добавить(СокрЛП(Подстрока));
			Иначе
				Результат.Добавить(Подстрока);
			КонецЕсли;
		КонецЕсли;
		Значение = Сред(Значение, Позиция + СтрДлина(Разделитель));
		
		Позиция = Найти(Значение, Разделитель);
	КонецЦикла;
	
	Если Не ПропускатьПустыеСтроки Или Не ПустаяСтрока(Значение) Тогда
		Если СокращатьНепечатаемыеСимволы Тогда
			Результат.Добавить(СокрЛП(Значение));
		Иначе
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти