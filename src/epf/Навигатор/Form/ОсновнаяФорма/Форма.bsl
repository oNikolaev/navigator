#Область Форма

#Область Реквизиты

// АдресСтруктурыМетаданныхКонфигурации - Строка - адрес сформированного дерева конфигурации.
// ЕстьБСП - Булево - флаг наличия БСП. Заполняется в ПриСозданииНаСервере.

#КонецОбласти

#Область События

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Навигатор = ЭтаОбработка();
	
	ЕстьБСП = Навигатор.ЕстьБСП();
	
	// Восстановить состояние работы
	
	ВосстановитьСостояниеРаботы();
	
	// Структура метаданных конфигурации
	
	ПараметрыФормирования = Навигатор.Тип_ПараметрыФормированияСтруктурыМетаданных();
	ПараметрыФормирования.ИдОбъектаХраненияВременныхДанных = УникальныйИдентификатор;
	ПараметрыФормирования.АдресСтруктураХраненияБазыДанных = АдресСтруктураХраненияБазыДанных;
	
	Навигатор.СтруктураМетаданныхКонфигурации(ПараметрыФормирования);
	
	АдресСтруктурыМетаданныхКонфигурации = ПараметрыФормирования.АдресСтруктурыМетаданныхКонфигурации;
	АдресСтруктураХраненияБазыДанных     = ПараметрыФормирования.АдресСтруктураХраненияБазыДанных;
	
	тз_СтруктураМетаданныхКонфигурации = ПолучитьИзВременногоХранилища(АдресСтруктурыМетаданныхКонфигурации);
	ЗначениеВРеквизитФормы(тз_СтруктураМетаданныхКонфигурации, "СтруктураМетаданныхКонфигурации");
	
	// Краткая информация
	
	Элементы.СтруктураМетаданныхКонфигурацииПредставление.Заголовок = Навигатор.КраткаяИнформацияОКонфигурации();
	
	// Панель истории
	
	Элементы.СтраницаИстория.Видимость                   = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	Элементы.КомандаСкрытьПоказатьИсторию.Пометка        = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
	
	// Панель избранного
	
	Элементы.СтраницаИзбранное.Видимость                                  = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка        = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
	
	// Режим разработчика
	
	ФлВидимость = Объект.Настройки_РежимРазработчика;
	
	Элементы.СтраницаСистема.Видимость = ФлВидимость;
	Элементы.СтраницыОсновнаяФорма.ОтображениеСтраниц = ?(ФлВидимость, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
	// Установить текст HTML для страницы настроек.
	
	ТекстНастройкиНавигатораHTML = Навигатор.ПолучитьМакет("НастройкиМакетHTML").ПолучитьТекст();
	
	Элементы.СтраницаНастройки.Видимость = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ЗнНастр = Настройки.Получить("ОбластьПоискаИмя");
	
	Если Не (ЗнНастр = Неопределено) Тогда
		Элементы.КомандаОбластьПоискаИмя.Пометка = ЗнНастр;
	КонецЕсли;
	
	ЗнНастр = Настройки.Получить("ОбластьПоискаСиноним");
	
	Если Не (ЗнНастр = Неопределено) Тогда
		Элементы.КомандаОбластьПоискаСиноним.Пометка = ЗнНастр;
	КонецЕсли;
	
	ЗнНастр = Настройки.Получить("ОбластьПоискаКомментарий");
	
	Если Не (ЗнНастр = Неопределено) Тогда
		Элементы.КомандаОбластьПоискаКомментарий.Пометка = Настройки.Получить("ОбластьПоискаКомментарий");
	КонецЕсли;
	
	//
	
	ЗнНастр = Настройки.Получить("СтрокаПоискаПоСтруктуреМетаданных");
	
	СтрокаПоискаУказана = ЗначениеЗаполнено(ЗнНастр);
	
	Если СтрокаПоискаУказана Тогда
		ПоискПоСтруктуреМетаданныхСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Объект.Настройки_ПроверятьНаличиеОбновленийПриЗапуске Тогда
		ПодключитьОбработчикОжидания("ПроверитьНаличиеОбновлений", 1, Истина);
	КонецЕсли;
	
	Если СтрокаПоискаПоСтруктуреМетаданныхЗаполненаПриОткрытии Тогда
		СтрокаПоискаПоСтруктуреМетаданныхПриИзмененииКлиент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если Источник = "Навигатор_ФормаРедакторОбъекта" Или Источник = "Навигатор_ФормаСвойстваОбъекта" Тогда
		
		Если ИмяСобытия = "ДобавитьВИзбранное" Тогда
			
			ДобавитьЭлементВИзбранное(Параметр);
			
			ПоказатьОповещениеПользователя("Избранное:", , "" + Параметр + " добавлен в избранное.", БиблиотекаКартинок.ДобавитьВИзбранное);
			
		ИначеЕсли ИмяСобытия = "ДобавитьВИсторию" Тогда
			
			ДобавитьЭлементВИсторию(Параметр);
			
		ИначеЕсли ИмяСобытия = "ОткрытьСписокЭлементов" Тогда
			
			ДанныеСтроки = Неопределено;
			ИскатьПоИмениЭлементаКоллекции = Истина;
			
			ОпределитьДанныеСтрокиДереваМД(ДанныеСтроки, Параметр, ИскатьПоИмениЭлементаКоллекции);
			
			Если Не (ДанныеСтроки = Неопределено) Тогда
				ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки);
				Активизировать();
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли Источник = "Навигатор_ФормаРедакторЗаписи" Тогда
		
		Если ИмяСобытия = "ОткрытьСписокЭлементов" Тогда
			
			ДанныеСтроки = Неопределено;
			ИскатьПоИмениЭлементаКоллекции = Истина;
			
			ОпределитьДанныеСтрокиДереваМД(ДанныеСтроки, Параметр, ИскатьПоИмениЭлементаКоллекции);
			
			Если Не (ДанныеСтроки = Неопределено) Тогда
				ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки);
			КонецЕсли;
			
			Активизировать();
			
		КонецЕсли;
		
	ИначеЕсли Источник = "Навигатор_НастройкиНавигатора" Тогда
		
		Если ИмяСобытия = "ИзменениеНастроек" Тогда
			
			//
			
			Элементы.СтраницаИстория.Видимость = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			Элементы.КомандаСкрытьПоказатьИсторию.Пометка = Объект.Настройки_ОтображатьПанельИсторииПриОткрытии;
			
			//
			
			Элементы.СтраницаИзбранное.Видимость = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка = Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии;
			
		КонецЕсли;
		
	ИначеЕсли Источник = "Навигатор_ОбновлениеПрограммы" Тогда
		
		Если ИмяСобытия = "ИзменениеНастроек" Тогда
			Объект.Настройки_ПроверятьНаличиеОбновленийПриЗапуске = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если Не ЗавершениеРаботы Тогда
		Если Объект.Настройки_ПодтверждатьЗакрытиеНавигатора Тогда
			
			Если Не ЗакрытиеПодтверждено Тогда
				СтандартнаяОбработка = Ложь;
				Отказ = Истина;
				
				ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтаФорма), "Закрыть Навигатор?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Навигатор");
			КонецЕсли;
			
		КонецЕсли;
		
		ЗакрытьВсеОкнаРедакторов();
		
		Попытка
			СохранитьСостояниеРаботы();
		Исключение
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДпПрм) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗакрытиеПодтверждено = Истина;
	Закрыть();
	
КонецПроцедуры

#КонецОбласти

#Область Элементы

&НаКлиенте
Процедура Настройки_ОтображатьПанельИзбранногоПриОткрытииПриИзменении(Элемент)
	
	ОбработкаОповещения("ИзменениеНастроек", Неопределено, "Навигатор_НастройкиНавигатора");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ОтображатьПанельИсторииПриОткрытииПриИзменении(Элемент)
	
	ОбработкаОповещения("ИзменениеНастроек", Неопределено, "Навигатор_НастройкиНавигатора");
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_ОтображатьКоличествоЭлементовПриИзменении(Элемент)
	
КонецПроцедуры

&НаКлиенте
Процедура Настройки_РежимРазработчикаПриИзменении(Элемент)
	
	ФлВидимость = Объект.Настройки_РежимРазработчика;
	
	Элементы.СтраницаСистема.Видимость = ФлВидимость;
	Элементы.СтраницыОсновнаяФорма.ОтображениеСтраниц = ?(ФлВидимость, ОтображениеСтраницФормы.ЗакладкиСверху, ОтображениеСтраницФормы.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаДляПереходаПриИзменении(Элемент)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаДляПерехода) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭлСписка = Элементы.НавигационнаяСсылкаДляПерехода.СписокВыбора.НайтиПоЗначению(НавигационнаяСсылкаДляПерехода);
	
	Если ЭлСписка = Неопределено Тогда
		Элементы.НавигационнаяСсылкаДляПерехода.СписокВыбора.Добавить(НавигационнаяСсылкаДляПерехода);
	КонецЕсли;
	
	Модифицированность = Ложь;
	
	ОткрытьЭлементПоНавигационнойСсылкеВРедакторе();
	
КонецПроцедуры

&НаКлиенте
Процедура НавигационнаяСсылкаДляПереходаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПоСтруктуреМетаданныхПриИзменении(Элемент)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПриИзмененииСтрокиПоискаПоСтруктуреМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПоСтруктуреМетаданныхОчистка(Элемент, СтандартнаяОбработка)
	
	ОчисткаСтрокиПоискаПоСтруктуреМетаданных();
	
КонецПроцедуры

#КонецОбласти

#Область Команды

&НаКлиенте
Процедура СтруктураХраненияБазыДанных(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "СтруктураХраненияДанных");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьОтчетОбработку(Команда)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТекущиеДанные.ИмяЭлементаКоллекции = "Отчет" Или ТекущиеДанные.ИмяЭлементаКоллекции = "Обработка") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТекущиеДанные.ИмяЭлементаКоллекции = "Отчет" Тогда
		ОткрытьФорму("Отчет." + ТекущиеДанные.Имя + ".Форма");
	ИначеЕсли ТекущиеДанные.ИмяЭлементаКоллекции = "Обработка" Тогда
		ОткрытьФорму("Обработка." + ТекущиеДанные.Имя + ".Форма");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьИспользованныйСписокЭлементов(Элемент)
	
	// TODO: Разобрать имя элемента, и обработать команду открытия.
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМНастроитьКолонки(Элемент)
	
	СписокЭлементовОбъектаМетаданныхНастроитьКолонки(Элемент.Имя);
	
	ЭлементыДерева = НастройкиКолонокСписка.ПолучитьЭлементы();
	
	Для каждого ЭлементДерева Из ЭлементыДерева Цикл
		ИдЭлемента = ЭлементДерева.ПолучитьИдентификатор();
		Элементы.НастройкиКолонокСписка.Развернуть(ИдЭлемента, Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМЗакрыть(Элемент)
	
	Попытка
		СписокЭлементовОбъектаМетаданныхЗакрыть(Элемент.Имя);
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМВыбратьВыделенныеДляВыгрузки(Элемент)
	
	Перем ВыделенныеОбъекты;
	
	СписокЭлементовОМВыбратьВыделенныеДляВыгрузки(Элемент.Имя, ВыделенныеОбъекты);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ВыгрузкаЗагрузкаДанныхXML");
	
	ПараметрыФормыВыгрузки = Новый Структура("ОбъектыБазы", ВыделенныеОбъекты);
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормыВыгрузки, ЭтаФорма, УникальныйИдентификатор);
	
	Оповестить("ВыбраныЭлементыДляВыгрузки", ПараметрыФормыВыгрузки, "ОсновнаяФорма");
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМДобавитьВИзбранное(Элемент)
	
	Перем ДобавленныйЭлемент;
	
	СписокЭлементовОМДобавитьВИзбранное(Элемент.Имя, ДобавленныйЭлемент);
	
	ПоказатьОповещениеПользователя("Избранное:", , "" + ДобавленныйЭлемент + " добавлен в избранное.", БиблиотекаКартинок.Избранное);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСписокЭлементовОМРедактированиеЗаписи(Элемент)
	
	ИмяЭлементаСписка = ИмяЭлементаСпискаРегистраПоИмениЭлементаКомандыРедактированияЗаписи(Элемент.Имя);
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы[ИмяЭлементаСписка].ТекущиеДанные;
	
	Если (ТекущиеДанные = Неопределено) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыТаблицы = ПараметрыТаблицыЗаписиПоИмениЭлемента(Элемент.Имя);
	
	ПараметрыЗаписи = ПараметрыЗаписиТаблицыРегистра(ТекущиеДанные, ПараметрыТаблицы);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторЗаписи");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыЗаписи, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьСтруктуруОбъектаМетаданных(Команда)
	
	#Область Предусловия
	
	Если Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтобразитьСтруктуруОбъектаМетаданных(Элементы.СтруктураМетаданныхКонфигурации.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьСвойстваОМ(Команда)
	
	ОтобразитьСвойстваОбъектаМетаданных();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьПанельНавигации(Команда)
	
	СкрытьПоказатьПанельНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьКоличество(Команда)
	
	ОтобразитьКоличествоЭлементовКоллекции(Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьСписокЭлементовОМ(Команда)
	
	ДанныеСтроки = СтруктураСтрокиМетаданныхКонфигурации(Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные);
	
	ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьНастройкиКолонокСписка(Команда)
	
	Элементы.ГруппаНастройкаКолонокСписка.Видимость = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуОПрограмме(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "СвойстваПрограммы");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьНастройкиНавигатора(Команда)
	
	Элементы.СтраницаНастройки.Видимость = Не Элементы.СтраницаНастройки.Видимость;
	
	Элементы.КомандаОткрытьНастройкиНавигатораБыстрая.Пометка = Элементы.СтраницаНастройки.Видимость;
	Элементы.КомандаОткрытьНастройкиНавигатора.Пометка = Элементы.СтраницаНастройки.Видимость;
	
	Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаНастройки;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьВсеРедакторы(Команда)
	
	ЗакрытьВсеОкнаРедакторов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьВсеСтраницы(Команда)
	
	ЗакрытьВсеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьВсе(Команда)
	
	ЗакрытьВсе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОтобразитьКоличествоВсехЭлементов(Команда)
	
	ОтобразитьКоличествоВсехЭлементовВсехКоллекцийКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуВыгрузкиЗагрузкиДанныхXML(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ВыгрузкаЗагрузкаДанныхXML");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьЭлементПоНавигационнойСсылкеВРедакторе(Команда)
	
	ОткрытьЭлементПоНавигационнойСсылкеВРедакторе();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьПанельИзбранныхЭлементов(Команда)
	
	СкрытьПоказатьПанельИзбранныхЭлементов();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОткрытьФормуСпискаПользователей(Команда)
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ПользователиБазы");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьИсторию(Команда)
	
	СкрытьПоказатьИсториюНавигации();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИсторияНавигацииОткрытьФормуЭлемента(Команда)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИсторияНавигации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЭлементНавигации = ТекущиеДанные.Ссылка;
	
	ДобавитьЭлементВИсторию(ЭлементНавигации);
	ПоказатьЗначение(, ЭлементНавигации);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаИзбранныеЭлементыОткрытьФормуЭлемента(Команда)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИзбранныеЭлементы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПоказатьЗначение(, ТекущиеДанные.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьСтраницуНастроек(Команда)
	
	Элементы.СтраницаНастройки.Видимость = Ложь;
	
	Элементы.КомандаОткрытьНастройкиНавигатораБыстрая.Пометка = Элементы.СтраницаНастройки.Видимость;
	Элементы.КомандаОткрытьНастройкиНавигатора.Пометка = Элементы.СтраницаНастройки.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьОтобразитьПанельСтраниц(Команда)
	
	СкрытьОтобразитьПанельСтраниц();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаКонсольКодаОткрыть(Команда)
	
	ОткрытьКонсольКода();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьКолонкуКомментарий(Команда)
	
	СкрытьПоказатьКолонкуКомментарий();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаСкрытьПоказатьКолонкуСиноним(Команда)
	
	СкрытьПоказатьКолонкуСиноним();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПроверитьНаличиеОбновлений(Команда)
	
	ПроверитьНаличиеОбновлений();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаЗакрытьНавигаторБезПодтверждения(Команда)
	
	ЗакрытиеПодтверждено = Истина;
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбластьПоискаИмя(Команда)
	
	Элементы.КомандаОбластьПоискаИмя.Пометка = Не Элементы.КомандаОбластьПоискаИмя.Пометка;
	ОбластьПоискаИмя = Элементы.КомандаОбластьПоискаИмя.Пометка;
	
	Если ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		ПриИзмененииСтрокиПоискаПоСтруктуреМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбластьПоискаСиноним(Команда)
	
	Элементы.КомандаОбластьПоискаСиноним.Пометка = Не Элементы.КомандаОбластьПоискаСиноним.Пометка;
	ОбластьПоискаСиноним = Элементы.КомандаОбластьПоискаСиноним.Пометка;
	
	Если ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		ПриИзмененииСтрокиПоискаПоСтруктуреМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаОбластьПоискаКомментарий(Команда)
	
	Элементы.КомандаОбластьПоискаКомментарий.Пометка = Не Элементы.КомандаОбластьПоискаКомментарий.Пометка;
	ОбластьПоискаКомментарий = Элементы.КомандаОбластьПоискаКомментарий.Пометка;
	
	Если ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		ПриИзмененииСтрокиПоискаПоСтруктуреМетаданных();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаПоискПоСтруктуреМетаданных(Команда)
	
	ПоискПоСтруктуреМетаданныхКлиент();
	
КонецПроцедуры

#КонецОбласти

#Область Таблицы

#Область СтруктураМетаданныхКонфигурации

&НаКлиенте
Процедура СтруктураМетаданныхКонфигурацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТекущиеДанные.Имя = "Константы"
		И ТекущиеДанные.ТипЗаписи = "КоллекцияОбъектовМетаданных"
		И ТекущиеДанные.ИмяКоллекции = "Константы" Тогда
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ЗначенияКонстант");
		ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
		
		Возврат;
		
	ИначеЕсли ТекущиеДанные.ИмяКоллекции = "Перечисления" Тогда
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторПеречисления");
		ОткрытьФорму(ПолноеИмяФормы, Новый Структура("ОбъектыБазы", ПредопределенноеЗначение(ТекущиеДанные.ПолноеИмя + ".ПустаяСсылка")), ЭтаФорма, Истина);
		
		Возврат;
		
	КонецЕсли;
	
	Если (ТекущиеДанные.ИмяКоллекции = "Формы") И (ТекущиеДанные.ИмяЭлементаКоллекции = "Форма") Тогда
		
		ОткрытьФорму(ТекущиеДанные.ИмяФормы, , ЭтаФорма);
		Возврат;
		
	КонецЕсли;
	
	Если Поле.Имя = "КоличествоЗаписей" Тогда
		ОтобразитьКоличествоЭлементовКоллекции(ТекущиеДанные);
	Иначе
		
		ОтобразитьКоличествоЭлементовКоллекции(ТекущиеДанные);
		
		стрМд = СтруктураСтрокиМетаданныхКонфигурации(ТекущиеДанные);
		ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(стрМд);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтруктураМетаданныхКонфигурацииПриАктивизацииСтроки(Элемент)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	УстановитьВидимостьКомандКонтекстногоМенюТаблицы(Элементы.СтруктураМетаданныхКонфигурации);
	
КонецПроцедуры

#КонецОбласти

#Область КолонкиСпискаВидимостьКолонки

&НаКлиенте
Процедура НастройкиКолонокСпискаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	//
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаОкончаниеПеретаскивания(Элемент,
	ПараметрыПеретаскивания, СтандартнаяОбработка)
	//
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаВидимостьПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.НастройкиКолонокСписка.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы[ТекущиеДанные.ИмяКолонки].Видимость = ТекущиеДанные.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаПриИзменении(Элемент)
	
	// Сделать:
	// Добавить возможность изменять порядок колонок.
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиКолонокСпискаОтметитьВсе(Команда)
	
	НастройкиКолонокСпискаУстановитьПометки(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КомандаНастройкиКолонокСпискаСнятьВсе(Команда)
	
	НастройкиКолонокСпискаУстановитьПометки(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкиКолонокСпискаУстановитьПометки(Пометка)
	
	ЭлементыНастройкиКолонокСписка = НастройкиКолонокСписка.ПолучитьЭлементы();
	
	Для каждого ЭлементСтрокаНастройкиКолонокСписка Из ЭлементыНастройкиКолонокСписка Цикл
		
		ВлЭлементы = ЭлементСтрокаНастройкиКолонокСписка.ПолучитьЭлементы();
		
		Для каждого ВлЭлемент Из ВлЭлементы Цикл
			Если Не ЗначениеЗаполнено(ВлЭлемент.ИмяКолонки) Тогда
				Продолжить;
			КонецЕсли;
			
			ВлЭлемент.Видимость = Пометка;
			Элементы[ВлЭлемент.ИмяКолонки].Видимость = ВлЭлемент.Видимость;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры
#КонецОбласти

#Область ИзбранныеЭлементы

&НаКлиенте
Процедура ИзбранныеЭлементыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИзбранныеЭлементы.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы", ТекущиеДанные.Ссылка);
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

#КонецОбласти 

#Область ИсторияНавигации

&НаКлиенте
Процедура КомандаИсторияНавигацииВыбор(Команда)
	
	ИсторияНавигацииПриВыборе();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ИсторияНавигацииПриВыборе();
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ИмяЭлементаИсточникаПриПеретаскивании = Элемент.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	ИмяЭлементаИсточникаПриПеретаскивании = "";
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

#КонецОбласти 

#Область Проекты

&НаКлиенте
Процедура ПроектыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ДанныеИсточникаПеретаскивания = Неопределено;
	Если ЗначениеЗаполнено(ИмяЭлементаИсточникаПриПеретаскивании) Тогда
		ДанныеИсточникаПеретаскивания = Элементы[ИмяЭлементаИсточникаПриПеретаскивании].ТекущиеДанные;
	КонецЕсли;
	
	Если ДанныеИсточникаПеретаскивания = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// ИмяЭлементаИсточникаПриПеретаскивании
	
	стр_Проекты = Неопределено;
	Если Не (Строка = Неопределено) Тогда
		стр_Проекты = Проекты.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	Если стр_Проекты = Неопределено Тогда
		кл_Строки = Проекты.ПолучитьЭлементы();
	Иначе
		кл_Строки = стр_Проекты.ПолучитьЭлементы();
	КонецЕсли;
	
	стр_Проекты = кл_Строки.Добавить();
	ЗаполнитьЗначенияСвойств(стр_Проекты, ДанныеИсточникаПеретаскивания);
	
	Если Лев(ИмяЭлементаИсточникаПриПеретаскивании, СтрДлина("Список")) = "Список" Тогда
		стр_Проекты.Представление = ДанныеИсточникаПеретаскивания.Ссылка;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроектыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
КонецПроцедуры

&НаКлиенте
Процедура ПроектыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецОбласти

#Область Методы

// Выбор строк таблицы структуры метаданных.
//
// Параметры:
//	ДанныеСтроки - структура, см. Тип_ЗаписьСтруктурыМетаданныхКонфигурации().
//	
&НаКлиенте
Процедура ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ОтображениеСпискаДоступно = ОтображениеСпискаЭлементовКоллекцииДоступно(ДанныеСтроки.ИмяКоллекции);
	
	Если ДанныеСтроки.ТипЗаписи = "ОбъектМетаданных" Тогда
		
		Если ДанныеСтроки.ИмяЭлементаКоллекции = "Форма" Тогда
			
			ИмяФормыОбъекта = ИмяФормыОбъектаМетаданных(ДанныеСтроки);
			
			Если Не ЗначениеЗаполнено(ИмяФормыОбъекта) Тогда
				Возврат;
			КонецЕсли;
			
			ОткрытьФорму(ИмяФормыОбъекта);
			
		Иначе
			
			Если ОтображениеСпискаДоступно Тогда
				
				УстановитьВидимостьПанелиСтраницНавигатора(Истина);
				
				ИмяСпискаЭлементов = "";
				ОтобразитьСписокЭлементовКоллекции(ДанныеСтроки, ИмяСпискаЭлементов);
				
				ОптимальноРасположитьКомандыСпискаЭлементов(ИмяСпискаЭлементов);
				
				//
				
				ЭлементНавигации = ДанныеСтроки.ИмяКоллекции + "." + ДанныеСтроки.Имя;
				ДобавитьЭлементВИсторию(ЭлементНавигации);
				
			Иначе
				ОбработатьВыборСтрокиОбъектаОбработкиДанных(ДанныеСтроки);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьВыборСтрокиОбъектаОбработкиДанных(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ЯвляетсяСредствомОбработки = ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ДанныеСтроки.ИмяКоллекции);
	
	Если Не ЯвляетсяСредствомОбработки Тогда
		Возврат;
	КонецЕсли;
	
	СвойстваОбъекта = Тип_СвойстваОбъектаОбработкиДанных();
	СвойстваОбъекта.ИмяКоллекции = ДанныеСтроки.ИмяКоллекции;
	СвойстваОбъекта.ИмяЭлементаКоллекции = ДанныеСтроки.ИмяЭлементаКоллекции;
	СвойстваОбъекта.Имя = ДанныеСтроки.Имя;
	
	ИмяОсновнойФормы = ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта);
	
	Если Не ЗначениеЗаполнено(ИмяОсновнойФормы) Тогда
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму(ИмяОсновнойФормы, , ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоЭлементовКоллекции(ДанныеСтроки)
	
	#Область Предусловия
	
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	КолЗаписей = КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ДанныеСтроки.ИмяЭлементаКоллекции, ДанныеСтроки.Имя);
	
	ДанныеСтроки.КоличествоЗаписей = КолЗаписей;
	
	Если КолЗаписей = 0 Тогда
		ДанныеСтроки.Представление = ПодставитьПараметрыВСтроку("%1", ДанныеСтроки.Имя);
	Иначе
		ДанныеСтроки.Представление = ПодставитьПараметрыВСтроку("%1 (%2)", ДанныеСтроки.Имя, КолЗаписей);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСвойстваОбъектаМетаданных()
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	Если Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПараметрыФормы = Новый Структура("ИмяКоллекции, ИмяЭлементаКоллекции, ИмяОбъектаБазы");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	
	ПараметрыФормы.ИмяОбъектаБазы = ТекущиеДанные.Имя;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "СвойстваОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтруктуруОбъектаМетаданных(ИдСтроки)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИдСтроки) Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДереваМД = СтруктураМетаданныхКонфигурации.НайтиПоИдентификатору(ИдСтроки);
	
	Если СтрокаДереваМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОбъектаМД = СтруктураОбъектаМетаданных(СтрокаДереваМД.ИмяКоллекции, СтрокаДереваМД.Имя);
	
	Если СтруктураОбъектаМД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ПодчиненныеСтроки = СтрокаДереваМД.ПолучитьЭлементы();
	ПодчиненныеСтроки.Очистить();
	
	Для каждого КлючЗначение Из СтруктураОбъектаМД Цикл
		
		СтрокаКоллекции = ПодчиненныеСтроки.Добавить();
		СтрокаКоллекции.Имя                  = КлючЗначение.Ключ;
		СтрокаКоллекции.Представление        = КлючЗначение.Ключ;
		СтрокаКоллекции.Синоним              = КлючЗначение.Значение.Коллекция.Синоним;
		СтрокаКоллекции.ТипЗаписи            = КлючЗначение.Значение.Коллекция.ТипЗаписи;
		СтрокаКоллекции.ИмяКоллекции         = КлючЗначение.Значение.Коллекция.ИмяКоллекции;
		СтрокаКоллекции.ИмяЭлементаКоллекции = КлючЗначение.Значение.Коллекция.ИмяЭлементаКоллекции;
		СтрокаКоллекции.НомерКартинки        = КлючЗначение.Значение.Коллекция.НомерКартинки;
		
		СтрокиКоллекции = СтрокаКоллекции.ПолучитьЭлементы();
		
		Для каждого ДанныеЭлементаКоллекции Из КлючЗначение.Значение.ДанныеКоллекции Цикл
			
			СтрокаЭлементаКоллекции = СтрокиКоллекции.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаЭлементаКоллекции, ДанныеЭлементаКоллекции);
			
			//СтрокаЭлементаКоллекции.Имя                  = ДанныеЭлементаКоллекции.Имя;
			СтрокаЭлементаКоллекции.Представление        = ДанныеЭлементаКоллекции.Имя;
			//СтрокаЭлементаКоллекции.Синоним              = ДанныеЭлементаКоллекции.Синоним;
			//СтрокаЭлементаКоллекции.ТипЗаписи            = ДанныеЭлементаКоллекции.ТипЗаписи;
			СтрокаЭлементаКоллекции.ИмяКоллекции         = КлючЗначение.Значение.Коллекция.ИмяКоллекции;
			СтрокаЭлементаКоллекции.ИмяЭлементаКоллекции = КлючЗначение.Значение.Коллекция.ИмяЭлементаКоллекции;
			СтрокаЭлементаКоллекции.НомерКартинки        = КлючЗначение.Значение.Коллекция.НомерКартинки;
			
			Если Не ДанныеЭлементаКоллекции.ДанныеКоллекции.Количество() = 0 Тогда
				
				СтрокиКоллекцииРеквизиты = СтрокаЭлементаКоллекции.ПолучитьЭлементы();
				
				Для каждого СтруктураРеквизита Из ДанныеЭлементаКоллекции.ДанныеКоллекции Цикл
					
					СтрокаРеквизита = СтрокиКоллекцииРеквизиты.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаРеквизита, СтруктураРеквизита);
					
					//СтрокаРеквизита.Имя                  = СтруктураРеквизита.Имя;
					СтрокаРеквизита.Представление        = СтруктураРеквизита.Имя;
					//СтрокаРеквизита.Синоним              = СтруктураРеквизита.Синоним;
					//СтрокаРеквизита.ТипЗаписи            = СтруктураРеквизита.ТипЗаписи;
					СтрокаРеквизита.ИмяКоллекции         = "Реквизиты";
					СтрокаРеквизита.ИмяЭлементаКоллекции = "Реквизит";
					СтрокаРеквизита.НомерКартинки        = 45;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Элементы.СтруктураМетаданныхКонфигурации.Развернуть(ИдСтроки);
	
КонецПроцедуры

&НаСервере
Функция СтруктураОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных)
	
	Навигатор = РеквизитФормыВЗначение("Объект");
	СтруктураОбъекта = Навигатор.СтруктураОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных);
	
	Возврат СтруктураОбъекта;
	
КонецФункции

&НаКлиенте
Процедура СкрытьПоказатьПанельНавигации(ТипДействия = "")
	
	Если ЗначениеЗаполнено(ТипДействия) Тогда
		
		Если ТипДействия = "Скрыть" Тогда
			Элементы.СтраницыПанельНавигации.Видимость                   = Ложь;
			Элементы.КомандаСкрытьПоказатьПанельНавигации.Пометка        = Ложь;
			Элементы.КомандаСкрытьПоказатьПанельНавигацииБыстрая.Пометка = Ложь;
		КонецЕсли;
		
	Иначе
		
		ВидимостьПанели = Не Элементы.СтраницыПанельНавигации.Видимость;
		
		Элементы.СтраницыПанельНавигации.Видимость                   = ВидимостьПанели;
		Элементы.КомандаСкрытьПоказатьПанельНавигации.Пометка        = ВидимостьПанели;
		Элементы.КомандаСкрытьПоказатьПанельНавигацииБыстрая.Пометка = ВидимостьПанели;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭлементПоНавигационнойСсылкеВРедакторе()
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(НавигационнаяСсылкаДляПерехода) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	// Сформировать определитель типа элементов.
	
	СтрокаДереваМд = Элементы.СтруктураМетаданныхКонфигурации.ТекущиеДанные;
	
	ОпределительТипаЭлементов = "";
	Если Не (СтрокаДереваМд = Неопределено) Тогда
		ОпределительТипаЭлементов = ПодставитьПараметрыВСтроку("%1.%2", СтрокаДереваМд.ИмяЭлементаКоллекции, СтрокаДереваМд.Имя);
	КонецЕсли;
	
	СсылкаНаЭлемент = ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылкаДляПерехода, ОпределительТипаЭлементов);
	
	Если Не ЗначениеЗаполнено(СсылкаНаЭлемент) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ОбъектБазы", СсылкаНаЭлемент);
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьПанельИзбранныхЭлементов(ТипДействия = "")
	
	Если ЗначениеЗаполнено(ТипДействия) Тогда
		
		Если ТипДействия = "Скрыть" Тогда
			
			Элементы.СтраницаИзбранное.Видимость = Ложь;
			
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Ложь;
			Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка = Ложь;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницаИзбранное.Видимость = Не Элементы.СтраницаИзбранное.Видимость;
		
		Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементовБыстрая.Пометка = Элементы.СтраницаИзбранное.Видимость;
		Элементы.КомандаСкрытьПоказатьПанельИзбранныхЭлементов.Пометка = Элементы.СтраницаИзбранное.Видимость;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаИзбранное;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьИсториюНавигации(ТипДействия = "")
	
	Если ЗначениеЗаполнено(ТипДействия) Тогда
		
		Если ТипДействия = "Скрыть" Тогда
			
			Элементы.СтраницаИстория.Видимость = Ложь;
			
			Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Ложь;
			Элементы.КомандаСкрытьПоказатьИсторию.Пометка = Ложь;
			
			Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаИстория;
			
		КонецЕсли;
		
	Иначе
		
		Элементы.СтраницаИстория.Видимость = Не Элементы.СтраницаИстория.Видимость;
		
		Элементы.КомандаСкрытьПоказатьИсториюБыстрая.Пометка = Элементы.СтраницаИстория.Видимость;
		Элементы.КомандаСкрытьПоказатьИсторию.Пометка = Элементы.СтраницаИстория.Видимость;
		
		Элементы.СтраницыФормы.ТекущаяСтраница = Элементы.СтраницаИстория;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВсеОкнаРедакторов()
	
	Оповестить("ЗакрытьВсеОкнаРедакторов", Неопределено, "Навигатор");
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьОтобразитьПанельСтраниц()
	
	УстановитьВидимостьПанелиСтраницНавигатора(Не Элементы.СтраницыФормы.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКонсольКода()
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "КонсольКода");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьПанелиСтраницНавигатора(ФлВидимость)
	
	Элементы.СтраницыФормы.Видимость = ФлВидимость;
	
	Элементы.КомандаСкрытьОтобразитьПанельСтраниц.Пометка = Элементы.СтраницыФормы.Видимость;
	Элементы.КомандаСкрытьОтобразитьПанельСтраницБыстрая.Пометка = Элементы.СтраницыФормы.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКолонкуКомментарий()
	
	Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость = Не Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость;
	
	ФлВидимость = Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость;
	
	Элементы.КомандаСкрытьПоказатьКолонкуКомментарий.Пометка = ФлВидимость;
	Элементы.КомандаСкрытьПоказатьКолонкуКомментарийБыстрая.Пометка = ФлВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПоказатьКолонкуСиноним()
	
	Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость = Не Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость;
	
	ФлВидимость = Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость;
	
	Элементы.КомандаСкрытьПоказатьКолонкуСиноним.Пометка = ФлВидимость;
	Элементы.КомандаСкрытьПоказатьКолонкуСинонимБыстрая.Пометка = ФлВидимость;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноРасположитьКомандыСпискаЭлементов(ИмяСпискаЭлементов)
	
	//
	
	ИмяЭлементаКоманды = ИмяСпискаЭлементов + "НастройкаСписка";
	
	ЭлементКоманды = Элементы[ИмяЭлементаКоманды];
	ЭлементКоманды.ТолькоВоВсехДействиях = Ложь;
	ЭлементКоманды.Отображение = ОтображениеКнопки.Картинка;
	
	Попытка
		Элементы.Переместить(ЭлементКоманды, Элементы[ИмяСпискаЭлементов].КоманднаяПанель, Элементы[ИмяСпискаЭлементов].КоманднаяПанель.ПодчиненныеЭлементы[0]);
	Исключение
	КонецПопытки;
	
	ИменаЭлементовДляДорисовки.Добавить(ИмяЭлементаКоманды);
	
	//
	
	ИмяЭлементаКоманды = ИмяСпискаЭлементов + "Обновить";
	
	ЭлементКоманды = Элементы[ИмяЭлементаКоманды];
	ЭлементКоманды.ТолькоВоВсехДействиях = Ложь;
	ЭлементКоманды.Отображение = ОтображениеКнопки.Картинка;
	
	Попытка
		Элементы.Переместить(ЭлементКоманды, Элементы[ИмяСпискаЭлементов].КоманднаяПанель, Элементы[ИмяСпискаЭлементов].КоманднаяПанель.ПодчиненныеЭлементы[0]);
	Исключение
	КонецПопытки;
	
	ИменаЭлементовДляДорисовки.Добавить(ИмяЭлементаКоманды);
	
	//
	
	Для каждого ЭлДорисовки Из ИменаЭлементовДляДорисовки Цикл
		
		Попытка
			ЭлементКоманды = Элементы[ЭлДорисовки.Значение];
		Исключение
			Продолжить;
		КонецПопытки;
		
		ЭлементКоманды.ТолькоВоВсехДействиях = Ложь;
		ЭлементКоманды.Отображение = ОтображениеКнопки.Картинка;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьНаличиеОбновлений() Экспорт
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "ОбновлениеПрограммы");
	ОткрытьФорму(ПолноеИмяФормы, , ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстНастройкиНавигатораHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если ДанныеСобытия.Event.srcElement.id = "Настройки_ОтображатьПанельИзбранногоПриОткрытии" Тогда
		ЗнчНастройки = (ДанныеСобытия.Event.srcElement.value = "on");
		Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии = ЗнчНастройки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииПриВыборе()
	
	#Область Предусловия
	
	ТекущиеДанные = Элементы.ИсторияНавигации.ТекущиеДанные;
	
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяПоля = Элементы.ИсторияНавигации.ТекущийЭлемент.Имя;
	
	ВдСтроки = Элементы.ИсторияНавигации.ВыделенныеСтроки;
	
	Если ВдСтроки.Количество() > 1 Тогда
		Для каждого ВдСтрока Из ВдСтроки Цикл
			стр_ИсторияНавигации = Объект.ИсторияНавигации.НайтиПоИдентификатору(ВдСтрока);
			ИсторияНавигацииОбработчикВыбораСтроки(стр_ИсторияНавигации, ИмяПоля);
		КонецЦикла;
	Иначе
		ИсторияНавигацииОбработчикВыбораСтроки(ТекущиеДанные, ИмяПоля);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияНавигацииОбработчикВыбораСтроки(ТекущиеДанные, ИмяПоля)
	
	Если ТекущиеДанные.ТипЭлемента = "ИдСпискаЭлементов" Или ИмяПоля = "ИсторияНавигацииТипЗначения" Тогда
		
		ИскатьПоИмениЭлементаКоллекции = Ложь;
		
		Если ТекущиеДанные.ТипЭлемента = "ИдСпискаЭлементов" Тогда
			ЭлементНавигации = Строка(ТекущиеДанные.Ссылка);
		ИначеЕсли ИмяПоля = "ИсторияНавигацииТипЗначения" Тогда
			ЭлементНавигации = ТекущиеДанные.ТипЗначения;
			ИскатьПоИмениЭлементаКоллекции = Истина;
		КонецЕсли;
		
		ДанныеСтроки = Неопределено;
		ОпределитьДанныеСтрокиДереваМД(ДанныеСтроки, ЭлементНавигации, ИскатьПоИмениЭлементаКоллекции);
		
		Если Не (ДанныеСтроки = Неопределено) Тогда
			ПриВыбореСтрокиСтруктурыМетаданныхКонфигурации(ДанныеСтроки);
		КонецЕсли;
		
	Иначе
		
		ПараметрыОткрытия = Новый Структура("ОбъектБазы", ТекущиеДанные.Ссылка);
		
		ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторОбъекта");
		ОткрытьФорму(ПолноеИмяФормы, ПараметрыОткрытия, ЭтаФорма, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьВсе()
	
	ЗакрытьВсеОкнаРедакторов();
	ЗакрытьВсеСтраницы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСтрокиПоискаПоСтруктуреМетаданных()
	
	ПоискПоСтруктуреМетаданныхСервер();
	СтрокаПоискаПоСтруктуреМетаданныхПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоСтруктуреМетаданныхКлиент()
	
	ПоискПоСтруктуреМетаданныхСервер();
	СтрокаПоискаПоСтруктуреМетаданныхПриИзмененииКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаПоСтруктуреМетаданныхПриИзмененииКлиент()
	
	Если ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		
		ЭлементыДерева = СтруктураМетаданныхКонфигурации.ПолучитьЭлементы();
		
		Для каждого ЭлементДерева Из ЭлементыДерева Цикл
			Элементы.СтруктураМетаданныхКонфигурации.Развернуть(ЭлементДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчисткаСтрокиПоискаПоСтруктуреМетаданных()
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаПоискаПоСтруктуреМетаданных = "";
	ПоискПоСтруктуреМетаданныхСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытьВсеСтраницы()
	
	Пока ИменаКомандЗакрытияСписков.Количество() <> 0 Цикл
		
		ЭлСписка = ИменаКомандЗакрытияСписков.Получить(0);
		Если ЭлСписка = Неопределено Тогда
			Прервать;
		КонецЕсли;
		
		СписокЭлементовОбъектаМетаданныхЗакрыть(ЭлСписка.Значение);
		
	КонецЦикла; 
	
	ИменаКомандЗакрытияСписков.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДанныеСтрокиДереваМД(ДанныеСтроки, ЭлементНавигации, ИскатьПоИмениЭлементаКоллекции = Ложь)
	
	ДанныеСтроки = Неопределено;
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементНавигации) Тогда
		Возврат;
	КонецЕсли;
	
	ЧастиИмениЭлемента = РазложитьСтрокуВМассивПодстрок(ЭлементНавигации, ".");
	
	Если ЧастиИмениЭлемента.Количество() < 2 Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	дз_СтруктураМД = РеквизитФормыВЗначение("СтруктураМетаданныхКонфигурации");
	
	Если ИскатьПоИмениЭлементаКоллекции Тогда
		Строки = дз_СтруктураМД.Строки.НайтиСтроки(Новый Структура("ИмяЭлементаКоллекции, Имя", ЧастиИмениЭлемента[0], ЧастиИмениЭлемента[1]), Истина);
	КонецЕсли;
	
	Если Строки.Количество() = 0 Тогда
		Строки = дз_СтруктураМД.Строки.НайтиСтроки(Новый Структура("ИмяКоллекции, Имя", ЧастиИмениЭлемента[0], ЧастиИмениЭлемента[1]), Истина);
	КонецЕсли;
	
	ДанныеСтроки = Тип_ЗаписьСтруктурыМетаданныхКонфигурации();
	
	Если Строки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строки[0]);
	Иначе
		
		ИмяКоллекции = Навигатор.ИмяСвойстваГлобальногоКонтекста(ЧастиИмениЭлемента[0]);
		
		ДанныеСтроки.Имя                  = ЧастиИмениЭлемента[1]; // "НастраиваемыйОтчет"
		ДанныеСтроки.ИмяКоллекции         = ИмяКоллекции;          // "Документы"
		ДанныеСтроки.ИмяФормы             = "";                    // ""
		ДанныеСтроки.ИмяЭлементаКоллекции = ЧастиИмениЭлемента[0]; // "Документ"
		ДанныеСтроки.КоличествоЗаписей    = 0;                     // 347 412
		ДанныеСтроки.Комментарий          = "";                    // ""
		ДанныеСтроки.НеОтображать         = Ложь;                  // Ложь
		ДанныеСтроки.НомерКартинки        = 0;                     // 5
		ДанныеСтроки.ПолноеИмя            = ЭлементНавигации;      // "Документ.НастраиваемыйОтчет"
		ДанныеСтроки.Представление        = "";                    // "НастраиваемыйОтчет (347 412)"
		ДанныеСтроки.Синоним              = "";                    // "Экземпляр отчета"
		ДанныеСтроки.ТипЗаписи            = "ОбъектМетаданных";
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСписокЭлементовКоллекции(ДанныеСтроки, ИмяСпискаЭлементов = "")
	
	// Добавить страницу списка элементов объекта метаданных.
	
	СтраницаСпискаЭлементовОМ = Неопределено;
	ДобавитьСтраницуСпискаЭлементовОбъектаМетаданных(ДанныеСтроки, СтраницаСпискаЭлементовОМ);
	
	Если СтраницаСпискаЭлементовОМ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Добавить список элементов объекта метаданных.
	
	СписокЭлементовОбъектаМетаданных = Неопределено;
	
	ДобавитьСписокЭлементовОбъектаМетаданных(ДанныеСтроки, СтраницаСпискаЭлементовОМ, СписокЭлементовОбъектаМетаданных);
	ДобавитьКолонкиСпискаЭлементовОбъектаМетаданных(СписокЭлементовОбъектаМетаданных, ДанныеСтроки);
	
	// Активизировать добавленную страницу.
	
	Элементы.СтраницыФормы.ТекущаяСтраница = СтраницаСпискаЭлементовОМ;
	
	Если Не (СписокЭлементовОбъектаМетаданных = Неопределено) Тогда
		ИмяСпискаЭлементов = СписокЭлементовОбъектаМетаданных.Имя;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСписокЭлементовОбъектаМетаданных(СтрокаСтруктуры, СтраницаСписка, СписокЭлементов)
	
	// TODO: В зависимости от типа источника требуется отображать список по разному.
	// Например, для регистра бухгалтерии потребуется отображать таблицу "ДвижениясСубконто".
	// Сбор текста запроса динамического списка необходимо выполнять с помощью схемы запроса.
	
	ИмяСпискаЭлементов = ИмяСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	ИмяОсновнойТаблицыСписка = ИмяОсновнойТаблицыСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	
	// Добавить реквизит формы списка элементов.
	
	РеквизитФормы = Новый РеквизитФормы(
		ИмяСпискаЭлементов, 
		Новый ОписаниеТипов("ДинамическийСписок"), 
		, 
		СтрокаСтруктуры.ИмяЭлементаКоллекции + "." + СтрокаСтруктуры.Имя
	);
	
	ДобавляемыеРеквизиты = Новый Массив;
	ДобавляемыеРеквизиты.Добавить(РеквизитФормы);
	
	ЭтаФорма.ИзменитьРеквизиты(ДобавляемыеРеквизиты);
	ЭтаФорма[ИмяСпискаЭлементов].ОсновнаяТаблица = ИмяОсновнойТаблицыСписка;
	
	// Добавить элемент формы - список.
	
	СписокЭлементов = ЭтаФорма.Элементы.Добавить(ИмяСпискаЭлементов, Тип("ТаблицаФормы"), СтраницаСписка);
	СписокЭлементов.ПутьКДанным = ИмяСпискаЭлементов;
	СписокЭлементов.Видимость = Истина;
	
	ИмяГруппыКнопок = "";
	ДобавитьГруппуДляДополнительныхКомандСпискаЭлементов(СписокЭлементов, ИмяГруппыКнопок);
	
	ДобавитьКомандуНастройкиКолонокСпискаЭлементовОбъектаМетаданных(СписокЭлементов, ИмяГруппыКнопок);
	ДобавитьКомандуДобавленияВИзбранноеСпискаЭлементовОбъектаМетаданных(СписокЭлементов, ИмяГруппыКнопок);
	ДобавитьКомандуВыбораВыделенныхЭлементовДляВыгрузки(СписокЭлементов, ИмяГруппыКнопок);
	ДобавитьКомандуРедактированияЗаписиРегистра(СписокЭлементов, ИмяГруппыКнопок);
	ДобавитьКомандуЗакрытияСпискаЭлементовОбъектаМетаданных(СписокЭлементов);
	
	СписокЭлементов.УстановитьДействие("Выбор", "Подключаемый_СписокЭлементовОбъектаМетаданныхВыбор");
	СписокЭлементов.УстановитьДействие("НачалоПеретаскивания", "Подключаемый_СписокЭлементовОбъектаМетаданныхНачалоПеретаскивания");
	СписокЭлементов.УстановитьДействие("ОкончаниеПеретаскивания", "Подключаемый_СписокЭлементовОбъектаМетаданныхОкончаниеПеретаскивания");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКолонкиСпискаЭлементовОбъектаМетаданных(СписокЭлементов, СтрокаСтруктуры)
	
	ИмяСписка = СписокЭлементов.Имя;
	
	ПараметрыКолонок = ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктуры);
	
	Для каждого КлючЗначение Из ПараметрыКолонок Цикл
		
		КоллекцияКолонок = КлючЗначение.Значение;
		
		Для Каждого ПараметрыКолонки Из КоллекцияКолонок Цикл
			
			ИмяКолонкиСписка = ИмяКолонкиСпискаЭлементовОбъектаМетаданных(ПараметрыКолонки.ИмяРеквизита, СтрокаСтруктуры);
			ПутьКДаннымКолонкиСписка = ПутьКДаннымКолонкиСпискаЭлементовОбъектаМетаданных(ИмяСписка, ПараметрыКолонки.ИмяРеквизита);
			
			Попытка
				
				Колонка = Элементы.Добавить(ИмяКолонкиСписка, Тип("ПолеФормы"), Элементы[ИмяСписка]);
				Колонка.Вид = ВидПоляФормы.ПолеНадписи;
				Колонка.ПутьКДанным = ПутьКДаннымКолонкиСписка;
				Колонка.Заголовок = ПараметрыКолонки.ИмяРеквизита;
				Колонка.Видимость = ПараметрыКолонки.Видимость;
				
			Исключение
				//
			КонецПопытки;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГруппуДляДополнительныхКомандСпискаЭлементов(СписокЭлементов, ИмяГруппыКнопок)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяГруппыКнопок = ИмяГруппыКнопокСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя);
	
	Элемент = Элементы.Добавить(ИмяГруппыКнопок, Тип("ГруппаФормы"), Элементы[СписокЭлементов.Имя].КоманднаяПанель);
	Элемент.Вид = ВидГруппыФормы.ГруппаКнопок;
	Элемент.Отображение = ОтображениеГруппыКнопок.Компактное;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуНастройкиКолонокСпискаЭлементовОбъектаМетаданных(СписокЭлементов, ИмяГруппыКнопок)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "НастройкаКолонок");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаСписокЭлементовОМНастроитьКолонки";
	Команда.Подсказка = "Настроить видимость колонок";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппыКнопок]);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Колонки";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = БиблиотекаКартинок.НастройкиОтчета;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуВыбораВыделенныхЭлементовДляВыгрузки(СписокЭлементов, ИмяГруппыКнопок)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "ВыбратьВыделенныеДляВыгрузки");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаСписокЭлементовОМВыбратьВыделенныеДляВыгрузки";
	Команда.Подсказка = "Выбрать выделенные для выгрузки";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппыКнопок]);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Выбрать выделенные для выгрузки";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаВыгрузить.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуДобавленияВИзбранноеСпискаЭлементовОбъектаМетаданных(СписокЭлементов, ИмяГруппыКнопок)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "ДобавитьВИзбранное");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаСписокЭлементовОМДобавитьВИзбранное";
	Команда.Подсказка = "Добавить в избранное";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппыКнопок]);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Добавить в избранное";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаБыстрыйДоступДобавить.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуЗакрытияСпискаЭлементовОбъектаМетаданных(СписокЭлементов, Подменю = Неопределено)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "Закрыть");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаСписокЭлементовОМЗакрыть";
	Команда.Подсказка = "Закрыть страницу";
	
	Если (Подменю = Неопределено) Тогда
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[СписокЭлементов.Имя].КоманднаяПанель);
	Иначе
		Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Подменю);
	КонецЕсли;
	
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Закрыть";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаЗакрыть.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
	ИменаКомандЗакрытияСписков.Добавить(ИмяКоманды);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКомандуРедактированияЗаписиРегистра(СписокЭлементов, ИмяГруппыКнопок)
	
	#Область Предусловия
	
	Если СписокЭлементов = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Предусловие:
	//	Команда редактирования записи регистра доабвляется только для регистров.
	
	ТипИсточникаДанных = ТипИсточникаДанныхСпискаЭлементов(СписокЭлементов.Имя);
	
	Если Не ЗначениеЗаполнено(ТипИсточникаДанных) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не (ТипИсточникаДанных = "РегистрСведений" Или ТипИсточникаДанных = "РегистрНакопления" Или ТипИсточникаДанных = "РегистрБухгалтерии" Или ТипИсточникаДанных = "РегистрРасчетов") Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяКоманды = ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(СписокЭлементов.Имя, "РедактированиеЗаписи");
	
	Команда = ЭтаФорма.Команды.Добавить(ИмяКоманды);
	Команда.Действие  = "КомандаСписокЭлементовОМРедактированиеЗаписи";
	Команда.Подсказка = "Редактировать запись";
	
	Элемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), Элементы[ИмяГруппыКнопок]);
	Элемент.ИмяКоманды            = ИмяКоманды;
	Элемент.ТолькоВоВсехДействиях = Ложь;
	Элемент.Заголовок             = "Редактировать запись регистра";
	Элемент.Отображение           = ОтображениеКнопки.Картинка;
	Элемент.Картинка              = Элементы.КартинкаРедактироватьСтроку.Картинка;
	Элемент.ОтображениеФигуры     = ОтображениеФигурыКнопки.ПриАктивности;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтраницуСпискаЭлементовОбъектаМетаданных(СтрокаМД, СтраницаСписка)
	
	СтраницаСписка = Неопределено;
	
	ИмяСтраницы = ИмяСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД);
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяСтраницы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	//
	
	ЗаголовокСтраницы = ЗаголовокСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД);
	КартинкаСтраницы  = КартинкаСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД);
	ПодсказкаСтраницы = ПодсказкаСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД);
	
	// Добавить страницу для списка элементов.
	
	СтраницаСписка = ЭтаФорма.Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), ЭтаФорма.Элементы.СтраницыФормы);
	СтраницаСписка.Заголовок = ЗаголовокСтраницы;
	СтраницаСписка.Картинка  = КартинкаСтраницы;
	СтраницаСписка.Подсказка = ПодсказкаСтраницы;
	СтраницаСписка.ОтображениеПодсказки = ОтображениеПодсказки.Всплывающая;
	
КонецПроцедуры

&НаСервере
Процедура УвеличитьСчетчикДобавленныхЭлементов()
	
	СчетчикДобавленныхЭлементов = СчетчикДобавленныхЭлементов + 1;
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОМВыбратьВыделенныеДляВыгрузки(ИмяЭлементаКоманды, ВыделенныеОбъекты)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКоманды) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	ЧастиСтроки = Навигатор.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаКоманды, _); 
		// "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2"
	
	ИмяСписка = Навигатор.ПодставитьПараметрыВСтроку(
		"Список" + _ + "%1" + _ + "%2" + _ + "%3" + _ + "%4", 
		ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]
	);
	
	ВыделенныеОбъекты = Элементы[ИмяСписка].ВыделенныеСтроки;
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОМДобавитьВИзбранное(ИмяЭлементаКомандыДобавленияВИзбранное, ДобавленныйЭлемент = Неопределено);
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыДобавленияВИзбранное) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	ЧастиСтроки = Навигатор.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаКомандыДобавленияВИзбранное, _); 
		// "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2"
	
	ИмяСписка = Навигатор.ПодставитьПараметрыВСтроку(
		"Список" + _ + "%1" + _ + "%2" + _ + "%3" + _ + "%4", 
		ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]
	);
	
	ДобавленныйЭлемент = Элементы[ИмяСписка].ТекущаяСтрока;
	
	ДобавитьЭлементВИзбранное(ДобавленныйЭлемент);
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОбъектаМетаданныхЗакрыть(ИмяЭлементаКомандыЗакрытия)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	// Удаляет элементы и реквизиты.
	
	ЧастиСтроки = Навигатор.РазложитьСтрокуВМассивПодстрок(
		ИмяЭлементаКомандыЗакрытия, 
		Объект.Система_РазделительЧастейИмен
	); // "Команда_Закрыть_Список_Справочники_Справочник_ДоговорыКонтрагентов_2"
	
	// TODO: Переделать на централизованные функции определения имен элементов. 
	// Иначе расползется и костей не собрать.
	
	ИмяСписка = Навигатор.ПодставитьПараметрыВСтроку("Список" + _ + "%1" + _ + "%2" + _ + "%3" + _ + "%4",
		ЧастиСтроки[3], ЧастиСтроки[4], ЧастиСтроки[5], ЧастиСтроки[6]
	);
	
	ИмяСтраницы = "";
	
	Для каждого Страница Из Элементы.СтраницыФормы.ПодчиненныеЭлементы Цикл
		
		Для каждого ПодчиненныйЭлемент Из Страница.ПодчиненныеЭлементы Цикл
			
			Если ПодчиненныйЭлемент.Имя = ИмяСписка Тогда
				ИмяСтраницы = Страница.Имя;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Сформировать списки реквизитов и элементов на удаление.
	
	МассивЭлементов = Новый Массив;
	МассивЭлементов.Добавить(ИмяЭлементаКомандыЗакрытия);
	МассивЭлементов.Добавить(ИмяСписка);
	МассивЭлементов.Добавить(ИмяСтраницы);
	
	МассивРеквизитов = Новый Массив;
	МассивРеквизитов.Добавить(ИмяСписка);
	
	// ... удаляем элементы в начале.
	Для каждого ИмяЭлемента Из МассивЭлементов Цикл
		Элементы.Удалить(Элементы[ИмяЭлемента]);
	КонецЦикла;
	
	// ... потом реквизиты.
	ЭтаФорма.ИзменитьРеквизиты(, МассивРеквизитов);
	ЭтаФорма.Команды.Удалить(ЭтаФорма.Команды[ИмяЭлементаКомандыЗакрытия]);
	
	// ... удалить имя команды из списка команд закрытия.
	ЭлСписка = ИменаКомандЗакрытияСписков.НайтиПоЗначению(ИмяЭлементаКомандыЗакрытия);
	Если Не (ЭлСписка = Неопределено) Тогда
		ИменаКомандЗакрытияСписков.Удалить(ЭлСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СписокЭлементовОбъектаМетаданныхНастроитьКолонки(ИмяЭлементаКомандыНастройки)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ИмяЭлементаКомандыНастройки) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	ЧастиСтроки = Навигатор.РазложитьСтрокуВМассивПодстрок(ИмяЭлементаКомандыНастройки, Объект.Система_РазделительЧастейИмен);
	
	ИмяКоллекции = ЧастиСтроки[3];
	ИмяОбъектаМетаданных = ЧастиСтроки[5];
	
	// Установить заголовок.
	Элементы.НастройкиКолонокСпискаИмя.Заголовок = ЧастиСтроки[4] + "." + ЧастиСтроки[5];
	
	// Определить имя элемента списка.
	ЧастиСтрокиИмениЭлементаСписка = Новый Массив;
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[2]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[3]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[4]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[5]);
	ЧастиСтрокиИмениЭлементаСписка.Добавить(ЧастиСтроки[6]);
	
	ИмяЭлементаСписка = Навигатор.СтрокаИзМассиваПодстрок(ЧастиСтрокиИмениЭлементаСписка, Объект.Система_РазделительЧастейИмен);
	
	// Получить таблицу элементов списка.
	тз_ТаблицаКолонокЭлементаСписка = Новый ТаблицаЗначений;
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("ИмяКолонки");
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("ИмяРеквизита");
	тз_ТаблицаКолонокЭлементаСписка.Колонки.Добавить("Видимость");
	
	Для каждого ЭлКолонка Из Элементы[ИмяЭлементаСписка].ПодчиненныеЭлементы Цикл
		
		СтрокаТз = тз_ТаблицаКолонокЭлементаСписка.Добавить();
		СтрокаТз.ИмяКолонки = ЭлКолонка.Имя;
		
		ЧастиСтрокиПутьКДанным = Навигатор.РазложитьСтрокуВМассивПодстрок(ЭлКолонка.ПутьКДанным, ".");
		СтрокаТз.ИмяРеквизита = ЧастиСтрокиПутьКДанным[1];
		СтрокаТз.Видимость = ЭлКолонка.Видимость;
		
	КонецЦикла;
	
	// Получить параметры колонок списка.
	ПараметрыКолонокСписка = Навигатор.ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(ИмяКоллекции, ИмяОбъектаМетаданных);
	
	дз_НастройкиКолонокСписка = РеквизитФормыВЗначение("НастройкиКолонокСписка");
	дз_НастройкиКолонокСписка.Строки.Очистить();
	
	Для каждого КлючЗначение Из ПараметрыКолонокСписка Цикл
		
		Если КлючЗначение.Значение.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		стр_ГруппаРеквизитов = дз_НастройкиКолонокСписка.Строки.Добавить();
		стр_ГруппаРеквизитов.ТипЗаписи = "ГруппаКолонок";
		стр_ГруппаРеквизитов.Имя = КлючЗначение.Ключ;
		
		Если КлючЗначение.Ключ = "СтандартныеРеквизиты" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 1;
		ИначеЕсли КлючЗначение.Ключ = "Реквизиты" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 2;
		ИначеЕсли КлючЗначение.Ключ = "Измерения" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 3;
		ИначеЕсли КлючЗначение.Ключ = "Ресурсы" Тогда
			стр_ГруппаРеквизитов.НомерКартинки = 4;
		КонецЕсли;
		
		стр_ГруппаРеквизитов.ИмяЭлементаСписка = ИмяЭлементаСписка;
		
		Для каждого ПараметрыКолонки Из КлючЗначение.Значение Цикл
			
			стр_Реквизит = стр_ГруппаРеквизитов.Строки.Добавить();
			стр_Реквизит.ТипЗаписи = "Колонка";
			стр_Реквизит.Имя = ПараметрыКолонки.ИмяРеквизита;
			стр_Реквизит.НомерКартинки = стр_ГруппаРеквизитов.НомерКартинки;
			стр_Реквизит.ИмяЭлементаСписка = ИмяЭлементаСписка;
			стр_Реквизит.ПредставлениеТипа = ПараметрыКолонки.ПредставлениеТипа;
			стр_Реквизит.Уровень = 1;
			стр_Реквизит.Синоним = ПараметрыКолонки.Синоним;
			
			СтрокаТаблицыКолонок = тз_ТаблицаКолонокЭлементаСписка.Найти(ПараметрыКолонки.ИмяРеквизита, "ИмяРеквизита");
			
			Если Не (СтрокаТаблицыКолонок = Неопределено) Тогда
				стр_Реквизит.ИмяКолонки = СтрокаТаблицыКолонок.ИмяКолонки;
				стр_Реквизит.Видимость = СтрокаТаблицыКолонок.Видимость;
			КонецЕсли;
			
		КонецЦикла;
		
		стр_ГруппаРеквизитов.Строки.Сортировать("Имя");
		
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(дз_НастройкиКолонокСписка, "НастройкиКолонокСписка");
	
	Элементы.НастройкиКолонокСпискаВидимость.Заголовок = Элементы[ИмяЭлементаСписка].Родитель.Заголовок;
	Элементы.ГруппаНастройкаКолонокСписка.Видимость = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьКоличествоВсехЭлементовВсехКоллекцийКлиент()
	
	Если ЕстьБСП Тогда
		
		ПараметрыЗапуска = Новый Структура;
		ПараметрыЗапуска.Вставить("АдресДереваМетаданных", АдресДереваМетаданных());
		
		ИмяМетода = "ПолучитьКоличествоВсехЭлементовВсехКоллекций";
		
		СтруктураФоновогоЗадания = ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыЗапуска, УникальныйИдентификатор, ИмяМетода);
		
		//ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		//ПараметрыОжидания.ФормаВладелец                  = ЭтаФорма;
		//ПараметрыОжидания.ТекстСообщения                 = "Определение количества элементов";
		//ПараметрыОжидания.ВыводитьОкноОжидания           = Ложь;
		//ПараметрыОжидания.ВыводитьПрогрессВыполнения     = Истина;
		//ПараметрыОжидания.ОповещениеОПрогрессеВыполнения = Неопределено;
		//ПараметрыОжидания.ВыводитьСообщения              = Ложь;
		//ПараметрыОжидания.Интервал                       = 10;
		//ПараметрыОжидания.ПолучатьРезультат              = Ложь;
		
		//ДлительныеОперацииКлиент.ОжидатьЗавершение(СтруктураФоновогоЗадания, 
		//	Новый ОписаниеОповещения("ПриЗавершенииВыполненияФоновогоЗадания", ЭтотОбъект, 
		//		Новый Структура("ИмяМетода", ИмяМетода)), ПараметрыОжидания);
		
	Иначе
		ОтобразитьКоличествоВсехЭлементовВсехКоллекцийСервер();
	КонецЕсли;
	
КонецПроцедуры

// Вызывается при завершении фонового задания.
//
// Параметры:
//	* Результат - Структура, Неопределено - структура со свойствами или Неопределено, если задание было отменено. Свойства: 
//	   ** Статус           - Строка - "Выполнено", если задание было успешно выполнено;
//	                                  "Ошибка", если задание завершено с ошибкой.
//	   ** АдресРезультата  - Строка - адрес временного хранилища, в которое будет
//	                                  помещен (или уже помещен) результат работы процедуры.
//	   ** АдресДополнительногоРезультата - Строка - если установлен параметр ДополнительныйРезультат, 
//	                                     содержит адрес дополнительного временного хранилища,
//	                                     в которое будет помещен (или уже помещен) результат работы процедуры.
//	   ** КраткоеПредставлениеОшибки   - Строка - краткая информация об исключении, если Статус = "Ошибка".
//	   ** ПодробноеПредставлениеОшибки - Строка - подробная информация об исключении, если Статус = "Ошибка".
//	   ** Сообщения        - ФиксированныйМассив, Неопределено - массив объектов СообщениеПользователю, 
//                                                сформированных в процедуре-обработчике длительной операции.
//   * ДополнительныеПараметры - Произвольный - произвольные данные, переданные в описании оповещения. 
//
&НаКлиенте
Процедура ПриЗавершенииВыполненияФоновогоЗадания(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат.Статус = "Ошибка" Тогда
		ТекстОписаниеОшибки = СтрШаблон("При выполнении метода %1() произошла ошибка: '%2'
			|Подробное представление ошибки: '%3'", ДополнительныеПараметры.ИмяМетода, Результат.КраткоеПредставлениеОшибки, Результат.ПодробноеПредставлениеОшибки);
		Сообщить(ТекстОписаниеОшибки);
		Возврат;
	КонецЕсли;
	
	ПриЗавершенииВыполненияФоновогоЗаданияНаСервере(Результат, ДополнительныеПараметры);
	
КонецПроцедуры

&НаСервере
Процедура ПриЗавершенииВыполненияФоновогоЗаданияНаСервере(Результат, ДополнительныеПараметры)
	
	Перем ИмяМетода;
	
	ДополнительныеПараметры.Свойство("ИмяМетода", ИмяМетода);
	
	Если ИмяМетода = "ПолучитьКоличествоВсехЭлементовВсехКоллекций" Тогда
		
		дз_ДеревоМетаданных = ПолучитьИзВременногоХранилища(Результат.АдресРезультата);
		УдалитьИзВременногоХранилища(Результат.АдресРезультата);
		
		Если Не (дз_ДеревоМетаданных = Неопределено) Тогда
			ЗначениеВРеквизитФормы(дз_ДеревоМетаданных, "СтруктураМетаданныхКонфигурации");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция АдресДереваМетаданных()
	
	дз_ДеревоМетаданных = РеквизитФормыВЗначение("СтруктураМетаданныхКонфигурации");
	Адрес = ПоместитьВоВременноеХранилище(дз_ДеревоМетаданных, УникальныйИдентификатор);
	
	Возврат Адрес;
	
КонецФункции

&НаСервере
Процедура ОтобразитьКоличествоВсехЭлементовВсехКоллекцийСервер() Экспорт
	
	Навигатор = ЭтаОбработка();
	
	АдресДереваМетаданных = АдресДереваМетаданных();
	
	Навигатор.ПолучитьКоличествоВсехЭлементовВсехКоллекций(Новый Структура("АдресДереваМетаданных", АдресДереваМетаданных));
	дз_ДеревоМетаданных = ПолучитьИзВременногоХранилища(АдресДереваМетаданных);
	УдалитьИзВременногоХранилища(АдресДереваМетаданных);
	
	ЗначениеВРеквизитФормы(дз_ДеревоМетаданных, "СтруктураМетаданныхКонфигурации");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВИсторию(ЭлементНавигации)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементНавигации) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	ТипЭлемента = "";
	
	Если ТипЗнч(ЭлементНавигации) = ТипЗнч("") Тогда
		ТипЭлемента = "ИдСпискаЭлементов";
	Иначе
		ТипЭлемента = "СсылкаНаЭлемент";
	КонецЕсли; 
	
	НайденныеСтроки = Объект.ИсторияНавигации.НайтиСтроки(Новый Структура("Ссылка", ЭлементНавигации));
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		ВГраница = НайденныеСтроки.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			Объект.ИсторияНавигации.Удалить(НайденныеСтроки[ВГраница - ОбрИндекс]);
		КонецЦикла;
		
	КонецЕсли;
	
	стр_История = Объект.ИсторияНавигации.Добавить();
	стр_История.ИдЗаписи            = Новый УникальныйИдентификатор();
	стр_История.ТипЭлемента         = ТипЭлемента;
	стр_История.Представление       = ЭлементНавигации;
	стр_История.Ссылка              = ЭлементНавигации;
	стр_История.ДатаСобытия         = ТекущаяДата();
	
	Если ТипЭлемента = "СсылкаНаЭлемент" Тогда
		
		стр_История.НавигационнаяСсылка = Навигатор.НавигационнаяСсылкаНаЭлемент(ЭлементНавигации);
		
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(ТипЗнч(ЭлементНавигации));
		
		стр_История.ТипЗначения = Навигатор.СтрокаОписанияТипов(Новый ОписаниеТипов(МассивТипов));
		
	Иначе
		стр_История.НавигационнаяСсылка = "-";
		стр_История.ТипЗначения = "(Список)";
	КонецЕсли;
	
	//
	
	Объект.ИсторияНавигации.Сортировать("ДатаСобытия Убыв");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементВИзбранное(ЭлементБазы)
	
	#Область Предусловия
	
	Если Не ЗначениеЗаполнено(ЭлементБазы) Тогда
		Возврат;
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = ЭтаОбработка();
	
	//
	
	НайденныеСтроки = Объект.ИзбранныеЭлементы.НайтиСтроки(Новый Структура("Ссылка", ЭлементБазы));
	
	Если Не НайденныеСтроки.Количество() = 0 Тогда
		
		ВГраница = НайденныеСтроки.Количество() - 1;
		
		Для ОбрИндекс = 0 По ВГраница Цикл
			Объект.ИзбранныеЭлементы.Удалить(НайденныеСтроки[ВГраница - ОбрИндекс]);
		КонецЦикла;
		
	КонецЕсли;
	
	//
	
	стр_ИзбранныеЭлементы = Объект.ИзбранныеЭлементы.Добавить();
	стр_ИзбранныеЭлементы.ИдЗаписи      = Новый УникальныйИдентификатор();
	стр_ИзбранныеЭлементы.Представление = ЭлементБазы;
	стр_ИзбранныеЭлементы.Ссылка        = ЭлементБазы;
	
	МассивТипов = Новый Массив;
	МассивТипов.Добавить(ТипЗнч(ЭлементБазы));
	
	стр_ИзбранныеЭлементы.ТипЗначения = Навигатор.СтрокаОписанияТипов(Новый ОписаниеТипов(МассивТипов));
	
	стр_ИзбранныеЭлементы.НавигационнаяСсылка = Навигатор.НавигационнаяСсылкаНаЭлемент(ЭлементБазы);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьСостояниеРаботы()
	
	Попытка
		КлючОбъекта = "Навигатор1С_ИзбранныеЭлементы";
		КлючНастроек = "ИзбранныеЭлементы";
		НастройкиИзбранное = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("Объект").ИзбранныеЭлементы.Выгрузить());
		
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиИзбранное);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ИсторияНавигации";
		КлючНастроек = "ИсторияНавигации";
		НастройкиИсторияНавигации = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("Объект").ИсторияНавигации.Выгрузить());
		
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиИсторияНавигации);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "ОтображатьПанельИсторииПриОткрытии";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ОтображатьПанельИсторииПриОткрытии);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "СортироватьОбъектыМетаданных";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ОтображатьПанельИсторииПриОткрытии);
	Исключение
		//
	КонецПопытки;
	
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "ОтображатьПанельИзбранногоПриОткрытии";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "ПроверятьНаличиеОбновленийПриЗапуске";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ПроверятьНаличиеОбновленийПриЗапуске);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "ПодтверждатьЗакрытиеНавигатора";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_ПодтверждатьЗакрытиеНавигатора);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ОбщиеНастройки";
		КлючНастроек = "РежимРазработчика";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Объект.Настройки_РежимРазработчика);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
		КлючНастроек = "КолонкаКомментарийВидимость";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта = "Навигатор1С_ДополнительныеНастройки";
		КлючНастроек = "КолонкаСинонимВидимость";
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость);
	Исключение
		//
	КонецПопытки;
	
	Попытка
		КлючОбъекта  = "Навигатор1С_Проекты";
		КлючНастроек = "Проекты";
		
		НастройкиИзбранное = ЗначениеВСтрокуВнутр(РеквизитФормыВЗначение("Проекты").Выгрузить());
		ХранилищеОбщихНастроек.Сохранить(КлючОбъекта, КлючНастроек, НастройкиИзбранное);
	Исключение
		//
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьСостояниеРаботы()
	
	Навигатор = РеквизитФормыВЗначение("Объект");
	
	//
	
	КлючОбъекта = "Навигатор1С_ИзбранныеЭлементы";
	КлючНастроек = "ИзбранныеЭлементы";
	
	СтрокаИзбранное = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(СтрокаИзбранное) Тогда
		
		Навигатор.ИзбранныеЭлементы.Очистить();
		
		Попытка
			Навигатор.ИзбранныеЭлементы.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаИзбранное));
		Исключение
			//
		КонецПопытки;
		
	КонецЕсли;
	
	//
	
	КлючОбъекта = "Навигатор1С_ИсторияНавигации";
	КлючНастроек = "ИсторияНавигации";
	
	СтрокаИсторияНавигации = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если ЗначениеЗаполнено(СтрокаИсторияНавигации) Тогда
		
		Навигатор.ИсторияНавигации.Очистить();
		
		Попытка
			Навигатор.ИсторияНавигации.Загрузить(ЗначениеИзСтрокиВнутр(СтрокаИсторияНавигации));
		Исключение
			//
		КонецПопытки;
		
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Навигатор, "Объект");
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИсторииПриОткрытии";
	Объект.Настройки_ОтображатьПанельИсторииПриОткрытии = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "РежимРазработчика";
	Объект.Настройки_РежимРазработчика = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "СортироватьОбъектыМетаданных";
	Объект.Настройки_СортироватьОбъектыМетаданных = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ОтображатьПанельИзбранногоПриОткрытии";
	Объект.Настройки_ОтображатьПанельИзбранногоПриОткрытии = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ПодтверждатьЗакрытиеНавигатора";
	Объект.Настройки_ПодтверждатьЗакрытиеНавигатора = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ОбщиеНастройки";
	КлючНастроек = "ПроверятьНаличиеОбновленийПриЗапуске";
	Объект.Настройки_ПроверятьНаличиеОбновленийПриЗапуске = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	//
	
	КлючОбъекта  = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаКомментарийВидимость";
	
	фл_Видимость = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если Не (фл_Видимость = Неопределено) Тогда
		
		Элементы.СтруктураМетаданныхКонфигурацииКомментарий.Видимость = фл_Видимость;
		Элементы.КомандаСкрытьПоказатьКолонкуКомментарий.Пометка = фл_Видимость;
		Элементы.КомандаСкрытьПоказатьКолонкуКомментарийБыстрая.Пометка = фл_Видимость;
		
	КонецЕсли;
	
	//
	
	КлючОбъекта  = "Навигатор1С_ДополнительныеНастройки";
	КлючНастроек = "КолонкаСинонимВидимость";
	
	фл_Видимость = ХранилищеОбщихНастроек.Загрузить(КлючОбъекта, КлючНастроек);
	
	Если Не (фл_Видимость = Неопределено) Тогда
		
		Элементы.СтруктураМетаданныхКонфигурацииСиноним.Видимость = фл_Видимость;
		Элементы.КомандаСкрытьПоказатьКолонкуСиноним.Пометка = фл_Видимость;
		Элементы.КомандаСкрытьПоказатьКолонкуСинонимБыстрая.Пометка = фл_Видимость;
		
	КонецЕсли;
	
	//
	
КонецПроцедуры

&НаСервере
Процедура ПоискПоСтруктуреМетаданныхСервер()
	
	#Область Предусловия
	
	ТипПоиска = ТипПоискаПоСтруктуреМетаданных();
	
	Если ТипПоиска.Количество() = 0 Тогда
		ТипПоиска.Добавить("Имя");
	КонецЕсли;
	
	#КонецОбласти
	
	Навигатор = РеквизитФормыВЗначение("Объект");
	
	ПараметрыФормирования = Навигатор.Тип_ПараметрыФормированияСтруктурыМетаданных();
	ПараметрыФормирования.СортироватьОбъектыМетаданных         = Объект.Настройки_СортироватьОбъектыМетаданных;
	ПараметрыФормирования.АдресСтруктурыМетаданныхКонфигурации = АдресСтруктурыМетаданныхКонфигурации;
	ПараметрыФормирования.АдресСтруктураХраненияБазыДанных     = АдресСтруктураХраненияБазыДанных;
	
	Если ЗначениеЗаполнено(СтрокаПоискаПоСтруктуреМетаданных) Тогда
		
		Для Каждого эл_ТипПоиска Из ТипПоиска Цикл
			ПараметрыФормирования.Отбор.Добавить(
				Навигатор.Тип_ОтборФормированияСтруктурыМетаданных(эл_ТипПоиска, СтрокаПоискаПоСтруктуреМетаданных)
			);
		КонецЦикла;
		
	КонецЕсли;
	
	ДеревоМетаданных = Навигатор.СтруктураМетаданныхКонфигурации(ПараметрыФормирования);
	ЗначениеВРеквизитФормы(ДеревоМетаданных, "СтруктураМетаданныхКонфигурации");
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураСтрокиМетаданныхКонфигурации(ДанныеСтроки)
	
	Запись = Тип_ЗаписьСтруктурыМетаданныхКонфигурации();
	ЗаполнитьЗначенияСвойств(Запись, ДанныеСтроки);
	
	Результат = Запись;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяЭлементаСпискаРегистраПоИмениЭлементаКомандыРедактированияЗаписи(ИмяЭлемента)
	
	Навигатор = ЭтаОбработка();
	Возврат Навигатор.ИмяЭлементаСпискаРегистраПоИмениЭлементаКомандыРедактированияЗаписи(ИмяЭлемента);
	
КонецФункции

&НаСервере
Функция ПараметрыТаблицыЗаписиПоИмениЭлемента(ИмяЭлемента)
	
	Навигатор = ЭтаОбработка();
	Возврат Навигатор.ПараметрыТаблицыЗаписиПоИмениЭлемента(ИмяЭлемента);
	
КонецФункции

&НаСервере
Функция ПараметрыЗаписиТаблицыРегистра(ДанныеЗаписи, ПараметрыТаблицы)
	
	Навигатор = ЭтаОбработка();
	Возврат Навигатор.ПараметрыЗаписиТаблицыРегистра(ДанныеЗаписи, ПараметрыТаблицы);
	
КонецФункции

&НаСервере
Функция ТипПоискаПоСтруктуреМетаданных()
	
	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;
	
	//
	
	ТипПоиска = Новый Массив;
	
	Если Элементы.КомандаОбластьПоискаИмя.Пометка Тогда
		ТипПоиска.Добавить("Имя");
	КонецЕсли;
	
	Если Элементы.КомандаОбластьПоискаСиноним.Пометка Тогда
		ТипПоиска.Добавить("Синоним");
	КонецЕсли;
	
	Если Элементы.КомандаОбластьПоискаКомментарий.Пометка Тогда
		ТипПоиска.Добавить("Комментарий");
	КонецЕсли;
	
	//
	
	Результат = ТипПоиска;
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ТипИсточникаДанныхСпискаЭлементов(ИмяСпискаЭлементов)
	
	Результат = РеквизитФормыВЗначение("Объект").ТипИсточникаДанныхСпискаЭлементов(ИмяСпискаЭлементов);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КартинкаСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД)
	
	Результат = Новый Картинка;
	ПустойРезультат = Новый Картинка;
	
	#Область Предусловия
	
	Если СтрокаМД = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Попытка
		Результат = БиблиотекаКартинок[СтрокаМД.ИмяЭлементаКоллекции];
	Исключение
		Возврат ПустойРезультат;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодсказкаСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД)
	
	Возврат СтрокаМД.ИмяЭлементаКоллекции + СтрокаМД.Имя;
	
КонецФункции

&НаСервере
Функция ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки)
	
	Возврат ЭтаОбработка().ПолноеИмяФормыОбработки(ИмяТекущейФормы, ИмяФормыОбработки);
	
КонецФункции

&НаСервере
Функция ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта)
	
	Результат = ЭтаОбработка().ИмяОсновнойФормыОбъектаОбработкиДанных(СвойстваОбъекта);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции)
	
	Результат = ЭтаОбработка().ЭлементКоллекцииЯвляетсяСредствомОбработкиДанных(ИмяКоллекции);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции)
	
	Результат = ЭтаОбработка().ОтображениеСпискаЭлементовКоллекцииДоступно(ИмяКоллекции);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПутьКДаннымКолонкиСпискаЭлементовОбъектаМетаданных(ИмяСписка, ИмяКолонки)
	
	Результат = "";
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1.%2", ИмяСписка, ИмяКолонки);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяКолонкиСпискаЭлементовОбъектаМетаданных(ИмяКолонки, СтрокаСтруктуры)
	
	Результат = "";
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	НомерЭлемента = СчетчикДобавленныхЭлементов;
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(
		"Колонка" + _ + "%1" + _ + "%2" + _ + "%3" + _ + "%4" + _ + "%5", 
		СтрокаСтруктуры.ИмяКоллекции, 
		СтрокаСтруктуры.ИмяЭлементаКоллекции, 
		СтрокаСтруктуры.Имя, 
		ИмяКолонки, 
		НомерЭлемента
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМд)
	
	Результат = Новый Массив;
	ПустойРезультат = Новый Массив;
	
	#Область Предусловия
	
	Если СтрокаСтруктурыМд = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Результат = ЭтаОбработка().ПараметрыКолонокСпискаЭлементовОбъектаМетаданных(СтрокаСтруктурыМд.ИмяКоллекции, СтрокаСтруктурыМд.Имя);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяОсновнойТаблицыСпискаЭлементовОбъектаМетаданных(СтрокаДереваМд)
	
	Если СтрокаДереваМд.ИмяЭлементаКоллекции = "РегистрБухгалтерии" Тогда
		Результат = ПодставитьПараметрыВСтроку(
			"%1.%2.ДвиженияССубконто", 
			СтрокаДереваМд.ИмяЭлементаКоллекции, 
			СтрокаДереваМд.Имя
		);
	Иначе
		Результат = ПодставитьПараметрыВСтроку(
			"%1.%2", 
			СтрокаДереваМд.ИмяЭлементаКоллекции, 
			СтрокаДереваМд.Имя
		);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// TODO: Разнести по разным функциям увеличение счетчика добавленных
// элементов и составление имени элемента из всех "ингредиентов".

// Имя списка элементов.
//
// Параметры:
//	СтруктураОбъекта - Структура - данные выбранной строки дерева метаданных.
//
// Возвращаемое значение:
//	Тип: Строка
//	Имя списка элементов, например: "Список_Справочники_Справочник_Товары_1".
//	
&НаСервере
Функция ИмяСпискаЭлементовОбъектаМетаданных(СтруктураОбъекта)
	
	Результат = "";
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ПодставитьПараметрыВСтроку(
		"Список" + _ + "%1" + _ + "%2" + _ + "%3" + _ + "%4", 
		СтруктураОбъекта.ИмяКоллекции, СтруктураОбъекта.ИмяЭлементаКоллекции, СтруктураОбъекта.Имя, СчетчикДобавленныхЭлементов
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяГруппыКнопокСпискаЭлементовОбъектаМетаданных(ИмяСпискаЭлементов)
	
	Результат = "";
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	_ = Объект.Система_РазделительЧастейИмен;
	
	Результат = ПодставитьПараметрыВСтроку("ГруппаКнопок" + _ + "%1" + _ + "%2", ИмяСпискаЭлементов, СчетчикДобавленныхЭлементов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяФормыОбъектаМетаданных(СтруктураОбъекта)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СтруктураОбъекта = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	ИмяФормыОбъекта = "";
	ИмяФормыОбъекта = ПодставитьПараметрыВСтроку("%1.%2.%3", 
		СтруктураОбъекта.ИмяЭлементаКоллекции, 
		СтруктураОбъекта.Имя,
		"");
	
	//
	
	Результат = ИмяФормыОбъекта;
	
	Возврат Результат; // "Справочник.БазыРаспределения.Форма.ФормаСписка"
	
КонецФункции

&НаСервере
Функция ЗаголовокСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаМД)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СтрокаМД = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	Если СтрокаМД.КоличествоЗаписей > 0 Тогда
		Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1 (%2)", СтрокаМД.Имя, СтрокаМД.КоличествоЗаписей);
	Иначе
		Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("%1", СтрокаМД.Имя);
	КонецЕсли; 
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяСтраницыСпискаЭлементовОбъектаМетаданных(СтрокаДереваМД)
	
	Результат = "";
	ПустойРезультат = "";
	
	#Область Предусловия
	
	Если СтрокаДереваМД = Неопределено Тогда
		Возврат ПустойРезультат;
	КонецЕсли;
	
	#КонецОбласти
	
	РЧИ = Объект.Система_РазделительЧастейИмен;
	
	УвеличитьСчетчикДобавленныхЭлементов();
	
	НомерЭлемента = СчетчикДобавленныхЭлементов;
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку("Страница"
		+ РЧИ + "%1"
		+ РЧИ + "%2"
		+ РЧИ + "%3"
		+ РЧИ
		+ "%4", 
		СтрокаДереваМД.ИмяКоллекции, 
		СтрокаДереваМД.ИмяЭлементаКоллекции, 
		СтрокаДереваМД.Имя, 
		НомерЭлемента
	);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЭтаОбработка()
	
	Результат = РеквизитФормыВЗначение("Объект");
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных)
	
	Результат = ЭтаОбработка().КоличествоЭлементовКоллекцииТипаОбъектаМетаданных(ИмяКоллекцииМетаданных, ИмяОбъектаМетаданных);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИмяДополнительнойКомандыСпискаЭлементовОбъектаМетаданных(ИмяСпискаЭлементов, ТипДопКоманды)
	
	Результат = ЭтаОбработка().ИмяДополнительнойКомандыСпискаЭлементов(ИмяСпискаЭлементов, ТипДопКоманды);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПутьКДаннымПоляСпискаЭлементов(ИмяПоляСписка)
	
	ЧастиСтроки = ЭтаОбработка().РазложитьСтрокуВМАссивПодстрок(ИмяПоляСписка, Объект.Система_РазделительЧастейИмен);
	
	Результат = ЧастиСтроки[ЧастиСтроки.Количество() - 2];
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки, Знач Параметр1,
	Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено,
	Знач Параметр4 = Неопределено, Знач Параметр5 = Неопределено,
	Знач Параметр6 = Неопределено, Знач Параметр7 = Неопределено,
	Знач Параметр8 = Неопределено, Знач Параметр9 = Неопределено)
	
	Результат = ЭтаОбработка().ПодставитьПараметрыВСтроку(СтрокаПодстановки, Параметр1, Параметр2, Параметр3, Параметр4, Параметр5, Параметр6, Параметр7, Параметр8, Параметр9);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылка, ОпределительТипаЭлементов = "")
	
	Результат = ЭтаОбработка().ПолучитьСсылкуНаЭлементБазыПоАдресу(НавигационнаяСсылка, ОпределительТипаЭлементов);
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция РазложитьСтрокуВМассивПодстрок(Знач ЗначениеСтр, Знач РазделительСтр = ",", Знач ПропускатьПустыеСтроки = Неопределено, СокращатьНепечатаемыеСимволы = Ложь)
	
	Возврат ЭтаОбработка().РазложитьСтрокуВМассивПодстрок(ЗначениеСтр, РазделительСтр, ПропускатьПустыеСтроки, СокращатьНепечатаемыеСимволы);
	
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьКомандКонтекстногоМенюТаблицы(ТаблицаФормы)
	
	Если ТаблицаФормы.Имя = "СтруктураМетаданныхКонфигурации" Тогда
		
		УстановитьВидимостьКомандКонтекстногоМенюТаблицыРекурсивно(ТаблицаФормы, ТаблицаФормы.КонтекстноеМеню.ПодчиненныеЭлементы);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьКомандКонтекстногоМенюТаблицыРекурсивно(ТаблицаФормы, КоллекцияЭлементов)
	
	Для каждого ПодчиненныйЭлемент Из КоллекцияЭлементов Цикл
		
		Если ТипЗнч(ПодчиненныйЭлемент) = Тип("КнопкаФормы") Тогда
			
			Если ТаблицаФормы.ТекущиеДанные.ИмяЭлементаКоллекции = "Отчет" Или ТаблицаФормы.ТекущиеДанные.ИмяЭлементаКоллекции = "Обработка" Тогда
				
				ПодчиненныйЭлемент.Видимость = Истина;
				
				Если ПодчиненныйЭлемент.Имя = "КомандаОткрытьСписокЭлементовОбъектаМетаданных" Тогда
					ПодчиненныйЭлемент.Видимость = Ложь;
				ИначеЕсли ПодчиненныйЭлемент.Имя = "КомандаОткрытьОтчетОбработку" Тогда
					ПодчиненныйЭлемент.Видимость = Истина;
				КонецЕсли;
				
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПодчиненныйЭлемент) = Тип("ГруппаКнопокФормы") Тогда
			УстановитьВидимостьКомандКонтекстногоМенюТаблицыРекурсивно(ТаблицаФормы, ПодчиненныйЭлемент.ПодчиненныеЭлементы)
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#Область Типы

&НаСервере
Функция Тип_ЗаписьСтруктурыМетаданныхКонфигурации()
	
	Результат = ЭтаОбработка().Тип_ЗаписьСтруктурыМетаданныхКонфигурации();
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция Тип_СвойстваОбъектаОбработкиДанных()
	
	Результат = ЭтаОбработка().Тип_СвойстваОбъектаОбработкиДанных();
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция Тип_ПараметрыФормированияИмениЭлементаСписка()
	
	Результат = Новый Структура;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область Подключаемые

&НаКлиенте
Процедура Подключаемый_СписокЭлементовОбъектаМетаданныхВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка) Экспорт
	
	СтандартнаяОбработка = Ложь;
	
	ПутьКДаннымПоля = ПутьКДаннымПоляСпискаЭлементов(Поле.Имя);
	
	Попытка
		ПараметрыФормы = Новый Структура("ОбъектБазы", Элемент.ТекущиеДанные[ПутьКДаннымПоля]);
	Исключение
		Возврат;
	КонецПопытки;
	
	ПолноеИмяФормы = ПолноеИмяФормыОбработки(ЭтаФорма.ИмяФормы, "РедакторОбъекта");
	ОткрытьФорму(ПолноеИмяФормы, ПараметрыФормы, ЭтаФорма, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокЭлементовОбъектаМетаданныхНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение) Экспорт
	
	ИмяЭлементаИсточникаПриПеретаскивании = Элемент.Имя;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокЭлементовОбъектаМетаданныхОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка) Экспорт
	
	ИмяЭлементаИсточникаПриПеретаскивании = "";
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ДлительныеОперации

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере(ПараметрыВыполненияПроцедуры, УникальныйИдентификатор, ИмяМетода = "", НаименованиеЗадания = "")
	//
	//#Область Предусловия
	//
	//Если Не ЗначениеЗаполнено(ИмяМетода) Тогда
	//	ВызватьИсключение("Не указано имя метода.");
	//КонецЕсли;
	//
	//#КонецОбласти
	//
	//Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
	//	НаименованиеЗадания = СтрШаблон("Навигатор.%1", ИмяМетода);
	//КонецЕсли;
	//
	//ПараметрыПроцедуры = Новый Структура;
	//ПараметрыПроцедуры.Вставить("ИмяОбработки",                  РеквизитФормыВЗначение("Объект").ИспользуемоеИмяФайла);
	//ПараметрыПроцедуры.Вставить("ИмяМетода",                     ИмяМетода);
	//ПараметрыПроцедуры.Вставить("ПараметрыВыполнения",           ПараметрыВыполненияПроцедуры);
	//ПараметрыПроцедуры.Вставить("ЭтоВнешняяОбработка",           Истина);
	//ПараметрыПроцедуры.Вставить("ДополнительнаяОбработкаСсылка", Неопределено);
	//
	//ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
	//ПараметрыВыполнения.НаименованиеФоновогоЗадания = НаименованиеЗадания;
	//ПараметрыВыполнения.ЗапуститьВФоне              = Истина;
	//ПараметрыВыполнения.Вставить("ИдентификаторФормы", УникальныйИдентификатор); 
	//
	//СтруктураФоновогоЗадания = ДлительныеОперации.ВыполнитьВФоне(
	//	"ДлительныеОперации.ВыполнитьПроцедуруМодуляОбъектаОбработки", ПараметрыПроцедуры, ПараметрыВыполнения);
	//
	//Возврат СтруктураФоновогоЗадания;
	//
КонецФункции

#КонецОбласти 